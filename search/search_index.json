{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Corgi","text":"Small body. Big brain. Portable recs that follow you anywhere. <p>Corgi is a privacy-aware recommendation engine for the Fediverse that works as a middleware layer between any Mastodon client and server.</p>"},{"location":"#who-is-corgi-for","title":"Who is Corgi for?","text":"<ul> <li>Mastodon users who want better content discovery without algorithmic manipulation</li> <li>Developers building Fediverse clients who need a recommendation layer</li> <li>Instance operators looking to enhance their community's experience</li> </ul>"},{"location":"#choose-your-path","title":"Choose your path","text":"\ud83d\udd0e Interactive API Explorer <p>Test our endpoints right in your browser with Swagger UI.</p> Try Swagger UI \ud83d\udcda API Reference <p>Explore our complete API documentation with ReDoc.</p> View ReDoc \ud83d\udcbb GitHub Repo <p>View source code, contribute, or self-host Corgi.</p> Open GitHub"},{"location":"#try-it-in-5-minutes","title":"Try it in 5 minutes","text":"<p>Enhance your Mastodon timeline with personalized recommendations:</p> curlPython <pre><code># Get enhanced timeline with recommendations\ncurl -X GET \"https://api.corgi-recs.io/api/v1/timelines/home\" \\\n  -H \"Authorization: Bearer YOUR_MASTODON_TOKEN\" \\\n  -H \"X-Mastodon-Instance: mastodon.social\"\n</code></pre> <pre><code>import requests\n\n# Get enhanced timeline with recommendations\nresponse = requests.get(\n    \"https://api.corgi-recs.io/api/v1/timelines/home\",\n    headers={\n        \"Authorization\": \"Bearer YOUR_MASTODON_TOKEN\",\n        \"X-Mastodon-Instance\": \"mastodon.social\"\n    }\n)\n\ntimeline = response.json()\nfor post in timeline:\n    if post.get(\"is_recommendation\"):\n        print(f\"\u2728 Recommended: {post['account']['display_name']}: {post['content'][:50]}...\")\n    else:\n        print(f\"Regular: {post['account']['display_name']}: {post['content'][:50]}...\")\n</code></pre>"},{"location":"#how-it-works","title":"How It Works","text":"<p>Corgi transparently proxies your Mastodon API requests, analyzing your interactions to learn your preferences. When you request your home timeline, Corgi enhances it with personalized recommendations, seamlessly blended with your regular feed.</p> <pre><code>graph LR\n    A[Mastodon Client] --&gt;|API Requests| B[Corgi Middleware]\n    B --&gt;|Enhanced Responses| A\n    B --&gt;|Original Requests| C[Mastodon Instance]\n    C --&gt;|Original Responses| B\n    D[User Preferences &amp; Interactions] --&gt;|Personalizes| B\n    style B fill:#FFB300,stroke:#FF8F00,color:#000</code></pre> \ud83d\udc3e Corgi in action <p>When you favorite a post, Corgi remembers that you liked it. Later, when new content appears that's similar or from the same author, Corgi makes sure it appears in your timeline\u2014even if the Mastodon algorithm would have buried it.</p>"},{"location":"#core-features","title":"Core Features","text":"<ul> <li>Transparent Proxying \u2014 All Mastodon API requests pass through Corgi and are enhanced as needed</li> <li>Interaction Tracking \u2014 Favorites, boosts, and bookmarks inform the recommendation engine</li> <li>Privacy Controls \u2014 Set your tracking level (full, limited, or none) based on your comfort</li> <li>Recommendation API \u2014 Direct access to recommendation data for custom integrations</li> <li>Blended Timelines \u2014 Recommendations intelligently mixed with your regular home timeline</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to enhance your Fediverse experience? Start with our Quickstart guide to get Corgi running in minutes.</p>      Corgi works client-agnostic    <p>Just swap the API URL in your favorite Mastodon client\u2014no code changes needed! Works with Elk, Ivory, Ice Cubes, and any other client that allows custom API endpoints.</p>"},{"location":"COMPATIBILITY/","title":"Compatibility Matrix","text":"<p>This document outlines the compatibility between different components of the system and external dependencies.</p>"},{"location":"COMPATIBILITY/#corgi-recommender-service-compatibility","title":"Corgi Recommender Service Compatibility","text":"Component Status Notes Standalone Operation \u2705 Full Corgi can run completely independently Any Mastodon Client \u2705 Compatible Will work with any client that uses Mastodon API SQLite Database \u2705 Required Core data storage Python 3.8+ \u2705 Required Python 3.10+ recommended Flask \u2705 Required Web framework for API"},{"location":"COMPATIBILITY/#elk-integration-compatibility","title":"Elk Integration Compatibility","text":"Elk Version Status Notes Elk v0.16.0 \u2705 Compatible Fully tested Elk v0.15.x \u26a0\ufe0f Partial Basic functionality works, may have UI issues Elk v0.14.x and earlier \u274c Incompatible Not tested, likely incompatible"},{"location":"COMPATIBILITY/#script-dependencies","title":"Script Dependencies","text":"Script Docker Required Elk Required Other Requirements <code>scripts/start_corgi.sh</code> \u274c No \u274c No Python 3.8+, Flask <code>scripts/stop_corgi.sh</code> \u274c No \u274c No None <code>scripts/start_elk_with_corgi.sh</code> \u274c No \u2705 Yes Node.js, npm <code>scripts/docker_start_corgi.sh</code> \u2705 Yes \u274c No None"},{"location":"COMPATIBILITY/#browser-injection-compatibility","title":"Browser Injection Compatibility","text":"Browser Status Notes Chrome/Edge \u2705 Compatible Best with User JavaScript extension Firefox \u2705 Compatible Best with Tampermonkey/Greasemonkey Safari \u26a0\ufe0f Partial Limited extension support"},{"location":"COMPATIBILITY/#environment-requirements","title":"Environment Requirements","text":"Feature Requirement HTTPS Support OpenSSL for certificate generation Docker Deployment Docker Engine 20.10+ Development Mode Node.js 16+, npm 7+ for Elk Production Deployment Reverse proxy (Nginx/Apache) recommended"},{"location":"COMPATIBILITY/#operating-system-compatibility","title":"Operating System Compatibility","text":"OS Status Notes macOS \u2705 Tested Primary development platform Linux \u2705 Compatible Recommended for production Windows \u26a0\ufe0f Limited Untested, may work with WSL2"},{"location":"agent_guide/","title":"Corgi Agent Framework Guide","text":"<p>The Corgi Agent Framework provides a flexible, modular system for simulating synthetic users interacting with the Corgi Recommender service. This document covers how to use, customize, and extend the framework.</p>"},{"location":"agent_guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Getting Started</li> <li>Running Agents</li> <li>Available User Profiles</li> <li>Security Features</li> <li>Creating Custom Profiles</li> <li>Analyzing Results</li> <li>Advanced Features</li> <li>Deployment Options</li> </ol>"},{"location":"agent_guide/#getting-started","title":"Getting Started","text":""},{"location":"agent_guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9+</li> <li>Claude API key with access to the computer_use tool</li> <li>Running instance of the Corgi Recommender service</li> </ul>"},{"location":"agent_guide/#setup","title":"Setup","text":"<ol> <li>Environment Configuration</li> </ol> <p>Copy the example environment file and add your API key:</p> <pre><code>cp .env.example .env\n# Edit .env to add your Claude API key\n</code></pre> <ol> <li>Required Libraries</li> </ol> <p>Install the required libraries:</p> <pre><code>pip install -r agents/requirements.txt\n</code></pre> <ol> <li>Verify Setup</li> </ol> <p>Run a test to verify your setup:</p> <pre><code>python agents/test_all_features.py --feature no_llm\n</code></pre>"},{"location":"agent_guide/#running-agents","title":"Running Agents","text":""},{"location":"agent_guide/#command-line","title":"Command Line","text":"<p>The simplest way to run an agent is via the command line:</p> <pre><code>python agents/test_runner.py --profile tech_fan --tools-enabled\n</code></pre>"},{"location":"agent_guide/#helper-script","title":"Helper Script","text":"<p>For convenience, use the <code>run-agent.sh</code> script:</p> <pre><code>./run-agent.sh profile=tech_fan tools_enabled=true\n</code></pre>"},{"location":"agent_guide/#makefile-target","title":"Makefile Target","text":"<p>Use the make target for even simpler execution:</p> <pre><code>make run-agent profile=tech_fan tools_enabled=true\n</code></pre>"},{"location":"agent_guide/#docker-container","title":"Docker Container","text":"<p>For isolated, reproducible environments, use Docker:</p> <pre><code>make agent-docker profile=tech_fan tools_enabled=true\n</code></pre> <p>Or directly with Docker:</p> <pre><code>docker build -t corgi-agent -f agents/Dockerfile .\ndocker run -it --rm -v $PWD/.env:/app/.env:ro -v $PWD/logs:/app/logs corgi-agent --profile tech_fan\n</code></pre>"},{"location":"agent_guide/#common-options","title":"Common Options","text":"Option Script Format CLI Format Description Profile <code>profile=NAME</code> <code>--profile NAME</code> User profile to simulate Max Tokens <code>max_tokens=50000</code> <code>--max-tokens 50000</code> Token usage limit Browser Tools <code>tools_enabled=true</code> <code>--tools-enabled</code> Enable browser tooling Fast Mode <code>no_llm=true</code> <code>--no-llm</code> Run without Claude API Interaction Limit <code>limit_interactions=15</code> <code>--max-interactions 15</code> Browser interactions limit Privacy Testing <code>privacy_level=limited</code> <code>--privacy-level limited</code> Privacy level to test Custom Goal <code>goal=\"Find corgis\"</code> <code>--goal \"Find corgis\"</code> Custom test goal Headless Mode <code>headless=true</code> <code>--headless</code> Simulated UI with no real browser"},{"location":"agent_guide/#available-user-profiles","title":"Available User Profiles","text":"<p>The framework includes several built-in user profiles:</p>"},{"location":"agent_guide/#tech_fan","title":"tech_fan","text":"<p>A user interested in technology and technical content. - Prefers: linux, programming, coding, open source - Behavior: Seeks technical content, favoriting tech-related posts</p>"},{"location":"agent_guide/#news_skeptic","title":"news_skeptic","text":"<p>A user who is skeptical of news content and prefers factual information. - Prefers: verified news, fact checking, research, data journalism - Behavior: Evaluates content critically, distrusts sensationalism</p>"},{"location":"agent_guide/#meme_lover","title":"meme_lover","text":"<p>A user who enjoys humorous, light-hearted content. - Prefers: memes, funny, humor, jokes, cute animals - Behavior: Rapidly scrolls, seeking entertainment, loves corgis</p>"},{"location":"agent_guide/#privacy_tester","title":"privacy_tester","text":"<p>A user who tests different privacy settings and observes impacts. - Prefers: privacy, security, data protection - Behavior: Methodically tests and evaluates privacy settings</p>"},{"location":"agent_guide/#text_only","title":"text_only","text":"<p>A user who interacts via text without browser capabilities. - Prefers: general content - Behavior: Simple text-based interactions, no browser UI</p>"},{"location":"agent_guide/#security-features","title":"Security Features","text":"<p>The agent framework includes several security features:</p>"},{"location":"agent_guide/#network-isolation","title":"Network Isolation","text":"<p>By default, Docker containers run with network isolation. You can configure:</p> <pre><code># Disable internet access entirely\n./run-agent.sh profile=tech_fan disable_internet=true\n\n# Allow only specific domains\n./run-agent.sh profile=tech_fan allowed_domains=\"localhost,corgi-api.example.com\"\n</code></pre>"},{"location":"agent_guide/#headless-mode","title":"Headless Mode","text":"<p>For security and reproducibility, run in headless mode:</p> <pre><code>./run-agent.sh profile=tech_fan headless=true\n</code></pre> <p>This simulates the browser UI without requiring actual browser access.</p>"},{"location":"agent_guide/#sandbox-options","title":"Sandbox Options","text":"<p>For testing in a completely isolated environment:</p> <pre><code>make agent-docker profile=tech_fan disable_internet=true headless=true\n</code></pre>"},{"location":"agent_guide/#creating-custom-profiles","title":"Creating Custom Profiles","text":""},{"location":"agent_guide/#basic-profile-structure","title":"Basic Profile Structure","text":"<p>Create a new profile by adding a class in <code>agents/user_profiles.py</code>:</p> <pre><code>class FashionEnthusiastUser(UserProfile):\n    def __init__(self):\n        preferred_topics = [\n            \"fashion\", \"style\", \"clothing\", \"accessories\", \n            \"trends\", \"outfits\", \"designer\"\n        ]\n        super().__init__(\n            name=\"fashion_fan\",\n            description=\"A user interested in fashionable corgis\",\n            preferred_topics=preferred_topics,\n            use_browser=True  # Set to False for text-only profiles\n        )\n\n    def get_behavior_prompt(self, time_of_day=None, test_goal=None) -&gt; str:\n        # Add time-of-day and goal-specific customization\n        base_prompt = (\n            \"You are a fashion enthusiast browsing the Corgi Recommender. \"\n            \"Your goal is to find and interact with posts about stylish corgis.\"\n        )\n\n        # Adapt based on time of day\n        if time_of_day == \"morning\":\n            base_prompt += \" It's morning, so you're looking for the day's trends.\"\n\n        return base_prompt\n\n    def rate_recommendation(self, post_content: str) -&gt; str:\n        # Generate feedback based on post content\n        if \"fashion\" in post_content.lower() or \"style\" in post_content.lower():\n            return \"Love this fashion content! Totally my style!\"\n        else:\n            return \"This doesn't seem fashion-related. I'm looking for stylish content.\"\n</code></pre>"},{"location":"agent_guide/#optimized-batch-processing","title":"Optimized Batch Processing","text":"<p>For efficiency, implement batch processing:</p> <pre><code>def handle_post_batch(self, post_contents: List[str]) -&gt; Dict[str, str]:\n    \"\"\"Process multiple posts in one go.\"\"\"\n    results = {}\n    for post in post_contents:\n        post_lower = post.lower()\n        if \"fashion\" in post_lower or \"style\" in post_lower:\n            results[post] = \"Love this fashion content! Totally my style!\"\n        else:\n            results[post] = \"This doesn't seem fashion-related. I'm looking for stylish content.\"\n    return results\n</code></pre>"},{"location":"agent_guide/#heuristic-decision-making","title":"Heuristic Decision Making","text":"<p>For no-LLM mode, implement heuristic decision making:</p> <pre><code>def make_heuristic_decision(self, action_type: str, context: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"Make decisions without calling Claude API.\"\"\"\n    if action_type == \"rating\":\n        post_content = context.get(\"post_content\", \"\").lower()\n        if \"fashion\" in post_content or \"style\" in post_content:\n            return {\"decision\": \"favorite\", \"reason\": \"fashion content\"}\n        else:\n            return {\"decision\": \"skip\", \"reason\": \"not fashion-related\"}\n    elif action_type == \"privacy\":\n        return {\"decision\": \"limited\", \"reason\": \"balanced privacy\"}\n    else:\n        return {\"decision\": \"scroll\"}\n</code></pre>"},{"location":"agent_guide/#registering-your-profile","title":"Registering Your Profile","text":"<p>After creating your profile class, add it to the registry in <code>get_profile_by_name()</code> function:</p> <pre><code>def get_profile_by_name(profile_name: str) -&gt; UserProfile:\n    profiles = {\n        \"tech_fan\": TechFan(),\n        \"news_skeptic\": NewsSkeptic(),\n        \"meme_lover\": MemeLover(),\n        \"privacy_tester\": PrivacyTester(),\n        \"text_only\": TextOnlyUser(),\n        \"fashion_fan\": FashionEnthusiastUser(),  # Add your new profile here\n    }\n    # ...\n</code></pre>"},{"location":"agent_guide/#analyzing-results","title":"Analyzing Results","text":""},{"location":"agent_guide/#single-run-analysis","title":"Single Run Analysis","text":"<p>After each run, the framework automatically logs and displays results:</p> <pre><code>./run-agent.sh profile=tech_fan output_dir=logs/my_test\n</code></pre> <p>This will create detailed logs in <code>logs/my_test/</code> including: - <code>results.json</code>: Complete test results - <code>run.log</code>: Console output log</p>"},{"location":"agent_guide/#multiple-run-analysis","title":"Multiple Run Analysis","text":"<p>To analyze results across multiple runs:</p> <pre><code>./run-agent.sh report=true\n</code></pre> <p>This generates: - Summary statistics across all runs - Per-profile performance metrics - Token usage and cost estimates</p>"},{"location":"agent_guide/#token-usage-statistics","title":"Token Usage Statistics","text":"<p>View token usage statistics:</p> <pre><code>python agents/test_runner.py --show-usage\n</code></pre> <p>Or with the helper script:</p> <pre><code>./run-agent.sh report=true\n</code></pre>"},{"location":"agent_guide/#advanced-features","title":"Advanced Features","text":""},{"location":"agent_guide/#multi-agent-testing","title":"Multi-Agent Testing","text":"<p>Run multiple agents in parallel:</p> <pre><code>make multi-agent profiles=\"tech_fan news_skeptic meme_lover\"\n</code></pre> <p>This launches each profile in parallel (in no-llm mode for performance).</p>"},{"location":"agent_guide/#webhook-notifications","title":"Webhook Notifications","text":"<p>Configure webhook notifications for test completion:</p> <pre><code>./run-agent.sh profile=tech_fan webhook_url=\"https://your-webhook-endpoint.com\"\n</code></pre>"},{"location":"agent_guide/#batch-processing","title":"Batch Processing","text":"<p>For large-scale testing:</p> <pre><code># Create a batch job script\nfor profile in tech_fan news_skeptic meme_lover privacy_tester; do\n  for privacy in full limited none; do\n    ./run-agent.sh profile=$profile privacy_level=$privacy no_llm=true headless=true &amp;\n  done\ndone\nwait\n</code></pre>"},{"location":"agent_guide/#deployment-options","title":"Deployment Options","text":""},{"location":"agent_guide/#docker-deployment","title":"Docker Deployment","text":"<p>The included Dockerfile is production-ready:</p> <pre><code># Build image\ndocker build -t corgi-agent -f agents/Dockerfile .\n\n# Run with security features enabled\ndocker run -it --rm \\\n  -v $PWD/.env:/app/.env:ro \\\n  -v $PWD/logs:/app/logs \\\n  -e CLAUDE_DISABLE_INTERNET=true \\\n  -e HEADLESS_MODE=true \\\n  corgi-agent --profile tech_fan --no-llm\n</code></pre>"},{"location":"agent_guide/#cloud-deployment","title":"Cloud Deployment","text":"<p>For scheduled test runs, set up a cloud environment:</p> <ol> <li>Push the Docker image to a container registry</li> <li>Set up a scheduled job (e.g., Kubernetes CronJob)</li> <li>Configure webhook notifications for results reporting</li> <li>Mount a shared volume for logs or send to a logging service</li> </ol> <p>Example Kubernetes CronJob:</p> <pre><code>apiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: corgi-agent-test\nspec:\n  schedule: \"0 */6 * * *\"  # Every 6 hours\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: corgi-agent\n            image: your-registry/corgi-agent:latest\n            args:\n            - \"--profile\"\n            - \"tech_fan\"\n            - \"--no-llm\"\n            - \"--headless\"\n            volumeMounts:\n            - name: env-file\n              mountPath: /app/.env\n              subPath: .env\n            - name: logs\n              mountPath: /app/logs\n          volumes:\n          - name: env-file\n            secret:\n              secretName: corgi-agent-env\n          - name: logs\n            persistentVolumeClaim:\n              claimName: corgi-agent-logs\n          restartPolicy: OnFailure\n</code></pre>"},{"location":"agent_guide/#cicd-integration","title":"CI/CD Integration","text":"<p>For continuous testing, integrate with your CI/CD pipeline:</p> <pre><code># Example GitHub Actions workflow\nname: Run Agent Tests\non:\n  schedule:\n    - cron: '0 0 * * *'  # Daily at midnight\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Build Docker image\n      run: docker build -t corgi-agent -f agents/Dockerfile .\n    - name: Run agent tests\n      run: |\n        docker run --rm \\\n          -v ${{ github.workspace }}/.env.ci:/app/.env \\\n          -v ${{ github.workspace }}/logs:/app/logs \\\n          corgi-agent --profile tech_fan --no-llm --headless\n</code></pre>"},{"location":"api-documentation/","title":"API Documentation Guide","text":"<p>The Corgi Recommender Service provides comprehensive API documentation through multiple interfaces to help developers integrate with the service.</p>"},{"location":"api-documentation/#available-documentation-interfaces","title":"Available Documentation Interfaces","text":""},{"location":"api-documentation/#swagger-ui","title":"Swagger UI","text":"<p>Swagger UI provides an interactive experience for exploring and testing the API. It's the best choice when you want to try out API calls directly from your browser.</p> <p>Access URL: <code>/api/v1/docs</code></p> <p></p> <p>Features: - Interactive \"Try it out\" functionality - Detailed schema information - Request/response examples - Authentication support</p>"},{"location":"api-documentation/#redoc","title":"ReDoc","text":"<p>ReDoc offers a clean, responsive, and easy-to-read documentation interface that's ideal for understanding the API structure.</p> <p>Access URL: <code>/api/v1/docs/redoc</code></p> <p>Features: - Clean, three-panel layout - Excellent readability - Response examples - Search functionality</p>"},{"location":"api-documentation/#openapi-specification","title":"OpenAPI Specification","text":"<p>The raw OpenAPI specification is available in JSON format for integration with other tools.</p> <p>Access URL: <code>/api/v1/docs/spec</code></p>"},{"location":"api-documentation/#understanding-the-api-structure","title":"Understanding the API Structure","text":"<p>The API is organized into several functional areas:</p>"},{"location":"api-documentation/#interactions-api","title":"Interactions API","text":"<p>Endpoints for logging and retrieving user interactions with posts: - <code>POST /api/v1/interactions</code>: Log a user interaction - <code>GET /api/v1/interactions/{post_id}</code>: Get interactions for a post - <code>POST /api/v1/interactions/counts/batch</code>: Get counts for multiple posts - <code>GET /api/v1/interactions/user/{user_id}</code>: Get all interactions for a user - <code>GET /api/v1/interactions/favourites</code>: Get user's favorite posts</p>"},{"location":"api-documentation/#timelines-api","title":"Timelines API","text":"<p>Mastodon-compatible timeline endpoints with recommendation integration: - <code>GET /api/v1/timelines/recommended</code>: Get personalized recommended posts - <code>GET /api/v1/timelines/home</code>: Get home timeline (proxied to Mastodon) - <code>GET /api/v1/timelines/home/augmented</code>: Get home timeline with injected recommendations</p>"},{"location":"api-documentation/#recommendations-api","title":"Recommendations API","text":"<p>Endpoints specific to the recommendation engine: - <code>GET /api/v1/recommendations</code>: Get personalized post recommendations - <code>GET /api/v1/recommendations/real-posts</code>: Get only real Mastodon posts - <code>POST /api/v1/rankings/generate</code>: Generate personalized rankings for a user</p>"},{"location":"api-documentation/#privacy-api","title":"Privacy API","text":"<p>User privacy settings management: - <code>GET /api/v1/privacy</code>: Get user privacy settings - <code>POST /api/v1/privacy</code>: Update user privacy settings</p>"},{"location":"api-documentation/#posts-api","title":"Posts API","text":"<p>Post management endpoints: - <code>GET /api/v1/posts</code>: Get a list of posts - <code>POST /api/v1/posts</code>: Create or update a post - <code>GET /api/v1/posts/{post_id}</code>: Get a specific post - <code>GET /api/v1/posts/author/{author_id}</code>: Get posts by an author - <code>GET /api/v1/posts/trending</code>: Get trending posts</p>"},{"location":"api-documentation/#proxy-api","title":"Proxy API","text":"<p>Transparent Mastodon proxy functionality: - <code>GET /api/v1/proxy/status</code>: Check proxy status - <code>GET /api/v1/proxy/instance</code>: Debug instance detection - <code>GET /api/v1/proxy/metrics</code>: Get proxy usage metrics</p>"},{"location":"api-documentation/#authentication","title":"Authentication","text":"<p>Most API endpoints require authentication. The service supports:</p> <ol> <li> <p>Bearer Token Authentication:    <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre></p> </li> <li> <p>User ID Parameter (for testing only):    <pre><code>?user_id=&lt;user_id&gt;\n</code></pre></p> </li> </ol>"},{"location":"api-documentation/#common-data-structures","title":"Common Data Structures","text":""},{"location":"api-documentation/#mastodonpost","title":"MastodonPost","text":"<p>The core post object follows the Mastodon API format with additional fields for recommendations:</p> <pre><code>{\n  \"id\": \"123456\",\n  \"content\": \"&lt;p&gt;This is a post about corgis!&lt;/p&gt;\",\n  \"created_at\": \"2025-03-15T14:30:00Z\",\n  \"account\": {\n    \"id\": \"user_789\",\n    \"username\": \"corgi_lover\",\n    \"display_name\": \"Corgi Enthusiast\"\n  },\n  \"favourites_count\": 42,\n  \"reblogs_count\": 12,\n  \"replies_count\": 5,\n  \"ranking_score\": 0.87,\n  \"recommendation_reason\": \"Based on your interest in dogs\",\n  \"is_real_mastodon_post\": true,\n  \"is_synthetic\": false\n}\n</code></pre>"},{"location":"api-documentation/#interaction","title":"Interaction","text":"<p>User interactions with posts:</p> <pre><code>{\n  \"user_alias\": \"user_12345\",\n  \"post_id\": \"post_67890\",\n  \"action_type\": \"favorite\",\n  \"context\": {\n    \"source\": \"timeline_home\"\n  }\n}\n</code></pre>"},{"location":"api-documentation/#privacy-settings","title":"Privacy Settings","text":"<p>User privacy configuration:</p> <pre><code>{\n  \"user_id\": \"user_12345\",\n  \"tracking_level\": \"limited\"\n}\n</code></pre>"},{"location":"api-documentation/#pagination","title":"Pagination","text":"<p>For endpoints that return lists, pagination is supported through these parameters:</p> <ul> <li><code>limit</code>: Maximum number of items to return</li> <li><code>page</code>: Page number for pagination</li> <li><code>since_id</code>: Return items newer than this ID</li> <li><code>max_id</code>: Return items older than this ID</li> </ul>"},{"location":"api-documentation/#error-handling","title":"Error Handling","text":"<p>The API uses standard HTTP status codes and returns error details in a consistent format:</p> <pre><code>{\n  \"error\": \"Description of what went wrong\",\n  \"received\": {\n    \"parameter_name\": \"invalid_value\"\n  },\n  \"request_id\": \"req_abc123\"\n}\n</code></pre>"},{"location":"api-documentation/#implementing-with-fastapi","title":"Implementing with FastAPI","text":"<p>For developers interested in implementing a similar API documentation system using FastAPI, check out the example code in <code>routes/fastapi_example.py</code>.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>This document outlines the architecture of the Corgi Recommender Service, explaining its components, data flow, and design decisions.</p>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>The Corgi Recommender Service is a Flask-based microservice that provides personalized content recommendations for Mastodon users. It tracks user interactions, analyzes preferences, and delivers tailored content suggestions.</p>"},{"location":"architecture/#key-components","title":"Key Components","text":"<p>The system consists of these main components:</p> <ol> <li>API Layer: Flask routes handling client requests</li> <li>Database Layer: PostgreSQL database for data persistence</li> <li>Core Engine: Ranking algorithm and recommendation logic</li> <li>Utility Services: Privacy controls, logging, and validation</li> </ol>"},{"location":"architecture/#component-details","title":"Component Details","text":""},{"location":"architecture/#api-layer","title":"API Layer","text":"<p>The API layer uses Flask blueprints to organize endpoints by functionality:</p> <ul> <li>Interactions API: Logs and queries user interactions with posts</li> <li>Recommendations API: Provides personalized content suggestions</li> <li>Privacy API: Manages user privacy settings</li> </ul> <p>Each blueprint is defined in its own module within the <code>routes/</code> directory, promoting code organization and maintainability.</p>"},{"location":"architecture/#database-layer","title":"Database Layer","text":"<p>The service uses PostgreSQL for data storage, with these primary tables:</p> <ul> <li>post_metadata: Stores post content and metadata</li> <li>interactions: Records user engagement with posts</li> <li>post_rankings: Stores personalized ranking scores</li> <li>privacy_settings: Manages user privacy preferences</li> </ul> <p>Database access is handled through a connection pool (using <code>psycopg2</code>), providing efficient connection management and query execution.</p>"},{"location":"architecture/#core-engine","title":"Core Engine","text":"<p>The recommendation engine consists of:</p> <ul> <li>Ranking Algorithm: Analyzes user behavior and post characteristics to compute personalized relevance scores</li> <li>Feature Extractors: Calculate individual feature scores (e.g., author preference, content engagement, recency)</li> <li>Post Processor: Formats recommendations in Mastodon-compatible format</li> </ul> <p>The algorithm uses a weighted combination of features, allowing for easy tuning of recommendation priorities.</p>"},{"location":"architecture/#utility-services","title":"Utility Services","text":"<p>Supporting components include:</p> <ul> <li>Privacy Manager: Enforces data collection policies based on user preferences</li> <li>Logging System: Provides detailed request logging with request IDs</li> <li>Validator: Tests system functionality and recommendation quality</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":""},{"location":"architecture/#user-interaction-flow","title":"User Interaction Flow","text":"<ol> <li>User interacts with content (e.g., favorites a post)</li> <li>Client sends interaction to <code>/api/v1/interactions</code> endpoint</li> <li>System pseudonymizes user ID for privacy</li> <li>Interaction is stored in the database</li> <li>Post interaction counts are updated</li> </ol>"},{"location":"architecture/#recommendation-flow","title":"Recommendation Flow","text":"<ol> <li>Client requests recommendations for a user</li> <li>System checks for existing rankings (cached from previous generation)</li> <li>If needed, recommendation algorithm is triggered:</li> <li>Retrieves user's past interactions</li> <li>Gathers candidate posts</li> <li>Calculates ranking scores for each post</li> <li>Stores rankings in the database</li> <li>Recommended posts are formatted and returned to the client</li> </ol>"},{"location":"architecture/#design-decisions","title":"Design Decisions","text":""},{"location":"architecture/#1-pseudonymization-of-user-ids","title":"1. Pseudonymization of User IDs","text":"<p>User IDs are hashed with a salt before storage to enhance privacy. This allows the system to track user preferences without storing raw identifiers.</p>"},{"location":"architecture/#2-database-connection-pooling","title":"2. Database Connection Pooling","text":"<p>Connection pooling is used to efficiently manage database connections, reducing the overhead of establishing new connections for each request.</p>"},{"location":"architecture/#3-blueprint-based-api-design","title":"3. Blueprint-Based API Design","text":"<p>Flask blueprints provide a modular approach to API design, allowing clear separation of concerns and easier maintenance.</p>"},{"location":"architecture/#4-mastodon-compatible-response-format","title":"4. Mastodon-Compatible Response Format","text":"<p>Responses follow Mastodon API conventions, enabling direct integration with existing clients while adding recommendation-specific metadata.</p>"},{"location":"architecture/#5-three-tier-privacy-model","title":"5. Three-Tier Privacy Model","text":"<p>The system offers three privacy levels (full, limited, none) to give users control over data collection while balancing recommendation quality.</p>"},{"location":"architecture/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"architecture/#current-limitations","title":"Current Limitations","text":"<ul> <li>Single server deployment</li> <li>In-memory recommendation processing</li> <li>No distributed caching</li> </ul>"},{"location":"architecture/#potential-improvements","title":"Potential Improvements","text":"<ul> <li>Introduce worker queues for asynchronous ranking generation</li> <li>Implement Redis-based caching for recommendations</li> <li>Add database sharding for high-volume deployments</li> </ul>"},{"location":"architecture/#security-considerations","title":"Security Considerations","text":"<p>The service implements several security measures:</p> <ul> <li>User data pseudonymization</li> <li>Configurable CORS policies</li> <li>Robust input validation</li> <li>Request ID tracking for audit trails</li> </ul>"},{"location":"architecture/#development-and-testing","title":"Development and Testing","text":"<p>The service includes:</p> <ul> <li>Comprehensive testing framework</li> <li>Validation tool for end-to-end testing</li> <li>Environment-specific configuration</li> </ul>"},{"location":"architecture/#references","title":"References","text":"<ul> <li>Flask Documentation</li> <li>PostgreSQL Documentation</li> <li>Mastodon API Reference</li> <li>Content Recommendation Best Practices</li> </ul>"},{"location":"cold_start_adaptive/","title":"Adaptive Cold Start System","text":"<p>The Adaptive Cold Start System is an enhancement to Corgi's basic cold start strategy that transforms the initial onboarding experience into a personalized recommendation bootloader. This system learns from a user's first interactions to gradually shift them into meaningful, personalized recommendations.</p>"},{"location":"cold_start_adaptive/#how-it-works","title":"How It Works","text":"<p>The adaptive cold start system extends the basic cold start strategy with the following improvements:</p> <ol> <li> <p>Rich Content Metadata: Each cold start post is tagged with detailed metadata including tags, category, vibe, tone, account type, and post type.</p> </li> <li> <p>User Signal Tracking: The system tracks how users interact with different content types to build a preference profile.</p> </li> <li> <p>Weighted Content Selection: As users interact with content, the system gradually shifts from providing diverse content to content matching their demonstrated preferences.</p> </li> <li> <p>Adaptive Content Ratio: The ratio of diverse vs. weighted content evolves based on user interaction history.</p> </li> <li> <p>Automatic Promotion: Users exit cold start mode after sufficient interactions and tag diversity.</p> </li> <li> <p>Re-entry Detection: Users who become inactive for an extended period (14+ days) can re-enter cold start mode to refresh their recommendations.</p> </li> </ol>"},{"location":"cold_start_adaptive/#signal-tracking-and-preference-mapping","title":"Signal Tracking and Preference Mapping","text":"<p>The system tracks multiple dimensions of user preferences:</p> Signal Type Description Example Values Tags Topic labels associated with content \"art\", \"technology\", \"politics\" Categories Broader content categories \"news\", \"entertainment\", \"education\" Vibes Content emotional qualities \"funny\", \"serious\", \"inspirational\" Tones Content presentation style \"informative\", \"casual\", \"provocative\" Account Types Types of accounts creating content \"individual\", \"organization\", \"official\" Post Types Structural content types \"text\", \"image\", \"video\", \"poll\" <p>User preferences are tracked across these dimensions using different interaction types, with varying weights:</p> Interaction Weight Description Favorite 1.0 Standard weight for liking content Reblog 1.5 Higher weight indicating stronger endorsement Bookmark 1.2 Indicates intention to revisit content Reply 1.3 Active engagement with the content"},{"location":"cold_start_adaptive/#content-selection-algorithm","title":"Content Selection Algorithm","text":"<p>The adaptive content selection works through the following process:</p> <ol> <li> <p>Signal Collection: User interactions with cold start posts are tracked and stored in a signal profile.</p> </li> <li> <p>Content Scoring: Each potential cold start post is scored against the user's signal profile.</p> </li> <li> <p>Weighted Random Selection: Posts are selected using a combination of:</p> </li> <li>Random diverse content (initially 70%)</li> <li> <p>Preference-weighted content (initially 30%)</p> </li> <li> <p>Adaptive Ratio Evolution: As users interact more, the ratio shifts toward weighted content, reinforcing their preferences.</p> </li> </ol>"},{"location":"cold_start_adaptive/#promotion-criteria","title":"Promotion Criteria","text":"<p>Users exit cold start mode when they meet ALL of the following conditions:</p> <ul> <li>At least 5 total interactions with cold start posts</li> <li>Interactions with at least 3 unique tags</li> <li>At least 1 of each primary interaction type (favorite, reblog, or reply)</li> </ul> <p>Upon promotion, users receive primarily content from accounts they follow, supplemented with personalized recommendations.</p>"},{"location":"cold_start_adaptive/#cold-start-re-entry","title":"Cold Start Re-entry","text":"<p>If a user becomes inactive for more than 14 days, they are eligible for cold start re-entry. This helps:</p> <ul> <li>Reacquaint returning users with the platform</li> <li>Refresh their recommendations if their interests have changed</li> <li>Provide fresh content discovery opportunities</li> </ul>"},{"location":"cold_start_adaptive/#configuration","title":"Configuration","text":"<p>The adaptive cold start system can be configured through <code>config/cold_start_weights.json</code>:</p> <pre><code>{\n  \"random_ratio\": 0.7,       // Initial ratio of random diverse content\n  \"weighted_ratio\": 0.3,     // Initial ratio of preference-weighted content\n  \"evolution_rate\": 0.1,     // How quickly ratios shift toward personalization\n  \"min_weighted_ratio\": 0.3, // Minimum weighted content ratio\n  \"max_weighted_ratio\": 1.0  // Maximum weighted content ratio\n}\n</code></pre>"},{"location":"cold_start_adaptive/#analyzing-user-signal-profiles","title":"Analyzing User Signal Profiles","text":"<p>You can analyze user signal profiles using the CLI tool:</p> <pre><code>python scripts/view_cold_profile.py --user user123\n</code></pre> <p>This displays a visualization of the user's preferences across different signal dimensions, showing:</p> <ul> <li>Top tags by interaction count</li> <li>Category distribution</li> <li>Vibe preferences</li> <li>Interaction history timeline</li> <li>Promotion status</li> </ul>"},{"location":"cold_start_adaptive/#technical-implementation","title":"Technical Implementation","text":"<p>The adaptive cold start system is implemented through these components:</p> <ul> <li><code>utils/user_signals.py</code>: Core logic for signal tracking and weighted selection</li> <li><code>data/cold_start_posts.json</code>: Enhanced post data with rich metadata</li> <li><code>config/cold_start_weights.json</code>: Configuration for content selection ratios</li> <li><code>routes/proxy.py</code>: Integration with the timeline API endpoints</li> </ul>"},{"location":"cold_start_adaptive/#privacy-considerations","title":"Privacy Considerations","text":"<p>All user signal data is:</p> <ul> <li>Pseudonymized using the same privacy-preserving techniques as the main recommender</li> <li>Stored securely with the same retention policies as other user data</li> <li>Subject to the same deletion/reset requests as the main recommendation engine</li> <li>Never shared with third parties</li> </ul>"},{"location":"cold_start_adaptive/#logging-and-diagnostics","title":"Logging and Diagnostics","text":"<p>The adaptive cold start system provides detailed logging:</p> <ul> <li><code>COLD-START-SIGNAL-*</code>: Logs signal updates from user interactions</li> <li><code>COLD-START-SELECT-*</code>: Logs post selection decisions</li> <li><code>COLD-START-PROMOTE-*</code>: Logs promotion status changes</li> <li><code>COLD-START-REENTRY-*</code>: Logs cold start re-entry events</li> </ul> <p>These logs help analyze system performance and troubleshoot issues while maintaining user privacy.</p>"},{"location":"cold_start_strategy/","title":"Cold Start Strategy","text":"<p>The Cold Start Strategy is a key feature of the Corgi Recommender Service that helps solve the \"cold start problem\" in recommendation systems - the challenge of providing relevant content to new users who have no interaction history.</p>"},{"location":"cold_start_strategy/#what-is-the-cold-start-strategy","title":"What is the Cold Start Strategy?","text":"<p>When a new user joins the Fediverse or connects to Corgi, they typically have no follows and no personalized timeline content. Instead of showing an empty timeline, Corgi's Cold Start Strategy provides these users with a curated set of high-quality posts across diverse topics.</p> <p>The cold start posts: - Cover a wide range of categories (technology, art, science, literature, etc.) - Are designed to be broadly appealing and engagement-worthy - Help new users discover interesting content and accounts to follow - Provide immediate value to users without requiring them to first build a network</p>"},{"location":"cold_start_strategy/#how-is-it-triggered","title":"How is it Triggered?","text":"<p>The Cold Start Strategy activates automatically in three scenarios:</p> <ol> <li>New Users: When a user follows no one (determined by querying their instance's API)</li> <li>Anonymous Users: When no user authentication is provided (ensuring timelines are never blank)</li> <li>Manual Testing: When explicitly requested via the <code>cold_start=true</code> query parameter</li> </ol> <pre><code>flowchart TD\n    A[Timeline Request] --&gt; B{User Authenticated?}\n    B --&gt;|No| C[Serve Cold Start Content]\n    B --&gt;|Yes| D{Follows Anyone?}\n    D --&gt;|No| C\n    D --&gt;|Yes| E{Has Interaction History?}\n    E --&gt;|No| F[Cold Start + Limited Recommendations]\n    E --&gt;|Yes| G[Regular Timeline + Recommendations]\n    H[Manual Override] --&gt;|cold_start=true| C\n\n    style C fill:#FFB300,stroke:#FF8F00,color:#000000,font-weight:bold\n    style F fill:#FFB300,stroke:#FF8F00,color:#000000,font-weight:bold</code></pre> <pre><code># Simplified logic from routes/proxy.py\ncold_start_mode = force_cold_start  # From cold_start=true parameter\n\nif COLD_START_ENABLED and not cold_start_mode and user_token:\n    from utils.follows import user_follows_anyone\n\n    # Check if user follows anyone\n    follows_anyone = user_follows_anyone(user_token)\n\n    if not follows_anyone:\n        cold_start_mode = True\n        # User follows no one - trigger cold start mode\n</code></pre>"},{"location":"cold_start_strategy/#route-and-parameter-changes","title":"Route and Parameter Changes","text":"<p>The cold start functionality is integrated into several routes:</p>"},{"location":"cold_start_strategy/#primary-route-apiv1timelineshome","title":"Primary Route: <code>/api/v1/timelines/home</code>","text":"<p>This is the main endpoint where cold start content is served:</p> <pre><code>GET /api/v1/timelines/home\n</code></pre> <p>Query parameters: - <code>cold_start=true</code> - Explicitly force cold start mode (useful for testing) - <code>limit=20</code> - Control the number of posts returned (default: 20)</p>"},{"location":"cold_start_strategy/#augmented-timeline-apiv1timelineshomeaugmented","title":"Augmented Timeline: <code>/api/v1/timelines/home/augmented</code>","text":"<p>This endpoint supports blending recommendations with regular timeline content:</p> <pre><code>GET /api/v1/timelines/home/augmented\n</code></pre> <p>Query parameters: - <code>inject_recommendations=true</code> - Explicitly control recommendation injection - <code>blend_ratio=0.3</code> - Control the ratio of recommendations to regular posts (default: 0.3 or 30%)</p>"},{"location":"cold_start_strategy/#configuration-options","title":"Configuration Options","text":"<p>The Cold Start Strategy can be configured using the following environment variables:</p> Variable Description Default <code>COLD_START_ENABLED</code> Enable/disable the cold start feature <code>true</code> <code>COLD_START_POSTS_PATH</code> Path to the JSON file containing cold start posts <code>data/cold_start_posts.json</code> <code>COLD_START_POST_LIMIT</code> Maximum number of cold start posts to include <code>30</code> <code>ALLOW_COLD_START_FOR_ANONYMOUS</code> Enable cold start content for unauthenticated users <code>true</code>"},{"location":"cold_start_strategy/#cold-start-posts-format","title":"Cold Start Posts Format","text":"<p>The cold start posts are defined in a JSON file with the following structure:</p> <pre><code>[\n  {\n    \"id\": \"cold_start_post_1\",\n    \"content\": \"&lt;p&gt;Welcome to the Fediverse! This decentralized social network connects people...&lt;/p&gt;\",\n    \"created_at\": \"2025-04-19T12:00:00.000Z\",\n    \"account\": {\n      \"id\": \"corgi_official\",\n      \"username\": \"corgi_official\",\n      \"display_name\": \"Corgi Recommender\",\n      \"url\": \"https://example.com/@corgi_official\"\n    },\n    \"language\": \"en\",\n    \"favourites_count\": 350,\n    \"reblogs_count\": 120,\n    \"replies_count\": 25,\n    \"tags\": [\"welcome\", \"introduction\", \"fediverse\"],\n    \"category\": \"welcome\"\n  },\n  // Additional posts...\n]\n</code></pre> <p>Each post is marked with additional properties when served: - <code>is_cold_start: true</code> - Identifies it as a cold start post - <code>is_real_mastodon_post: false</code> - Indicates it's not from a real Mastodon instance - <code>is_synthetic: true</code> - Marks it as synthetic content</p>"},{"location":"cold_start_strategy/#tracking-user-engagement","title":"Tracking User Engagement","text":"<p>Corgi tracks user interactions with cold start posts to: - Measure which content types engage new users - Help develop personalized recommendations as users begin to interact - Analyze the effectiveness of different cold start content categories</p> <p>This data helps continuously improve the cold start experience for future users.</p>"},{"location":"cold_start_strategy/#unauthenticated-support","title":"Unauthenticated Support","text":"<p>The Cold Start Strategy ensures that even unauthenticated users always receive content in their timeline:</p> <ul> <li>When <code>/api/v1/timelines/home</code> is accessed without authentication, the system serves cold start content</li> <li>This feature ensures timelines are never blank, even for anonymous sessions</li> <li>The system logs these anonymous sessions with a special flag: <code>anonymous=true</code></li> <li>Unlike authenticated users, anonymous users always receive the default content selection rather than personalized recommendations</li> </ul> <p>This behavior can be controlled with the following configuration option:</p> <pre><code>ALLOW_COLD_START_FOR_ANONYMOUS=true\n</code></pre> <p>Setting this to <code>false</code> will revert to the standard behavior of returning an empty timeline for unauthenticated requests.</p>"},{"location":"cold_start_strategy/#transitioning-away-from-cold-start","title":"Transitioning Away from Cold Start","text":"<p>As users begin to follow accounts and interact with content, their timeline naturally transitions from cold start content to: 1. Posts from accounts they follow 2. Personalized recommendations based on their interactions</p> <p>This creates a smooth onboarding experience that guides users from their first interaction to a fully personalized timeline.</p> <pre><code>graph LR\n    subgraph \"User Journey Timeline\"\n        A[New User] --&gt; B[Cold Start Content]\n        B --&gt; C[First Follows]\n        C --&gt; D[Regular Content + Cold Start Mix]\n        D --&gt; E[Personalized Timeline]\n    end\n\n    subgraph \"Content Sources\"\n        CS[Cold Start Posts] --&gt; B\n        CS -.-&gt; D\n        F[Followed Accounts] --&gt; D\n        F --&gt; E\n        R[Personalized Recommendations] -.-&gt; D\n        R --&gt; E\n    end\n\n    style B fill:#FFB300,stroke:#FF8F00,color:#000000,font-weight:bold\n    style D fill:#FFB300,stroke:#FF8F00,color:#000000,font-weight:bold\n    style CS fill:#FFB300,stroke:#FF8F00,color:#000000,font-weight:bold\n    style R fill:#FFB300,stroke:#FF8F00,color:#000000,font-weight:bold</code></pre>"},{"location":"concepts/","title":"How Corgi Works","text":"<p>Corgi provides personalized recommendations for Mastodon users while respecting privacy preferences. This page explains how the core components work together.</p>"},{"location":"concepts/#architecture-overview","title":"Architecture Overview","text":"<p>Corgi consists of several interconnected components that work together to provide a seamless recommendation experience:</p> <pre><code>graph TD\n    A[Mastodon Client] --&gt;|API Requests| B[Proxy Middleware]\n    B --&gt;|User Interactions| C[Interaction Tracker]\n    C --&gt;|Interaction Data| D[Recommendation Engine]\n    D --&gt;|Ranked Posts| E[Timeline Blender]\n    B --&gt;|Mastodon Requests| F[Mastodon Instance]\n    F --&gt;|Timeline Data| E\n    E --&gt;|Enhanced Timeline| B\n    G[Privacy Manager] &lt;--&gt;|Settings| B\n    G &lt;--&gt;|Controls| C\n    G &lt;--&gt;|Filters| D\n    style B fill:#FFB300,stroke:#FF8F00,color:#000\n    style D fill:#FFD54F,stroke:#FFB300,color:#000\n    style G fill:#1A237E,stroke:#0D47A1,color:#FFF</code></pre>"},{"location":"concepts/#key-components","title":"Key Components","text":"<ol> <li>Proxy Middleware - Intercepts Mastodon API requests and forwards them to your instance</li> <li>Interaction Tracker - Records favorites, boosts, and other engagement signals</li> <li>Recommendation Engine - Analyzes interactions to determine post relevance</li> <li>Timeline Blender - Integrates recommended posts into standard Mastodon timelines</li> <li>Privacy Manager - Enforces user-defined privacy settings across the system</li> </ol>"},{"location":"concepts/#proxy-architecture","title":"Proxy Architecture","text":"<p>The proxy is Corgi's most powerful feature. It allows any Mastodon client to benefit from personalized recommendations without modification.</p>"},{"location":"concepts/#transparent-middleware","title":"Transparent Middleware","text":"<p>When a client makes a request to its Mastodon server, the request passes through Corgi's proxy:</p> <ol> <li>Client sends request to Corgi (e.g., <code>GET /api/v1/timelines/home</code>)</li> <li>Corgi identifies the user's Mastodon instance</li> <li>Corgi forwards the request to that instance, including authentication</li> <li>Mastodon instance returns the original response</li> <li>For timeline endpoints only, Corgi enhances the response with recommendations</li> <li>Enhanced response is returned to the client</li> </ol>      Infrastructure Note    <p>The proxy architecture means users need to trust their Corgi instance, since all API traffic (including authentication) passes through it. We recommend setting up your own instance for maximum privacy and security.</p>"},{"location":"concepts/#instance-resolution","title":"Instance Resolution","text":"<p>Corgi determines which Mastodon instance to forward requests to in this order:</p> <ol> <li><code>X-Mastodon-Instance</code> header in the request</li> <li><code>instance</code> query parameter </li> <li>Database lookup based on the user's OAuth token</li> <li>Default instance from configuration</li> </ol>"},{"location":"concepts/#pseudonymous-identity","title":"Pseudonymous Identity","text":"<p>Corgi uses pseudonymous identifiers to track user preferences while respecting privacy:</p>"},{"location":"concepts/#user-aliasing","title":"User Aliasing","text":"<p>Corgi generates a user alias by: 1. Taking the user's ID or OAuth token 2. Applying a SHA-256 hash with a site-specific salt 3. Storing all preference data against this pseudonymous ID</p> <pre><code>def generate_user_alias(user_id):\n    # Hash the user ID with a site-specific salt\n    hash_input = f\"{user_id}{SITE_SALT}\"\n    return hashlib.sha256(hash_input.encode()).hexdigest()\n</code></pre> <p>This means: - Even if data is exposed, it cannot be traced back to specific users - The same user gets the same alias on each visit - Different Corgi instances generate different aliases for the same user</p>"},{"location":"concepts/#recommendation-algorithm","title":"Recommendation Algorithm","text":"<p>Corgi's recommendation engine analyzes user interactions to rank content:</p>"},{"location":"concepts/#ranking-factors","title":"Ranking Factors","text":"<p>Each post receives a score based on three key factors:</p> <ol> <li>Author Preference (40%) - How much the user interacts with posts from this author</li> <li>Content Engagement (30%) - Overall popularity metrics (favorites, boosts, replies)</li> <li>Recency (30%) - How recently the post was created, with exponential decay</li> </ol>"},{"location":"concepts/#score-calculation","title":"Score Calculation","text":"<pre><code>def calculate_ranking_score(post, user_interactions):\n    author_score = get_author_preference_score(user_interactions, post['author_id'])\n    engagement_score = get_content_engagement_score(post)\n    recency_score = get_recency_score(post)\n\n    weights = ALGORITHM_CONFIG['weights']\n    overall_score = (\n        weights['author_preference'] * author_score +\n        weights['content_engagement'] * engagement_score +\n        weights['recency'] * recency_score\n    )\n\n    # Determine the primary reason for recommendation\n    reason = \"Recommended for you\"\n    max_factor = max(\n        (author_score * weights['author_preference'], \"From an author you might like\"),\n        (engagement_score * weights['content_engagement'], \"Popular with other users\"),\n        (recency_score * weights['recency'], \"Recently posted\")\n    )\n\n    _, reason = max_factor\n\n    return overall_score, reason\n</code></pre>"},{"location":"concepts/#transparent-reasoning","title":"Transparent Reasoning","text":"<p>Each recommended post includes a human-readable explanation for why it's being shown:</p> <ul> <li>\"From an author you might like\"</li> <li>\"Popular with other users\" </li> <li>\"Recently posted\"</li> </ul> <p>This helps users understand and refine their recommendations.</p>"},{"location":"concepts/#timeline-blending","title":"Timeline Blending","text":"<p>When enhancing a home timeline, Corgi blends recommendations with the original timeline:</p>"},{"location":"concepts/#blending-process","title":"Blending Process\ud83d\udca1 Blend Ratio","text":"<ol> <li>Retrieve the user's standard home timeline from their Mastodon instance</li> <li>Fetch personalized recommendations from the recommendation engine</li> <li>Distribute recommendations throughout the timeline based on the blend ratio</li> <li>Add metadata to recommended posts (<code>is_recommendation: true</code>)</li> <li>Return the enhanced timeline to the client</li> </ol> <p>The default blending ratio is 30% recommendations to 70% standard timeline posts. This ratio can be configured by the user or administrator to control how many recommendations appear.</p>"},{"location":"concepts/#privacy-levels","title":"Privacy Levels","text":"<p>Corgi gives users control over how much data is collected through three privacy levels:</p> Level Description Data Collection Personalization <code>full</code> Complete personalization Stores all interactions with pseudonymous ID Full personalized recommendations <code>limited</code> Basic personalization Stores only aggregated statistics, no individual interactions Limited personalization using aggregated preferences <code>none</code> No tracking No data collection No personalization (standard timeline only) <p>Users can change their privacy level at any time through the API or client settings.</p>      Privacy by Default    <p>New users start with the <code>limited</code> privacy level unless they explicitly opt in to full data collection.</p>"},{"location":"concepts/#portable-identity","title":"Portable Identity","text":"<p>One of Corgi's key benefits is portability across Mastodon instances:</p>"},{"location":"concepts/#cross-instance-continuity","title":"Cross-Instance Continuity","text":"<p>Since Corgi operates as a separate service:</p> <ol> <li>Your recommendation profile stays with you even if you change Mastodon instances</li> <li>Your interactions across multiple instances contribute to the same preference profile</li> <li>Recommendations can incorporate content from the broader Fediverse, not just your home instance</li> </ol> <p>This creates a consistent, personalized experience regardless of which Mastodon server you call home.</p>"},{"location":"concepts/#next-steps","title":"Next Steps","text":"<ul> <li>Privacy Design - Detailed explanation of privacy protections</li> <li>Proxy Architecture - In-depth guide to the proxy middleware</li> <li>Recommendation Engine - Technical details of the ranking algorithm</li> </ul>"},{"location":"demo/","title":"Live Demo","text":"<p>Experience Corgi in action with our interactive live demo. No setup required\u2014just click and explore!</p> Corgi Recommendation Demo Refresh Timeline Reset Demo DemoUser @demo_user@mastodon.social Timeline Recommendations API Calls Enhanced Timeline Live Demo Login to view timeline Personalized Recommendations Live Demo Login to view recommendations Recent API Calls Live Demo No API calls logged yet \ud83d\udd0e How this demo works <p>This interactive demo uses pre-loaded content to simulate a Corgi instance. When you login as the demo user:</p> <ol> <li>We retrieve a simulated home timeline with blended recommendations</li> <li>We fetch personalized recommendations based on the demo user's interaction history</li> <li>All API calls are logged so you can see how Corgi's API works</li> </ol> <p>You can interact with posts by clicking the favorite or reblog buttons to see how that affects recommendations over time.</p>"},{"location":"demo/#behind-the-scenes","title":"Behind the Scenes","text":"<p>This demo showcases how Corgi seamlessly blends recommendations into a Mastodon timeline. In a real-world integration:</p> <ol> <li>A Mastodon client connects to Corgi's proxy API instead of directly to a Mastodon instance</li> <li>Corgi forwards timeline requests to the appropriate Mastodon instance</li> <li>Corgi analyzes the response and injects personalized recommendations</li> <li>The enhanced timeline is returned to the client in Mastodon-compatible format</li> </ol> <p>The recommendations evolve based on your interactions - favorites, boosts, explicit feedback, and more.</p>"},{"location":"demo/#try-it-with-your-own-data","title":"Try it with your own data","text":"<p>Ready to see Corgi work with your actual Mastodon account? Check out our Quickstart Guide to set up your own instance in just a few minutes!</p>"},{"location":"deployment/","title":"Deployment Guide","text":"<p>This guide explains how to deploy Corgi Recommender Service in various environments.</p>"},{"location":"deployment/#local-deployment","title":"Local Deployment","text":""},{"location":"deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ (3.10+ recommended)</li> <li>SQLite database</li> <li>OpenSSL (optional, for HTTPS)</li> </ul>"},{"location":"deployment/#steps","title":"Steps","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/yourusername/corgi-recommender-service.git\ncd corgi-recommender-service\n</code></pre></p> </li> <li> <p>Create a virtual environment (optional but recommended):    <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Start the service:    <pre><code>./scripts/start_corgi.sh\n</code></pre></p> </li> </ol> <p>The service will be available at <code>https://localhost:5004</code> by default.</p>"},{"location":"deployment/#docker-deployment","title":"Docker Deployment","text":""},{"location":"deployment/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Docker Engine 20.10+</li> <li>Docker Compose (optional)</li> </ul>"},{"location":"deployment/#using-docker-directly","title":"Using Docker Directly","text":"<ol> <li> <p>Build the Docker image:    <pre><code>docker build -t corgi-recommender-service .\n</code></pre></p> </li> <li> <p>Run the container:    <pre><code>docker run -d \\\n  --name corgi-server \\\n  -p 5004:5004 \\\n  -e PORT=5004 \\\n  -e HOST=0.0.0.0 \\\n  --restart unless-stopped \\\n  corgi-recommender-service\n</code></pre></p> </li> </ol>"},{"location":"deployment/#using-our-docker-script","title":"Using Our Docker Script","text":"<p>We provide a convenient script for Docker deployment:</p> <pre><code>./scripts/docker_start_corgi.sh --port 5004\n</code></pre> <p>This script handles: - Checking if Docker is installed and running - Building the image if needed - Running the container with proper configuration - Handling existing containers</p>"},{"location":"deployment/#using-docker-compose","title":"Using Docker Compose","text":"<ol> <li> <p>Create a <code>docker-compose.yml</code> file:    <pre><code>version: '3.8'\n\nservices:\n  corgi:\n    build: .\n    ports:\n      - \"5004:5004\"\n    environment:\n      - PORT=5004\n      - HOST=0.0.0.0\n    restart: unless-stopped\n    volumes:\n      - ./data:/app/data\n</code></pre></p> </li> <li> <p>Start the service:    <pre><code>docker-compose up -d\n</code></pre></p> </li> </ol>"},{"location":"deployment/#cloud-deployment","title":"Cloud Deployment","text":""},{"location":"deployment/#deploying-to-flyio","title":"Deploying to Fly.io","text":"<ol> <li> <p>Install the Fly CLI: https://fly.io/docs/hands-on/install-flyctl/</p> </li> <li> <p>Log in to Fly:    <pre><code>fly auth login\n</code></pre></p> </li> <li> <p>Create a new app:    <pre><code>fly launch\n</code></pre></p> </li> <li> <p>Deploy the app:    <pre><code>fly deploy\n</code></pre></p> </li> </ol>"},{"location":"deployment/#deploying-to-render","title":"Deploying to Render","text":"<ol> <li> <p>Fork this repository to your GitHub account.</p> </li> <li> <p>Create a new Web Service on Render.com:</p> </li> <li>Connect your GitHub repository</li> <li>Set build command: <code>pip install -r requirements.txt</code></li> <li> <p>Set start command: <code>python special_proxy_fixed.py --port 10000 --host 0.0.0.0 --no-https</code></p> </li> <li> <p>Add environment variables as needed.</p> </li> </ol>"},{"location":"deployment/#production-considerations","title":"Production Considerations","text":""},{"location":"deployment/#https-configuration","title":"HTTPS Configuration","text":"<p>For production environments, you should use proper SSL certificates:</p> <ol> <li> <p>Obtain certificates from a trusted CA (e.g., Let's Encrypt)</p> </li> <li> <p>Configure Corgi to use them:    <pre><code>./scripts/start_corgi.sh --cert /path/to/cert.pem --key /path/to/key.pem\n</code></pre></p> </li> </ol>"},{"location":"deployment/#reverse-proxy-configuration","title":"Reverse Proxy Configuration","text":"<p>For production deployments, we recommend using a reverse proxy:</p>"},{"location":"deployment/#nginx-example","title":"Nginx Example","text":"<pre><code>server {\n    listen 443 ssl;\n    server_name your-domain.com;\n\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n\n    location / {\n        proxy_pass https://localhost:5004;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"deployment/#monitoring","title":"Monitoring","text":"<p>For production deployments, consider setting up monitoring:</p> <ol> <li>Set up Prometheus and Grafana for metrics collection</li> <li>Configure log aggregation with tools like ELK Stack</li> <li>Set up uptime monitoring with services like Uptime Robot</li> </ol>"},{"location":"deployment/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>HOST</code> Host to bind to <code>0.0.0.0</code> <code>PORT</code> Port to listen on <code>5004</code> <code>DEBUG</code> Enable debug mode <code>False</code> <code>USE_HTTPS</code> Use HTTPS <code>True</code> <code>SSL_CERT_PATH</code> Path to SSL certificate <code>certs/cert.pem</code> <code>SSL_KEY_PATH</code> Path to SSL key <code>certs/key.pem</code> <code>DB_FILE</code> Path to SQLite database <code>corgi_demo.db</code>"},{"location":"deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/#common-deployment-issues","title":"Common Deployment Issues","text":"<ol> <li>Port conflicts: If the port is already in use, try:</li> <li>Using a different port with <code>--port</code></li> <li>Stopping the existing process with <code>./scripts/stop_corgi.sh</code></li> <li> <p>Checking for running processes with <code>lsof -i :5004</code></p> </li> <li> <p>Certificate issues: If HTTPS isn't working, check:</p> </li> <li>Certificate and key paths</li> <li>File permissions</li> <li> <p>Certificate validity</p> </li> <li> <p>Database errors: If you see SQLite errors:</p> </li> <li>Ensure the database file exists</li> <li>Check file permissions</li> <li>Run setup scripts if needed</li> </ol>"},{"location":"elk_integration/","title":"Elk Integration Guide","text":"<p>This guide explains how to integrate Corgi's recommendation engine with the Elk Mastodon client.</p>"},{"location":"elk_integration/#overview","title":"Overview","text":"<p>Elk is a Mastodon web client built with Vue.js/Nuxt.js. Corgi can enhance Elk by:</p> <ol> <li>Acting as a transparent proxy between Elk and any Mastodon instance</li> <li>Injecting personalized recommendations into the timeline</li> <li>Enhancing post display with additional information</li> <li>Providing a better \"cold start\" experience for new users</li> </ol>"},{"location":"elk_integration/#setup-options","title":"Setup Options","text":"<p>You have multiple options for integrating Corgi with Elk, from simplest to most customized:</p>"},{"location":"elk_integration/#option-1-point-elk-to-corgis-api","title":"Option 1: Point Elk to Corgi's API","text":"<p>The simplest approach is to configure Elk to use Corgi's API endpoint instead of connecting directly to a Mastodon instance:</p> <ol> <li> <p>Start Corgi:    <pre><code>cd /path/to/corgi-recommender-service\n./scripts/start_corgi.sh\n</code></pre></p> </li> <li> <p>In Elk, set the server to <code>localhost:5004</code> (without <code>https://</code> prefix)</p> </li> <li> <p>Sign in with your Mastodon account credentials</p> </li> </ol> <p>Corgi will proxy all requests to your Mastodon instance while adding recommendations.</p>"},{"location":"elk_integration/#option-2-use-our-automated-script","title":"Option 2: Use Our Automated Script","text":"<p>We provide a convenience script that starts both Corgi and Elk configured to work together:</p> <pre><code>cd /path/to/corgi-recommender-service\n./scripts/start_elk_with_corgi.sh --with-corgi --elk-path /path/to/elk\n</code></pre> <p>This script: 1. Starts Corgi if not already running 2. Configures Elk environment variables to use Corgi 3. Launches the Elk development server</p>"},{"location":"elk_integration/#option-3-browser-injection-for-ui-enhancements","title":"Option 3: Browser Injection for UI Enhancements","text":"<p>To enhance the UI without modifying Elk's code:</p> <ol> <li>Start Elk with Corgi backend (using Option 1 or 2)</li> <li>Open the browser console in developer tools</li> <li>Paste the script from <code>/integrations/browser_injection/simple_elk_integration.js</code></li> </ol> <p>This will add: - Recommendation badges on recommended posts - Clickable profile pictures and usernames - Enhanced visual styling for recommendations</p> <p>See Browser Injection README for more details.</p>"},{"location":"elk_integration/#option-4-full-component-integration","title":"Option 4: Full Component Integration","text":"<p>For permanent integration, you can add our custom Vue components to your Elk codebase:</p> <ol> <li>Copy the components from <code>/integrations/elk/components/</code> to your Elk project</li> <li>Import and register them in your Elk application</li> <li>Modify StatusCard.vue to use these components</li> </ol> <p>This provides the most seamless integration but requires code changes to Elk.</p>"},{"location":"elk_integration/#configuration-options","title":"Configuration Options","text":"<p>When integrating with Elk, you can customize Corgi's behavior:</p>"},{"location":"elk_integration/#environment-variables-for-elk","title":"Environment Variables for Elk","text":"<p>These environment variables control how Elk connects to Corgi:</p> <ul> <li><code>NUXT_PUBLIC_DEFAULT_SERVER=\"localhost:5004\"</code> - Sets Corgi as the default server</li> <li><code>NUXT_PUBLIC_DISABLE_SERVER_SIDE_AUTH=true</code> - Disables server-side authentication</li> <li><code>NUXT_PUBLIC_PREFER_WSS=false</code> - Disables WebSocket secure connection preference</li> </ul>"},{"location":"elk_integration/#corgi-configuration-for-elk","title":"Corgi Configuration for Elk","text":"<p>These options affect how Corgi handles Elk requests:</p> <ul> <li><code>--port 5004</code> - The port Corgi listens on</li> <li><code>--no-https</code> - Disable HTTPS (for development)</li> <li><code>--host localhost</code> - Host to bind to</li> </ul>"},{"location":"elk_integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"elk_integration/#common-issues","title":"Common Issues","text":"<ol> <li>Certificate Warnings: By default, Corgi uses self-signed certificates. You can:</li> <li>Accept the risk in your browser</li> <li>Use <code>--no-https</code> for development</li> <li> <p>Configure Corgi with proper certificates</p> </li> <li> <p>Authentication Failures: If Elk can't authenticate, check:</p> </li> <li>The Corgi logs for token-related errors</li> <li>That you're using the correct server URL format </li> <li> <p>That you have <code>NUXT_PUBLIC_DISABLE_SERVER_SIDE_AUTH=true</code> set</p> </li> <li> <p>UI Enhancement Issues: If recommendation badges or profile links don't appear:</p> </li> <li>Check browser console for errors</li> <li>Verify that Corgi is adding <code>is_recommendation</code> flags to posts</li> <li>Make sure <code>account.url</code> is being included in post data</li> </ol>"},{"location":"elk_integration/#diagnosing-problems","title":"Diagnosing Problems","text":"<p>Use these commands to check the integration:</p> <pre><code># Check if Corgi is running\ncurl -k https://localhost:5004/api/v1/proxy/status\n\n# Check a timeline response (with your token)\ncurl -k -H \"Authorization: Bearer YOUR_TOKEN\" https://localhost:5004/api/v1/timelines/home | jq\n</code></pre>"},{"location":"elk_integration/#advanced-custom-elk-builds","title":"Advanced: Custom Elk Builds","text":"<p>If you're maintaining your own fork of Elk with Corgi integration:</p> <ol> <li> <p>Add types in <code>/types/mastodon.d.ts</code>:    <pre><code>// Extend the Status interface with our custom properties\ndeclare module 'masto' {\n  namespace mastodon {\n    namespace v1 {\n      interface Status {\n        is_recommendation?: boolean\n        recommendation_reason?: string\n      }\n    }\n  }\n}\n</code></pre></p> </li> <li> <p>Add UI components for recommendations:</p> </li> <li><code>RecommendationBadge.vue</code> for displaying recommendation status</li> <li> <p><code>StatusAccountHeader.vue</code> for enhanced profile displays</p> </li> <li> <p>Update the locale files to include recommendation text:    <pre><code>\"status\": {\n  \"recommended\": \"Recommended for you\"\n}\n</code></pre></p> </li> </ol>"},{"location":"elk_integration/#resources","title":"Resources","text":"<ul> <li>Elk Documentation</li> <li>Corgi Proxy Documentation</li> <li>Mastodon API Documentation</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-corgi","title":"What is Corgi?","text":"<p>Corgi is a privacy-aware recommendation engine for the Fediverse. It works as a middleware layer between any Mastodon client and server, enhancing timelines with personalized recommendations while respecting user privacy.</p>"},{"location":"faq/#why-is-it-called-corgi","title":"Why is it called \"Corgi\"?","text":"<p>The name reflects our philosophy: Connected Recommendations for the Global Internet. Plus, like the dog breed, our service has a small footprint but big impact\u2014portable recommendations that follow you anywhere in the Fediverse.</p>"},{"location":"faq/#does-corgi-work-with-all-mastodon-clients","title":"Does Corgi work with all Mastodon clients?","text":"<p>Yes! Corgi works with any Mastodon client that allows changing the API base URL. This includes popular clients like Elk, Ivory, Ice Cubes, and many others.</p>"},{"location":"faq/#is-corgi-open-source","title":"Is Corgi open source?","text":"<p>Yes, Corgi is fully open source and available on GitHub. We welcome contributions from the community.</p>"},{"location":"faq/#technical-questions","title":"Technical Questions","text":""},{"location":"faq/#how-does-corgi-work","title":"How does Corgi work?","text":"<p>Corgi operates as a transparent proxy between your Mastodon client and server:</p> <ol> <li>You configure your client to connect to Corgi instead of directly to your Mastodon instance</li> <li>Corgi forwards your requests to your Mastodon instance</li> <li>For timeline requests, Corgi enhances the response with personalized recommendations</li> <li>All other requests (posting, notifications, etc.) pass through unchanged</li> </ol>"},{"location":"faq/#how-does-corgi-know-what-content-to-recommend","title":"How does Corgi know what content to recommend?","text":"<p>Corgi builds a preference profile based on your interactions:</p> <ul> <li>Posts you favorite or bookmark indicate content you like</li> <li>Authors whose content you regularly engage with are weighted more heavily</li> <li>Content engagement metrics from the wider community are also considered</li> <li>Post recency ensures freshness</li> </ul> <p>Corgi combines these factors to deliver personalized recommendations.</p>"},{"location":"faq/#do-i-need-to-create-a-separate-account-for-corgi","title":"Do I need to create a separate account for Corgi?","text":"<p>No, Corgi works with your existing Mastodon account. You simply point your Mastodon client to Corgi's API URL and use your normal Mastodon authentication.</p>"},{"location":"faq/#how-does-instance-resolution-work","title":"How does instance resolution work?","text":"<p>Corgi determines which Mastodon instance to forward requests to using this sequence:</p> <ol> <li><code>X-Mastodon-Instance</code> header (if provided by the client)</li> <li><code>instance</code> query parameter (if included in the request)</li> <li>Database lookup based on your OAuth token (if you've linked your account)</li> <li>Default instance from configuration</li> </ol> <p>For best results, you should link your Mastodon account using the account linking API.</p>"},{"location":"faq/#can-i-use-corgi-with-multiple-mastodon-accounts","title":"Can I use Corgi with multiple Mastodon accounts?","text":"<p>Yes! Corgi supports multiple linked accounts. Each account will have its own separate preference profile and recommendations.</p>"},{"location":"faq/#privacy-questions","title":"Privacy Questions","text":""},{"location":"faq/#what-data-does-corgi-collect","title":"What data does Corgi collect?","text":"<p>Corgi offers three privacy levels:</p> <ul> <li>Full: Stores interaction data (favorites, boosts, etc.) with pseudonymized IDs</li> <li>Limited (default): Stores only aggregated statistics, not individual interactions</li> <li>None: Minimal data collection with no personalization</li> </ul> <p>You can change your privacy level at any time.</p>"},{"location":"faq/#how-is-my-identity-protected","title":"How is my identity protected?","text":"<p>User IDs are pseudonymized using a SHA-256 hash with a salt before being stored. This means:</p> <ul> <li>Your real identity is never stored directly</li> <li>Different Corgi instances generate different pseudonyms for the same user</li> <li>The pseudonym can't be reversed to reveal your identity</li> </ul>"},{"location":"faq/#does-corgi-see-my-authentication-tokens","title":"Does Corgi see my authentication tokens?","text":"<p>Yes, since Corgi acts as a proxy, it does see your authentication tokens to forward them to your Mastodon instance. However:</p> <ul> <li>Tokens are never logged</li> <li>Tokens are only stored if you explicitly link your account</li> <li>If stored, tokens are encrypted at rest</li> </ul> <p>For maximum security, you can self-host your own Corgi instance.</p>"},{"location":"faq/#can-other-users-see-my-recommendations","title":"Can other users see my recommendations?","text":"<p>No. Your recommendations are completely private and only visible to you.</p>"},{"location":"faq/#can-i-delete-my-data","title":"Can I delete my data?","text":"<p>Yes, you can delete all your data at any time using the Privacy API:</p> <pre><code>curl -X DELETE \"https://api.corgi-recs.io/api/v1/privacy/data?user_id=your_user_id&amp;confirm=true\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n</code></pre>"},{"location":"faq/#integration-questions","title":"Integration Questions","text":""},{"location":"faq/#how-do-i-integrate-corgi-with-my-mastodon-client","title":"How do I integrate Corgi with my Mastodon client?","text":"<p>For most clients, you simply change the API base URL in the settings:</p> <ol> <li>Find the server/API URL setting in your client</li> <li>Change it from your Mastodon instance (e.g., <code>https://mastodon.social</code>) to Corgi's URL (e.g., <code>https://api.corgi-recs.io</code>)</li> <li>Keep your existing Mastodon access token</li> </ol> <p>Check our Examples section for client-specific guides.</p>"},{"location":"faq/#can-i-integrate-corgi-directly-into-my-application","title":"Can I integrate Corgi directly into my application?","text":"<p>Yes! Besides the proxy approach, you can use Corgi's direct API endpoints:</p> <ul> <li>For recommendations: <code>/api/v1/recommendations</code></li> <li>For logging interactions: <code>/api/v1/interactions</code></li> </ul> <p>See the API Reference for detailed documentation.</p>"},{"location":"faq/#how-can-i-tell-which-posts-are-recommendations","title":"How can I tell which posts are recommendations?","text":"<p>Recommended posts include these additional fields:</p> <pre><code>{\n  \"is_recommendation\": true,\n  \"recommendation_reason\": \"From an author you might like\",\n  \"ranking_score\": 0.87\n}\n</code></pre> <p>You can use these fields to display recommendation badges or other UI elements.</p>"},{"location":"faq/#whats-the-difference-between-the-proxy-and-direct-api-integration","title":"What's the difference between the proxy and direct API integration?","text":"<ul> <li>Proxy Integration: Works with any Mastodon client without code changes</li> <li>Direct API Integration: Requires custom development but provides more control</li> </ul> <p>The proxy is ideal for existing clients, while the direct API is better for custom applications.</p>"},{"location":"faq/#self-hosting-questions","title":"Self-Hosting Questions","text":""},{"location":"faq/#can-i-self-host-corgi","title":"Can I self-host Corgi?","text":"<p>Yes! Corgi is designed to be easily self-hosted. You'll need:</p> <ul> <li>A server with Docker support</li> <li>PostgreSQL database</li> <li>Internet connectivity</li> </ul> <p>See our Self-hosting Guide for detailed instructions.</p>"},{"location":"faq/#how-much-server-resources-does-corgi-need","title":"How much server resources does Corgi need?","text":"<p>Corgi is fairly lightweight:</p> <ul> <li>For personal use: A small VPS with 1 CPU and 1GB RAM is sufficient</li> <li>For small communities: 2 CPUs and 2GB RAM recommended</li> <li>For larger deployments: Scale as needed, with particular attention to database performance</li> </ul>"},{"location":"faq/#can-i-contribute-to-corgis-development","title":"Can I contribute to Corgi's development?","text":"<p>Absolutely! We welcome contributions:</p> <ul> <li>Code contributions via pull requests</li> <li>Bug reports and feature requests via issues</li> <li>Documentation improvements</li> <li>Translations</li> </ul> <p>Visit our GitHub repository to get started.</p>"},{"location":"faq/#performance-questions","title":"Performance Questions","text":""},{"location":"faq/#will-corgi-slow-down-my-mastodon-experience","title":"Will Corgi slow down my Mastodon experience?","text":"<p>Corgi adds a small amount of latency (typically 50-200ms) as requests pass through the proxy. For most users, this is barely noticeable. Timeline enhancements are done asynchronously to minimize delay.</p>"},{"location":"faq/#how-does-corgi-handle-rate-limits","title":"How does Corgi handle rate limits?","text":"<p>Corgi respects Mastodon's rate limits and will forward any rate-limiting headers from your instance. If you're using Corgi with multiple clients, be aware that all requests count against your instance's rate limits.</p>"},{"location":"faq/#what-happens-if-corgi-goes-down","title":"What happens if Corgi goes down?","text":"<p>If Corgi becomes unavailable, you can simply reconfigure your client to connect directly to your Mastodon instance again. No data will be lost, and you can reconnect to Corgi when it's available again.</p>      Have a question not answered here?    <p>You can reach us through GitHub issues or email us at support@corgi-recs.io</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you set up and run the Corgi Recommender Service locally for development or testing.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have the following installed:</p> <ul> <li>Python 3.9+</li> <li>PostgreSQL 13+</li> <li><code>pip</code> (Python package manager)</li> <li>Git (for cloning the repository)</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/yourusername/corgi-recommender-service.git\ncd corgi-recommender-service\n</code></pre> <ol> <li>Create a virtual environment (optional but recommended):</li> </ol> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>The service uses environment variables for configuration. Create a <code>.env</code> file in the project root or set these variables in your environment:</p> <pre><code># Database configuration\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\nPOSTGRES_DB=corgi_recommender\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=yourpassword\n\n# Service configuration\nDEBUG=True\nHOST=0.0.0.0\nPORT=5001\nUSER_HASH_SALT=yourrandomsalt  # Important for privacy protection\n</code></pre>"},{"location":"getting-started/#database-setup","title":"Database Setup","text":"<ol> <li>Create the PostgreSQL database:</li> </ol> <pre><code>createdb corgi_recommender\n</code></pre> <ol> <li>Run the setup script to create the database schema:</li> </ol> <pre><code>./setup_db.sh\n</code></pre> <p>Alternatively, you can run:</p> <pre><code>python -c \"from db.connection import init_db; init_db()\"\n</code></pre>"},{"location":"getting-started/#running-the-service","title":"Running the Service","text":"<ol> <li>Start the service:</li> </ol> <pre><code>python -m flask --app app run --host=0.0.0.0 --port=5001\n</code></pre> <p>Or use the convenience script:</p> <pre><code>./start.sh\n</code></pre> <ol> <li>Verify the service is running by accessing the health endpoint:</li> </ol> <pre><code>curl http://localhost:5001/api/v1/health\n</code></pre> <p>You should see a JSON response with status information.</p>"},{"location":"getting-started/#running-the-validator","title":"Running the Validator","text":"<p>The service includes a validation tool to verify functionality:</p> <pre><code>python corgi_validator.py --verbose\n</code></pre> <p>This will: - Create synthetic users and posts - Simulate interactions - Test recommendation generation - Verify privacy controls - Generate a validation report</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Once you have the service running, you can:</p> <ol> <li>Explore the API endpoints</li> <li>Review the architecture documentation</li> <li>Integrate with your client application</li> </ol>"},{"location":"pitch/","title":"Corgi Pitch","text":""},{"location":"proxy/","title":"Proxy Middleware","text":"<p>The Corgi Recommender Service includes a powerful middleware proxy that enables seamless integration with existing Mastodon clients. This allows the recommendation service to enhance the user experience without requiring clients to implement custom API calls.</p>"},{"location":"proxy/#how-it-works","title":"How It Works","text":"<p>The proxy acts as a transparent intermediary between Mastodon clients and instances:</p> <ol> <li>Clients connect to the Corgi service instead of directly to a Mastodon instance</li> <li>The proxy forwards all requests to the appropriate Mastodon instance</li> <li>For specific endpoints (like the home timeline), the proxy enhances the response with personalized recommendations</li> <li>The client receives a response that appears to come directly from Mastodon, with added content</li> </ol> <pre><code>flowchart LR\n    subgraph Client [\"Mastodon Client (e.g., Elk)\"]\n        direction TB\n        A[API Requests] --&gt; B[Render Timeline]\n    end\n\n    subgraph Corgi [\"Corgi Proxy Service\"]\n        direction TB\n        C[Request Handler] --&gt; D[Authentication]\n        D --&gt; E[Instance Resolver]\n        E --&gt; F[Request Forwarder]\n        G[Response Handler] --&gt; H[Timeline Enhancer]\n        H --&gt; I[Recommendation Injector]\n    end\n\n    subgraph Instance [\"Mastodon Instance\"]\n        direction TB\n        J[API Endpoints] --&gt; K[Home Timeline]\n        J --&gt; L[Other Endpoints]\n    end\n\n    Client -- \"GET /api/v1/...\" --&gt; Corgi\n    F -- \"Forward Request\" --&gt; Instance\n    Instance -- \"Original Response\" --&gt; G\n    Corgi -- \"Enhanced Response\" --&gt; Client\n\n    style Corgi fill:#ffb300,stroke:#ff8f00,color:#000000,font-weight:bold\n    style Client fill:#e3f2fd,stroke:#0277bd,color:black\n    style Instance fill:#e8f5e9,stroke:#2e7d32,color:black</code></pre>"},{"location":"proxy/#configuration","title":"Configuration","text":""},{"location":"proxy/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>DEFAULT_MASTODON_INSTANCE</code> Fallback Mastodon instance URL https://mastodon.social <code>RECOMMENDATION_BLEND_RATIO</code> Ratio of recommendations to include (0.0-1.0) 0.3 <code>PROXY_TIMEOUT</code> Timeout for proxy requests in seconds 10 <code>FLASK_ENV</code> When set to \"development\", logs additional proxy info to stdout production"},{"location":"proxy/#user-identity-setup","title":"User Identity Setup","text":"<p>For the proxy to work correctly, users must be linked to their Mastodon accounts. This can be done using the included utility:</p> <pre><code># Link a user to a Mastodon instance\n./tools/link_user.py --user-id user123 --instance mastodon.social --token \"your_oauth_token\"\n\n# List all linked users\n./tools/link_user.py --list\n</code></pre>"},{"location":"proxy/#endpoints","title":"Endpoints","text":""},{"location":"proxy/#main-proxy-endpoint","title":"Main Proxy Endpoint","text":"<pre><code>/api/v1/&lt;path:path&gt;\n</code></pre> <p>This catch-all endpoint proxies any request to the corresponding Mastodon API endpoint.</p>"},{"location":"proxy/#debug-endpoints","title":"Debug Endpoints","text":"<pre><code>/api/v1/status\n</code></pre> <p>Returns the current status of the proxy service.</p> <pre><code>/api/v1/instance\n</code></pre> <p>Shows what instance would be detected for the current request and other debug information.</p>"},{"location":"proxy/#metrics-endpoint","title":"Metrics Endpoint","text":"<pre><code>/api/v1/proxy/metrics\n</code></pre> <p>Returns metrics about the proxy, including: - Total number of requests processed - Number of enriched timelines - Average response time - Number of failures - Recent errors</p> <p>To reset metrics, use: <pre><code>/api/v1/proxy/metrics?reset=true\n</code></pre></p>"},{"location":"proxy/#instance-resolution","title":"Instance Resolution","text":"<p>The proxy determines which Mastodon instance to forward requests to in the following order:</p> <ol> <li><code>X-Mastodon-Instance</code> header</li> <li><code>instance</code> query parameter</li> <li>Database lookup based on the OAuth token</li> <li>Default instance from configuration</li> </ol>"},{"location":"proxy/#timeline-blending","title":"Timeline Blending","text":"<p>When a request to <code>/api/v1/timelines/home</code> is received, the proxy:</p> <ol> <li>Authenticates the user</li> <li>Forwards the request to the Mastodon instance</li> <li>Retrieves personalized recommendations for the user</li> <li>Blends the recommendations into the timeline response</li> <li>Adds a <code>X-Corgi-Recommendations</code> header with information about injected recommendations</li> </ol> <p>Recommendations are distributed throughout the timeline based on the blend ratio setting.</p>"},{"location":"proxy/#privacy-considerations","title":"Privacy Considerations","text":"<p>The proxy respects user privacy settings and only injects recommendations for users who have consented to full data collection (privacy level \"full\").</p>"},{"location":"proxy/#client-configuration","title":"Client Configuration","text":"<p>To use the Corgi proxy with a Mastodon client:</p> <ol> <li>Configure the client to use the Corgi service URL instead of a Mastodon instance</li> <li>Link the user's Mastodon account using the link_user.py tool</li> <li>Ensure proper OAuth authentication is in place</li> </ol> <p>For Elk, simply point the API URL to your Corgi service instead of the user's Mastodon instance.</p>"},{"location":"proxy/#observability-and-diagnostics","title":"Observability and Diagnostics","text":""},{"location":"proxy/#logging","title":"Logging","text":"<p>The proxy logs detailed information about each request to: - <code>logs/proxy.log</code> (rotated when size exceeds 10 MB) - Console output when <code>FLASK_ENV=development</code></p> <p>Log entries include: - Request method, path, and target instance - Authentication status - Privacy mode - Response times for upstream requests - Status codes and errors - Enrichment status and recommendation counts</p>"},{"location":"proxy/#diagnostic-cli","title":"Diagnostic CLI","text":"<p>A command-line diagnostic tool is included to test and monitor the proxy:</p> <pre><code># Basic usage - ping home timeline\n./tools/proxy_diagnostics.py\n\n# Test with a specific user\n./tools/proxy_diagnostics.py --user-id user123\n\n# Test with authentication token\n./tools/proxy_diagnostics.py --token \"your_oauth_token\"\n\n# Test against a specific instance\n./tools/proxy_diagnostics.py --instance fosstodon.org\n\n# Test a different endpoint\n./tools/proxy_diagnostics.py --path statuses/123456\n\n# Show detailed headers and response\n./tools/proxy_diagnostics.py --show-headers --dump-response\n\n# Get JSON output for integration with other tools\n./tools/proxy_diagnostics.py --output json\n</code></pre> <p>The tool outputs information about: - Target instance used - Authentication status - Response time - Number of recommendations injected - Response headers (with --show-headers) - Full response data (with --dump-response)</p>"},{"location":"proxy/#testing-the-proxy","title":"Testing the Proxy","text":"<p>You can test the proxy using <code>curl</code>:</p> <pre><code># Test proxy status\ncurl -i http://localhost:5000/api/v1/proxy/status\n\n# Test instance detection\ncurl -i -H \"X-Mastodon-Instance: mastodon.social\" http://localhost:5000/api/v1/proxy/instance\n\n# Test timeline (will be anonymous without auth)\ncurl -i -H \"X-Mastodon-Instance: mastodon.social\" http://localhost:5000/api/v1/timelines/home\n\n# Test timeline with auth token\ncurl -i -H \"Authorization: Bearer YOUR_TOKEN\" -H \"X-Mastodon-Instance: mastodon.social\" http://localhost:5000/api/v1/timelines/home\n\n# Check proxy metrics\ncurl -i http://localhost:5000/api/v1/proxy/metrics\n</code></pre>"},{"location":"proxy/#security-notes","title":"Security Notes","text":"<ul> <li>The proxy forwards authentication tokens directly to the Mastodon instance</li> <li>User tokens should be stored securely in the database</li> <li>Consider implementing additional encryption for sensitive data</li> <li>Use HTTPS for production deployments</li> <li>Proxy logs are sanitized to avoid logging sensitive token data</li> </ul>"},{"location":"quickstart/","title":"Quickstart Guide","text":"<p>This guide will help you get started with Corgi in minutes, whether you want to use our hosted service or run your own instance.</p>"},{"location":"quickstart/#api-key-setup","title":"API Key Setup","text":"<p>To use Corgi, you'll need an API key for authentication.</p> \u2728 Get Your API Key <p>Visit dashboard.corgi-recs.io/signup to create an account and generate your API key.</p> <p>You'll receive a key in this format:</p> <pre><code>corgi_sk_3f17abd92ec68f1ce86543290a1dc2a2ff</code></pre> <p>Keep this key secure! It provides access to your recommendation data.</p>"},{"location":"quickstart/#quick-example-get-recommendations","title":"Quick Example: Get Recommendations","text":"<p>Here's a simple example of how to retrieve personalized recommendations using Corgi:</p> curlPython <pre><code>curl -X GET \"https://api.corgi-recs.io/api/v1/timelines/recommended?user_id=your_user_id\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\"\n</code></pre> <pre><code>import requests\n\napi_key = \"YOUR_API_KEY\"\nuser_id = \"your_user_id\"\n\nurl = f\"https://api.corgi-recs.io/api/v1/timelines/recommended?user_id={user_id}\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nrecommendations = response.json()\n\n# Print the recommendations\nfor post in recommendations:\n    print(f\"- {post['account']['display_name']}: {post['content'][:50]}...\")\n</code></pre>"},{"location":"quickstart/#example-response","title":"Example Response","text":"JSON Response <pre><code>{\n  \"timeline\": [\n    {\n      \"id\": \"109876543211234567\",\n      \"content\": \"<p>Just published a new blog post about sustainable tech!</p>\",\n      \"created_at\": \"2025-03-15T14:22:11.000Z\",\n      \"account\": {\n        \"id\": \"12345\",\n        \"username\": \"techblogger\",\n        \"display_name\": \"Tech Sustainability Blog\",\n        \"followers_count\": 1524,\n        \"following_count\": 342,\n        \"statuses_count\": 857\n      },\n      \"replies_count\": 12,\n      \"reblogs_count\": 28,\n      \"favourites_count\": 43,\n      \"is_recommendation\": true,\n      \"recommendation_reason\": \"From an author you might like\"\n    },\n    {\n      \"id\": \"109876987654321123\",\n      \"content\": \"<p>Check out our latest open source contribution to the Fediverse!</p>\",\n      \"created_at\": \"2025-03-15T13:45:22.000Z\",\n      \"account\": {\n        \"id\": \"67890\",\n        \"username\": \"fediversedev\",\n        \"display_name\": \"Fediverse Developers\",\n        \"followers_count\": 3201,\n        \"following_count\": 129,\n        \"statuses_count\": 1432\n      },\n      \"replies_count\": 7,\n      \"reblogs_count\": 41,\n      \"favourites_count\": 62,\n      \"is_recommendation\": true,\n      \"recommendation_reason\": \"Popular with other users\"\n    }\n  ]\n}</code></pre>"},{"location":"quickstart/#transparent-proxy-setup","title":"Transparent Proxy Setup","text":"<p>For the fullest Corgi experience, set up the transparent proxy to enhance any Mastodon client:</p>"},{"location":"quickstart/#1-connect-your-mastodon-account","title":"1. Connect Your Mastodon Account","text":"<p>Link your Mastodon account to Corgi:</p> <pre><code>curl -X POST \"https://api.corgi-recs.io/api/v1/accounts/link\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"user_id\": \"your_user_id\",\n    \"instance\": \"mastodon.social\",\n    \"access_token\": \"YOUR_MASTODON_ACCESS_TOKEN\"\n  }'\n</code></pre>"},{"location":"quickstart/#2-configure-your-mastodon-client","title":"2. Configure Your Mastodon Client","text":"<p>Update your client to use Corgi as a proxy:</p> Elk AppOther Clients <p>In Elk's settings page:</p> <ol> <li>Go to \"Advanced Settings\"</li> <li>Change \"API Base URL\" to: <code>https://api.corgi-recs.io</code></li> <li>Keep your existing Mastodon access token</li> </ol> <p>For other clients that allow custom API endpoints:</p> <ol> <li>Find the API or server settings</li> <li>Replace your instance URL with: <code>https://api.corgi-recs.io</code></li> <li>Keep your existing access token</li> </ol>      What happens behind the scenes    <p>When configured as a proxy, Corgi intercepts timeline requests, fetches the original timeline from your Mastodon instance, and then enhances it with personalized recommendations before sending it back to your client.</p> <p>All other API requests (posting, notifications, etc.) are passed through unchanged.</p>"},{"location":"quickstart/#logging-interactions-manually","title":"Logging Interactions Manually","text":"<p>If you're building a custom client or can't use the proxy, you can manually log interactions:</p> <pre><code>import requests\n\napi_key = \"YOUR_API_KEY\"\nuser_id = \"your_user_id\"\n\nurl = \"https://api.corgi-recs.io/api/v1/interactions\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\",\n    \"Content-Type\": \"application/json\"\n}\ndata = {\n    \"user_alias\": user_id,\n    \"post_id\": \"post_67890\",\n    \"action_type\": \"favorite\",\n    \"context\": {\n        \"source\": \"timeline_home\"\n    }\n}\n\nresponse = requests.post(url, json=data, headers=headers)\nprint(response.json())\n</code></pre>"},{"location":"quickstart/#self-hosting-corgi","title":"Self-hosting Corgi","text":"<p>Want to run your own Corgi instance? It's easy with Docker:</p> <pre><code># Clone the repository\ngit clone https://github.com/andrewnordstrom/corgi-recommender-service.git\ncd corgi-recommender-service\n\n# Start with Docker Compose\ndocker-compose up -d\n</code></pre> <p>For detailed self-hosting instructions, including database setup and configuration options, see our Self-hosting Guide.</p>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you have Corgi up and running, check out these resources:</p> <ul> <li>Core Concepts - Learn how Corgi works under the hood</li> <li>API Reference - Explore the full API</li> <li>Privacy Design - Understand how Corgi protects user data</li> <li>Integration Examples - See detailed client integration guides</li> </ul>"},{"location":"validator-guide/","title":"Validator Guide","text":"<p>The Corgi Recommender Service includes a built-in validation tool (<code>corgi_validator.py</code>) for testing the core functionality of the service. This guide explains how to use the validator and interpret its results.</p>"},{"location":"validator-guide/#purpose-of-the-validator","title":"Purpose of the Validator","text":"<p>The validator performs end-to-end testing of the service by:</p> <ol> <li>Creating synthetic users and posts</li> <li>Simulating user interactions with content</li> <li>Testing the recommendation generation</li> <li>Validating privacy controls and data handling</li> <li>Checking response formats and API adherence</li> </ol> <p>This helps ensure that all components of the service are working correctly before deployment or after making changes.</p>"},{"location":"validator-guide/#running-the-validator","title":"Running the Validator","text":""},{"location":"validator-guide/#basic-usage","title":"Basic Usage","text":"<p>To run the validator with default settings:</p> <pre><code>python corgi_validator.py\n</code></pre> <p>This will: - Create 5 synthetic users - Create 10 synthetic posts - Generate interactions between users and posts - Run all validation checks</p>"},{"location":"validator-guide/#options-and-flags","title":"Options and Flags","text":"<p>The validator supports several command-line arguments:</p> <pre><code>usage: corgi_validator.py [-h] [--api-base API_BASE] [--verbose] [--dry-run]\n                         [--skip-server-check] [--run-seed RUN_SEED]\n                         [--check-recs] [--check-feedback] [--check-privacy]\n                         [--check-blend] [--check-all] [--check-server]\n                         [--check-paths] [--output OUTPUT]\n</code></pre> <p>Common options include:</p> Option Description <code>--verbose</code> Enable detailed logging <code>--dry-run</code> Simulate validation without making real API calls <code>--check-recs</code> Only run recommendation validation <code>--check-privacy</code> Only run privacy settings validation <code>--check-all</code> Run all validation checks <code>--output FILE</code> Save validation report to a JSON file"},{"location":"validator-guide/#example-commands","title":"Example Commands","text":"<p>Test only the recommendation functionality:</p> <pre><code>python corgi_validator.py --check-recs --verbose\n</code></pre> <p>Run the validator against a custom API endpoint:</p> <pre><code>python corgi_validator.py --api-base=http://myserver:5001 --verbose\n</code></pre> <p>Generate a validation report:</p> <pre><code>python corgi_validator.py --check-all --output=validation_report.json\n</code></pre>"},{"location":"validator-guide/#understanding-validation-checks","title":"Understanding Validation Checks","text":"<p>The validator runs several core checks:</p>"},{"location":"validator-guide/#1-recommendations-check","title":"1. Recommendations Check","text":"<p>Verifies that the recommendation engine generates valid personalized content:</p> <ul> <li>Checks if recommendations are returned</li> <li>Validates recommendation format (correct fields, valid values)</li> <li>Verifies that posts disliked by users don't appear in recommendations</li> </ul>"},{"location":"validator-guide/#2-feedback-logging-check","title":"2. Feedback Logging Check","text":"<p>Tests the interaction logging functionality:</p> <ul> <li>Logs synthetic user feedback (favorites, etc.)</li> <li>Verifies that interactions are properly stored</li> <li>Confirms that interactions can be retrieved</li> </ul>"},{"location":"validator-guide/#3-privacy-modes-check","title":"3. Privacy Modes Check","text":"<p>Validates that privacy settings are respected:</p> <ul> <li>Tests each privacy level (full, limited, none)</li> <li>Verifies that data visibility changes appropriately</li> <li>Checks that privacy settings persist</li> </ul>"},{"location":"validator-guide/#4-timeline-blending-check","title":"4. Timeline Blending Check","text":"<p>Tests the integration of recommendations into timelines:</p> <ul> <li>Checks timeline endpoints</li> <li>Verifies recommendation injection</li> <li>Validates blending parameters</li> </ul>"},{"location":"validator-guide/#interpreting-results","title":"Interpreting Results","text":"<p>The validator produces a report with a status for each check:</p> <ul> <li>\u2705 Pass: The feature works as expected</li> <li>\u26a0\ufe0f Warning: Minor issues detected, but not critical</li> <li>\u274c Fail: Critical problems found</li> </ul> <p>Here's an example report:</p> <pre><code>=== Corgi Validator Results ===\n\nTimestamp: 2025-03-15T14:32:18\nSynthetic Users: 5\nSynthetic Posts: 10\nSimulated Interactions: 17\n\nTest Results:\n\u2705 recommendations (Generated 8 recommendations)\n\u2705 feedback (All feedback entries were properly logged and retrieved)\n\u26a0\ufe0f privacy (Privacy level transition from 'none' to 'full' has delay)\n\u2705 blending (Timeline blending verification complete)\n\nOverall Status: \u26a0\ufe0f Some checks have warnings\n</code></pre>"},{"location":"validator-guide/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"Issue Possible Cause Solution Recommendation check fails Missing post data or ranking algorithm error Check database connection and algorithm inputs Feedback logging check fails Interaction API endpoint not working Verify API path and request format Privacy check fails Privacy settings not being stored correctly Check database schema or API implementation Connectivity errors Service not running or wrong port Start the service or use correct API base URL"},{"location":"validator-guide/#using-the-validator-in-cicd","title":"Using the Validator in CI/CD","text":"<p>The validator can be integrated into continuous integration workflows:</p> <pre><code># In your CI script\npython corgi_validator.py --dry-run --check-all --output=validation_report.json\n\n# Check exit code\nif [ $? -ne 0 ]; then\n  echo \"Validation failed!\"\n  exit 1\nfi\n</code></pre> <p>For environments without a running database, use the <code>--dry-run</code> flag to simulate API calls.</p>"},{"location":"api/overview/","title":"API Overview","text":"<p>Corgi provides a comprehensive RESTful API for integrating personalized recommendations into your applications. This page provides a high-level overview of the API structure and common usage patterns.</p>"},{"location":"api/overview/#api-base-url","title":"API Base URL","text":"<p>All API requests should be made to:</p> <pre><code>https://api.corgi-recs.io\n</code></pre> <p>For self-hosted instances, this will be your own domain.</p>"},{"location":"api/overview/#authentication","title":"Authentication","text":"<p>Corgi uses API keys for authentication. Include your API key in all requests:</p> <pre><code>curl -X GET \"https://api.corgi-recs.io/api/v1/timelines/recommended\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n</code></pre>      API Key Security    <p>API keys should be kept secure and never exposed in client-side code. For browser-based applications, use a backend service to proxy requests to Corgi.</p>"},{"location":"api/overview/#versioning","title":"Versioning","text":"<p>The API is versioned to ensure backward compatibility. The current version is <code>v1</code>:</p> <pre><code>/api/v1/...\n</code></pre>"},{"location":"api/overview/#response-format","title":"Response Format","text":"<p>All API responses are returned as JSON:</p> <pre><code>{\n  \"status\": \"ok\",\n  \"data\": {\n    \"key\": \"value\"\n  }\n}\n</code></pre> <p>Error responses include error details:</p> <pre><code>{\n  \"error\": \"Invalid request parameters\",\n  \"details\": \"Missing required parameter: user_id\",\n  \"status_code\": 400\n}\n</code></pre>"},{"location":"api/overview/#pagination","title":"Pagination","text":"<p>Endpoints that return multiple items support pagination:</p> <pre><code>curl -X GET \"https://api.corgi-recs.io/api/v1/posts?limit=20&amp;page=2\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n</code></pre> <p>Pagination parameters:</p> <ul> <li><code>limit</code> - Number of items per page (default: 20, max: 100)</li> <li><code>page</code> - Page number (default: 1)</li> <li><code>max_id</code> - Return results older than this ID</li> <li><code>since_id</code> - Return results newer than this ID</li> </ul> <p>Paginated responses include metadata:</p> <pre><code>{\n  \"data\": [...],\n  \"pagination\": {\n    \"total_items\": 157,\n    \"total_pages\": 8,\n    \"current_page\": 2,\n    \"prev_page\": 1,\n    \"next_page\": 3,\n    \"has_more\": true\n  }\n}\n</code></pre>"},{"location":"api/overview/#rate-limiting","title":"Rate Limiting","text":"<p>API requests are rate-limited to ensure fair usage:</p> <ul> <li>300 requests per minute per API key</li> <li>10,000 requests per day per API key</li> </ul> <p>Rate limit headers are included in responses:</p> <pre><code>X-RateLimit-Limit: 300\nX-RateLimit-Remaining: 297\nX-RateLimit-Reset: 1617981600\n</code></pre> <p>When a rate limit is exceeded, a 429 error is returned:</p> <pre><code>{\n  \"error\": \"Rate limit exceeded\",\n  \"retry_after\": 30,\n  \"status_code\": 429\n}\n</code></pre>"},{"location":"api/overview/#core-endpoints","title":"Core Endpoints","text":"<p>The API is organized around these key resource areas:</p>"},{"location":"api/overview/#timelines","title":"Timelines","text":"<p>Timeline endpoints provide Mastodon-compatible timelines with recommendations:</p> <ul> <li><code>GET /api/v1/timelines/home</code> - Get regular home timeline (proxy to Mastodon)</li> <li><code>GET /api/v1/timelines/home/augmented</code> - Get home timeline with injected recommendations</li> <li><code>GET /api/v1/timelines/recommended</code> - Get a timeline of only recommended posts</li> </ul> <p>View Timeline API Reference \u2192</p>"},{"location":"api/overview/#interactions","title":"Interactions","text":"<p>Interaction endpoints track user engagement with posts:</p> <ul> <li><code>POST /api/v1/interactions</code> - Log a user interaction with a post</li> <li><code>GET /api/v1/interactions/user/{user_id}</code> - Get a user's interactions</li> <li><code>GET /api/v1/interactions/counts/batch</code> - Get interaction counts for multiple posts</li> </ul> <p>View Interaction API Reference \u2192</p>"},{"location":"api/overview/#privacy","title":"Privacy","text":"<p>Privacy endpoints allow users to control data collection:</p> <ul> <li><code>GET /api/v1/privacy</code> - Get current privacy settings</li> <li><code>POST /api/v1/privacy</code> - Update privacy settings</li> <li><code>DELETE /api/v1/privacy/data</code> - Delete all user data</li> </ul> <p>View Privacy API Reference \u2192</p>"},{"location":"api/overview/#recommendations","title":"Recommendations","text":"<p>Recommendation endpoints provide direct access to the recommendation engine:</p> <ul> <li><code>GET /api/v1/recommendations</code> - Get personalized recommendations</li> <li><code>POST /api/v1/recommendations/generate</code> - Generate fresh recommendations</li> <li><code>GET /api/v1/recommendations/reasons</code> - Get explanation for recommendations</li> </ul> <p>View Recommendations API Reference \u2192</p>"},{"location":"api/overview/#proxy","title":"Proxy","text":"<p>Proxy endpoints provide information about the transparent proxy:</p> <ul> <li><code>GET /api/v1/proxy/status</code> - Get proxy status</li> <li><code>GET /api/v1/proxy/metrics</code> - Get proxy metrics</li> <li><code>GET /api/v1/proxy/instance</code> - Debug instance detection</li> </ul> <p>View Proxy API Reference \u2192</p>"},{"location":"api/overview/#api-clients","title":"API Clients","text":"<p>We provide official client libraries for easy integration:</p> PythonJavaScriptRuby <pre><code>import corgi\n\nclient = corgi.Client(api_key=\"YOUR_API_KEY\")\n\n# Get recommendations\nrecommendations = client.timelines.recommended(user_id=\"user123\")\n\n# Log an interaction\nclient.interactions.create(\n    user_id=\"user123\",\n    post_id=\"post456\",\n    action_type=\"favorite\"\n)\n</code></pre> <pre><code>import { CorgiClient } from '@corgi/client';\n\nconst client = new CorgiClient({\n  apiKey: 'YOUR_API_KEY'\n});\n\n// Get recommendations\nconst recommendations = await client.timelines.recommended({\n  userId: 'user123'\n});\n\n// Log an interaction\nawait client.interactions.create({\n  userId: 'user123',\n  postId: 'post456',\n  actionType: 'favorite'\n});\n</code></pre> <pre><code>require 'corgi'\n\nclient = Corgi::Client.new(api_key: 'YOUR_API_KEY')\n\n# Get recommendations\nrecommendations = client.timelines.recommended(user_id: 'user123')\n\n# Log an interaction\nclient.interactions.create(\n  user_id: 'user123',\n  post_id: 'post456',\n  action_type: 'favorite'\n)\n</code></pre>"},{"location":"api/overview/#openapi-specification","title":"OpenAPI Specification","text":"<p>The complete API is documented in OpenAPI format and available at:</p> <pre><code>https://api.corgi-recs.io/openapi.yaml\n</code></pre> <p>You can also explore the API using our interactive Swagger UI:</p> <pre><code>https://api.corgi-recs.io/docs/\n</code></pre>"},{"location":"api/overview/#error-handling","title":"Error Handling","text":"<p>Corgi uses standard HTTP status codes to indicate the success or failure of requests:</p> Code Description 200 Success 201 Created 400 Bad Request - Invalid parameters 401 Unauthorized - Invalid API key 403 Forbidden - Insufficient permissions 404 Not Found - Resource doesn't exist 429 Too Many Requests - Rate limit exceeded 500 Server Error - Something went wrong on our end <p>Error responses include detailed information:</p> <pre><code>{\n  \"error\": \"Resource not found\",\n  \"message\": \"The requested post could not be found\",\n  \"status_code\": 404,\n  \"request_id\": \"req_123abc456def\"\n}\n</code></pre> \ud83e\udeb5 Request IDs <p>All responses include a <code>X-Request-ID</code> header that can be used to track requests in logs. Include this ID when reporting issues.</p>"},{"location":"api/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Explore specific endpoint documentation:</li> <li>Timelines API</li> <li>Recommendations API</li> <li>Feedback API</li> <li>Privacy API</li> <li>Proxy API</li> <li>Check out integration examples:</li> <li>Python Client</li> <li>Elk Integration</li> <li>CLI Tool</li> </ul>"},{"location":"client/","title":"Corgi Recommender Service - Client Integration","text":"<p>This directory contains client-side integration code for the Corgi Recommender Service. These modules provide middleware and utility functions that can be used to integrate the recommender service with frontend applications.</p>"},{"location":"client/#modules","title":"Modules","text":"<ul> <li><code>status.js</code> - Middleware for intercepting and logging user interactions with posts (likes, reblogs, etc.)</li> <li><code>post-logger.js</code> - Utilities for logging post views and timeline content</li> <li><code>api-config.js</code> - Configuration for the Corgi Recommender Service API endpoints</li> <li><code>dom-observer.js</code> - DOM mutation observer for capturing post interactions when direct API interception isn't possible</li> </ul>"},{"location":"client/#integration","title":"Integration","text":"<p>These modules are designed to be integrated with Vue/Nuxt applications, but can be adapted for use with other frameworks.</p> <p>For Mastodon clients, the <code>status.js</code> module provides a drop-in replacement for Mastodon API interaction functions that add logging capabilities.</p> <p>See each module's documentation for detailed integration instructions.</p>"},{"location":"concepts/privacy/","title":"Privacy Design","text":"<p>Corgi was built with privacy as a core principle. This document explains how we protect user data while still providing personalized recommendations.</p>"},{"location":"concepts/privacy/#privacy-philosophy","title":"Privacy Philosophy","text":"<p>Our approach to privacy is guided by these principles:</p> <ol> <li>Minimum Necessary Collection - Only collect data essential for recommendations</li> <li>User Control - Clear privacy settings with meaningful options</li> <li>Pseudonymous Identity - Avoid storing personally identifiable information</li> <li>Local Processing - Keep data within your Corgi instance</li> <li>Transparency - Be clear about what data is collected and how it's used</li> </ol>"},{"location":"concepts/privacy/#user-privacy-levels","title":"User Privacy Levels","text":"<p>Corgi gives users three distinct privacy levels that control data collection and personalization:</p> <pre><code>graph TD\n    subgraph \"Privacy Levels\"\n        A[User Privacy Setting]\n        A --&gt; B[Full]\n        A --&gt; C[Limited]\n        A --&gt; D[None]\n    end\n\n    subgraph \"Data Collection\"\n        B --&gt; E[Pseudonymized Interaction History]\n        C --&gt; F[Aggregate Counts Only]\n        D --&gt; G[No User Data Stored]\n    end\n\n    subgraph \"Recommendation Quality\"\n        E --&gt; H[Highly Personalized]\n        F --&gt; I[Category-Based]\n        G --&gt; J[General/Cold Start Only]\n    end\n\n    style A fill:#FFB300,stroke:#FF8F00,color:#000\n    style B fill:#e6f7ff,stroke:#1890ff,color:#000\n    style C fill:#fff7e6,stroke:#fa8c16,color:#000\n    style D fill:#f9f0ff,stroke:#722ed1,color:#000</code></pre>"},{"location":"concepts/privacy/#full-tracking","title":"Full Tracking","text":"<pre><code>{\n  \"tracking_level\": \"full\"\n}\n</code></pre> <p>With full tracking enabled:</p> <ul> <li>All interactions (favorites, boosts, etc.) are stored with pseudonymous user IDs</li> <li>Detailed content preferences are tracked (authors, topics)</li> <li>Maximum personalization is provided</li> <li>Data is retained according to the configured retention period</li> </ul>"},{"location":"concepts/privacy/#limited-tracking","title":"Limited Tracking","text":"<pre><code>{\n  \"tracking_level\": \"limited\"\n}\n</code></pre> <p>With limited tracking (the default):</p> <ul> <li>Only aggregated statistics are stored (e.g., \"User X has favorited 5 posts from Author Y\")</li> <li>Individual interactions are not retained after aggregation</li> <li>Basic personalization is still possible</li> <li>Reduced recommendation quality but increased privacy</li> </ul>"},{"location":"concepts/privacy/#no-tracking","title":"No Tracking","text":"<pre><code>{\n  \"tracking_level\": \"none\"\n}\n</code></pre> <p>With no tracking:</p> <ul> <li>No user data is collected</li> <li>No personal data is stored</li> <li>No personalization is provided</li> <li>Timeline requests pass through without enhancement</li> </ul>      Privacy Default    <p>All new users start with <code>limited</code> tracking unless they explicitly opt into <code>full</code> tracking.</p>"},{"location":"concepts/privacy/#identity-pseudonymization","title":"Identity Pseudonymization","text":"<p>To protect user identity while enabling personalization, Corgi uses pseudonymous identifiers:</p> <pre><code>flowchart LR\n    A[Real User ID\\n@user@domain.com] --&gt; B[\"Combine with Salt\\n(user@domain.com + SECRET)\"]\n    B --&gt; C[SHA-256 Hash]\n    C --&gt; D[Generate Pseudonym]\n    D --&gt; E[user_abc123def456...]\n\n    style A fill:#f9f9f9,stroke:#999\n    style B fill:#fffae6,stroke:#d4b106\n    style C fill:#f6ffed,stroke:#389e0d\n    style D fill:#e6f7ff,stroke:#1890ff\n    style E fill:#FFB300,stroke:#FF8F00,color:#000</code></pre>"},{"location":"concepts/privacy/#user-aliasing","title":"User Aliasing","text":"<p>When a user interacts with Corgi, their identity is pseudonymized:</p> <pre><code>def generate_user_alias(user_id):\n    # Combine the user ID with a site-specific salt\n    hash_input = f\"{user_id}{SITE_SALT}\"\n    # Generate a SHA-256 hash\n    return hashlib.sha256(hash_input.encode()).hexdigest()\n</code></pre> <p>This approach ensures:</p> <ul> <li>The same user gets the same alias on each visit</li> <li>Different Corgi instances generate different aliases for the same user</li> <li>The original user ID cannot be derived from the alias without the salt</li> </ul> <p>All user data in the database is stored against this pseudonymous alias, not the original user ID.</p>"},{"location":"concepts/privacy/#data-minimization","title":"Data Minimization","text":"<p>Corgi only stores the minimum necessary data for recommendations:</p>"},{"location":"concepts/privacy/#interaction-data","title":"Interaction Data","text":"<p>For users with <code>full</code> tracking, each interaction contains:</p> <pre><code>{\n  \"user_alias\": \"8f7d8a98c7d987f9a87dc987a9d87f98a7\",\n  \"post_id\": \"109876543211234567\",\n  \"action_type\": \"favorite\",\n  \"created_at\": \"2025-03-15T14:22:11.000Z\",\n  \"context\": {\n    \"source\": \"timeline_home\"\n  }\n}\n</code></pre> <p>Note that we don't store: - Post content - Author details - User's real identity - IP address or device information</p>"},{"location":"concepts/privacy/#content-metadata","title":"Content Metadata","text":"<p>For ranked posts, we store:</p> <pre><code>{\n  \"post_id\": \"109876543211234567\",\n  \"author_id\": \"12345\",\n  \"author_name\": \"techblogger\",\n  \"created_at\": \"2025-03-15T14:22:11.000Z\",\n  \"interaction_counts\": {\n    \"favorites\": 43,\n    \"reblogs\": 28,\n    \"replies\": 12\n  }\n}\n</code></pre> <p>The full post content is fetched from the Mastodon API at request time, not stored in Corgi.</p>"},{"location":"concepts/privacy/#data-retention","title":"Data Retention","text":"<p>Corgi implements time-limited retention of user data:</p> <ul> <li>Interaction data is kept for 90 days by default (configurable)</li> <li>Older interactions are automatically purged</li> <li>User profile data is retained until the user deletes their account</li> <li>Users can request immediate deletion of all their data</li> </ul>"},{"location":"concepts/privacy/#proxy-privacy-considerations","title":"Proxy Privacy Considerations","text":"<p>Since Corgi acts as a proxy, it processes all requests between the client and Mastodon, including authentication:</p>"},{"location":"concepts/privacy/#authentication-handling","title":"Authentication Handling","text":"<ul> <li>OAuth tokens are never logged</li> <li>Tokens are passed through to Mastodon without modification</li> <li>Tokens are not stored unless explicitly linked (for instance resolution)</li> <li>If stored, tokens are encrypted at rest</li> </ul>"},{"location":"concepts/privacy/#request-privacy","title":"Request Privacy\ud83d\udd12 Self-Hosting for Maximum Privacy","text":"<ul> <li>Request URLs and parameters are only logged at debug level</li> <li>Response bodies are never logged</li> <li>Sensitive headers are redacted in logs</li> </ul> <p>For maximum privacy, we recommend self-hosting your own Corgi instance. This ensures that all your data stays within your control.</p>"},{"location":"concepts/privacy/#data-access-and-deletion","title":"Data Access and Deletion","text":"<p>Users have full control over their data:</p>"},{"location":"concepts/privacy/#accessing-your-data","title":"Accessing Your Data","text":"<p>Users can retrieve all data associated with their account:</p> <pre><code>curl -X GET \"https://api.corgi-recs.io/api/v1/privacy/export\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n</code></pre>"},{"location":"concepts/privacy/#deleting-your-data","title":"Deleting Your Data","text":"<p>To delete all user data:</p> <pre><code>curl -X DELETE \"https://api.corgi-recs.io/api/v1/privacy/data\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n</code></pre> <p>This permanently removes all user data, including: - Interaction history - Preference profiles - Account links - Rankings and recommendations</p>"},{"location":"concepts/privacy/#auditing-and-compliance","title":"Auditing and Compliance","text":"<p>Corgi's privacy practices are transparent and auditable:</p> <ul> <li>The source code is open for review</li> <li>Data processing is documented in comments and this guide</li> <li>Regular privacy audits are conducted</li> <li>We welcome security researchers to review our privacy practices</li> </ul>"},{"location":"concepts/privacy/#privacy-settings-api","title":"Privacy Settings API","text":"<p>Users can control their privacy settings through the API:</p> <pre><code># Get current privacy settings\ncurl -X GET \"https://api.corgi-recs.io/api/v1/privacy?user_id=your_user_id\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n\n# Update privacy settings\ncurl -X POST \"https://api.corgi-recs.io/api/v1/privacy\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"user_id\": \"your_user_id\",\n    \"tracking_level\": \"limited\"\n  }'\n</code></pre> <p>For full API details, see the Privacy Settings API Reference.</p>"},{"location":"concepts/proxy/","title":"Proxy Architecture","text":"<p>The transparent proxy is Corgi's most powerful feature, allowing any standard Mastodon client to benefit from personalized recommendations without any code changes.</p>"},{"location":"concepts/proxy/#how-the-proxy-works","title":"How the Proxy Works","text":"<p>Corgi's proxy middleware sits between your Mastodon client and server, intercepting and enhancing API requests:</p>      Interactive Diagrams    <p>All diagrams are interactive! Click on any diagram to view a larger version.</p> <pre><code>sequenceDiagram\n    autonumber\n    participant Client as Mastodon Client&lt;br/&gt;(Elk, Ivory, etc)\n    participant Corgi as Corgi Proxy Service\n    participant RecEngine as Recommendation&lt;br/&gt;Engine\n    participant Instance as Mastodon Instance&lt;br/&gt;(e.g., mastodon.social)\n\n    rect rgb(230, 242, 255)\n    note right of Client: Timeline Enhancement Flow\n    Client-&gt;&gt;+Corgi: GET /api/v1/timelines/home&lt;br/&gt;[Authorization: Bearer TOKEN]\n    activate Corgi\n\n    Corgi-&gt;&gt;Corgi: Extract OAuth token\n    Corgi-&gt;&gt;Corgi: Identify user's instance\n\n    Corgi-&gt;&gt;+Instance: Forward request&lt;br/&gt;[Authorization: Bearer TOKEN]\n    activate Instance\n    Instance--&gt;&gt;-Corgi: Return original timeline\n    deactivate Instance\n\n    Corgi-&gt;&gt;+RecEngine: Request recommendations&lt;br/&gt;for user\n    activate RecEngine\n    RecEngine--&gt;&gt;-Corgi: Return personalized&lt;br/&gt;recommendations\n    deactivate RecEngine\n\n    Corgi-&gt;&gt;Corgi: Blend recommendations&lt;br/&gt;into timeline\n    Corgi-&gt;&gt;Corgi: Add recommendation&lt;br/&gt;metadata\n\n    Corgi--&gt;&gt;-Client: Return enhanced timeline&lt;br/&gt;[X-Corgi-Enhanced: true]\n    deactivate Corgi\n    end\n\n    rect rgb(232, 245, 233)\n    note right of Client: Standard Pass-through Flow\n    Client-&gt;&gt;+Corgi: GET /api/v1/notifications\n    activate Corgi\n    Corgi-&gt;&gt;+Instance: Forward unchanged\n    activate Instance\n    Instance--&gt;&gt;-Corgi: Return notifications\n    deactivate Instance\n    Corgi--&gt;&gt;-Client: Pass through unchanged\n    deactivate Corgi\n    end\n\n    rect rgb(255, 243, 224)\n    note right of Client: Public Timeline Enhancement (Optional)\n    Client-&gt;&gt;+Corgi: GET /api/v1/timelines/public?&lt;br/&gt;local=true&amp;enhanced=true\n    activate Corgi\n    Corgi-&gt;&gt;+Instance: GET /api/v1/timelines/public?local=true\n    activate Instance\n    Instance--&gt;&gt;-Corgi: Return public timeline\n    deactivate Instance\n\n    Corgi-&gt;&gt;+RecEngine: Get trending content&lt;br/&gt;recommendations\n    activate RecEngine\n    RecEngine--&gt;&gt;-Corgi: Return topic-based&lt;br/&gt;recommendations\n    deactivate RecEngine\n\n    Corgi-&gt;&gt;Corgi: Inject recommendations&lt;br/&gt;if enhanced=true\n    Corgi--&gt;&gt;-Client: Return (optionally) enhanced timeline\n    deactivate Corgi\n    end\n\n    style Client fill:#e3f2fd,stroke:#0277bd,color:black\n    style Corgi fill:#ffb300,stroke:#ff8f00,color:#000000,font-weight:bold\n    style RecEngine fill:#ffecb3,stroke:#ffa000,color:#000000,font-weight:bold\n    style Instance fill:#e8f5e9,stroke:#2e7d32,color:black</code></pre>"},{"location":"concepts/proxy/#key-benefits","title":"Key Benefits","text":"<ol> <li>Zero client changes - Works with any Mastodon client</li> <li>Seamless integration - Recommendations appear naturally in the timeline</li> <li>Selective enhancement - Only modifies timeline endpoints</li> <li>Preservation of features - All Mastodon features work normally</li> <li>Authentication pass-through - No additional authentication needed</li> </ol>"},{"location":"concepts/proxy/#instance-resolution","title":"Instance Resolution","text":"<p>One of the proxy's critical functions is determining which Mastodon instance to forward requests to. Corgi uses a multi-tiered approach:</p>"},{"location":"concepts/proxy/#resolution-process","title":"Resolution Process","text":"<p>When a request arrives, Corgi determines the target instance in this order:</p> <ol> <li> <p>Check for <code>X-Mastodon-Instance</code> header    <pre><code>X-Mastodon-Instance: mastodon.social\n</code></pre></p> </li> <li> <p>Look for an <code>instance</code> query parameter    <pre><code>/api/v1/timelines/home?instance=mastodon.social\n</code></pre></p> </li> <li> <p>If authenticated, lookup the user's linked instance in the database    (Using the OAuth token to find a previously established link)</p> </li> <li> <p>Fall back to the default instance from configuration    <pre><code>DEFAULT_MASTODON_INSTANCE = \"mastodon.social\"\n</code></pre></p> </li> </ol>      Instance Linking    <p>For best results, users should explicitly link their Mastodon account using the account linking API. This ensures the proxy always forwards to the correct instance.</p>"},{"location":"concepts/proxy/#authentication-handling","title":"Authentication Handling","text":"<p>The proxy passes through authentication between clients and Mastodon instances:</p>"},{"location":"concepts/proxy/#oauth-flow","title":"OAuth Flow","text":"<ol> <li> <p>Client sends a request with an OAuth bearer token    <pre><code>Authorization: Bearer abc123...\n</code></pre></p> </li> <li> <p>Corgi extracts the token for instance resolution and user identification</p> </li> <li> <p>Corgi forwards the exact same token to the Mastodon instance    <pre><code>Authorization: Bearer abc123...\n</code></pre></p> </li> <li> <p>Mastodon accepts the token and processes the request as normal</p> </li> <li> <p>Corgi receives the authenticated response and enhances it if needed</p> </li> </ol> <p>This transparent handling means users don't need separate authentication for Corgi and their Mastodon instance.</p>"},{"location":"concepts/proxy/#timeline-enhancement","title":"Timeline Enhancement","text":"<p>When processing a home timeline request, Corgi enhances the response with personalized recommendations:</p>"},{"location":"concepts/proxy/#enhancement-process","title":"Enhancement Process","text":"<ol> <li>Forward the timeline request to the Mastodon instance</li> <li>Receive the original timeline response</li> <li>Fetch personalized recommendations for the user</li> <li>Blend recommendations into the timeline based on the configured ratio</li> <li>Add metadata to identify recommended posts:    <pre><code>{\n  \"is_recommendation\": true,\n  \"recommendation_reason\": \"From an author you might like\"\n}\n</code></pre></li> <li>Return the enhanced timeline to the client</li> </ol>"},{"location":"concepts/proxy/#recommendation-headers","title":"Recommendation Headers","text":"<p>Corgi adds custom headers to enhanced responses:</p> <pre><code>X-Corgi-Enhanced: true\nX-Corgi-Recommendations: 3\nX-Corgi-Recommendation-Score: 0.87\n</code></pre> <p>These headers allow clients to detect and display information about the enhancements.</p>"},{"location":"concepts/proxy/#selective-enhancement","title":"Selective Enhancement","text":"<p>Not all endpoints receive enhancements:</p> Endpoint Enhancement <code>/api/v1/timelines/home</code> \u2705 Recommendations blended into timeline <code>/api/v1/timelines/public</code> \u2705 Optional enhancement (query param) <code>/api/v1/timelines/tag/:hashtag</code> \u2705 Optional enhancement (query param) <code>/api/v1/timelines/list/:list_id</code> \u274c Passed through unchanged <code>/api/v1/notifications</code> \u274c Passed through unchanged All other endpoints \u274c Passed through unchanged"},{"location":"concepts/proxy/#configuring-the-proxy","title":"Configuring the Proxy","text":"<p>The proxy can be configured through environment variables:</p> <pre><code># Default Mastodon instance for unlinked users\nDEFAULT_MASTODON_INSTANCE=mastodon.social\n\n# Ratio of recommendations to include (0.0-1.0)\nRECOMMENDATION_BLEND_RATIO=0.3\n\n# Timeout for proxy requests in seconds\nPROXY_TIMEOUT=10\n\n# Enable additional logging\nDEBUG_PROXY=true\n</code></pre>"},{"location":"concepts/proxy/#client-configuration","title":"Client Configuration","text":"<p>To use Corgi with a Mastodon client, you need to point the client to your Corgi instance instead of directly to Mastodon:</p>"},{"location":"concepts/proxy/#elk-configuration","title":"Elk Configuration","text":"<pre><code>API Base URL: https://api.corgi-recs.io\nAccess Token: [your Mastodon access token]\n</code></pre>"},{"location":"concepts/proxy/#ivory-configuration","title":"Ivory Configuration","text":"<pre><code>Custom Server URL: https://api.corgi-recs.io\nAccess Token: [your Mastodon access token]\n</code></pre>"},{"location":"concepts/proxy/#curl-example","title":"curl Example\ud83d\udd17 Account Linking","text":"<pre><code># Standard Mastodon request\ncurl -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  https://mastodon.social/api/v1/timelines/home\n\n# Using Corgi proxy\ncurl -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  https://api.corgi-recs.io/api/v1/timelines/home\n</code></pre> <p>For best results, link your Mastodon account to Corgi before using the proxy:</p> <pre><code>curl -X POST \"https://api.corgi-recs.io/api/v1/accounts/link\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"user_id\": \"your_user_id\",\n    \"instance\": \"mastodon.social\",\n    \"access_token\": \"YOUR_MASTODON_ACCESS_TOKEN\"\n  }'</code></pre>"},{"location":"concepts/proxy/#debugging-the-proxy","title":"Debugging the Proxy","text":"<p>For troubleshooting proxy issues, Corgi provides several debug endpoints:</p>"},{"location":"concepts/proxy/#status-endpoint","title":"Status Endpoint","text":"<pre><code>curl https://api.corgi-recs.io/api/v1/proxy/status\n</code></pre> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"proxy\": \"active\",\n  \"default_instance\": \"mastodon.social\",\n  \"version\": \"1.2.0\",\n  \"uptime\": \"3d 4h 12m\"\n}\n</code></pre></p>"},{"location":"concepts/proxy/#instance-detection","title":"Instance Detection","text":"<pre><code>curl -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  https://api.corgi-recs.io/api/v1/proxy/instance\n</code></pre> <p>Response: <pre><code>{\n  \"detected_instance\": \"mastodon.social\",\n  \"detection_method\": \"oauth_token_lookup\",\n  \"user_id\": \"pseudonymized_id_123\",\n  \"headers\": {\n    \"authorization\": \"[REDACTED]\",\n    \"user-agent\": \"Elk/1.0\"\n  }\n}\n</code></pre></p>"},{"location":"concepts/proxy/#metrics-endpoint","title":"Metrics Endpoint","text":"<pre><code>curl https://api.corgi-recs.io/api/v1/proxy/metrics\n</code></pre> <p>Response: <pre><code>{\n  \"total_requests\": 12483,\n  \"successful_requests\": 12450,\n  \"failed_requests\": 33,\n  \"timeline_requests\": 2841,\n  \"enriched_timelines\": 2418,\n  \"total_recommendations\": 7254,\n  \"avg_latency_seconds\": 0.328,\n  \"enrichment_rate\": 0.851,\n  \"uptime_seconds\": 259243\n}\n</code></pre></p>"},{"location":"concepts/proxy/#proxy-limitations","title":"Proxy Limitations","text":"<p>While the proxy is powerful, it has some limitations:</p> <ol> <li>Latency - Adds a small processing overhead to requests</li> <li>Rate Limiting - Counts against your Mastodon instance's rate limits</li> <li>Instance Support - Some specialized Mastodon instances may have compatibility issues</li> <li>Client Compatibility - Some clients hardcode their instance URL and cannot use the proxy</li> <li>Trust Requirement - Users must trust the Corgi instance with their authentication tokens</li> </ol>      Security Considerations    <p>Because the proxy handles authentication tokens, it's essential to use a trusted Corgi instance. For maximum security, consider self-hosting your own instance.</p>"},{"location":"concepts/proxy/#additional-resources","title":"Additional Resources","text":"<p>For more information about the proxy implementation:</p> <ul> <li>API Reference: Proxy Endpoints</li> <li>Example: Elk Integration</li> <li>Self-hosting Guide</li> </ul>"},{"location":"concepts/recommendations/","title":"Recommendation Engine","text":"<p>Corgi's recommendation engine is the core of the service, analyzing user interactions to provide personalized content suggestions. This document explains how the engine works and how you can optimize it.</p>"},{"location":"concepts/recommendations/#ranking-algorithm","title":"Ranking Algorithm","text":"<p>The recommendation engine uses a multi-factor ranking algorithm to score content based on user preferences and global engagement:</p> <pre><code>flowchart TD\n    A[User Interactions] --&gt; B[Extract Features]\n    B --&gt; C{Calculate Scores}\n    C --&gt; D[Author Preference]\n    C --&gt; E[Content Engagement]\n    C --&gt; F[Recency]\n    D --&gt; G[Weighted Combination]\n    E --&gt; G\n    F --&gt; G\n    G --&gt; H[Final Ranking Score]\n    H --&gt; I[Ordered Recommendations]\n    style C fill:#FFB300,stroke:#FF8F00,color:#000\n    style G fill:#FFB300,stroke:#FF8F00,color:#000</code></pre>"},{"location":"concepts/recommendations/#ranking-factors","title":"Ranking Factors","text":"<p>Each post is scored based on three key factors:</p>"},{"location":"concepts/recommendations/#1-author-preference-40","title":"1. Author Preference (40%)","text":"<p>Measures how much a user interacts with content from specific authors: - Calculated based on the user's history of favorites, boosts, and other interactions - Higher scores for authors the user consistently engages with - Adjusted for negative feedback (e.g., \"less like this\") - Applies a sigmoid function to normalize scores</p> <pre><code>def get_author_preference_score(user_interactions, author_id):\n    # Count positive and negative interactions with author's content\n    author_interactions = {\n        'positive': count_of_positive_interactions,\n        'negative': count_of_negative_interactions,\n        'total': total_interactions\n    }\n\n    # Calculate positive ratio\n    positive_ratio = author_interactions['positive'] / (author_interactions['total'] + 0.001)\n\n    # Apply sigmoid function to create a smooth 0-1 range\n    preference_score = 1 / (1 + math.exp(-5 * (positive_ratio - 0.5)))\n\n    return max(preference_score, 0.1)  # Minimum score is 0.1\n</code></pre>"},{"location":"concepts/recommendations/#2-content-engagement-30","title":"2. Content Engagement (30%)","text":"<p>Evaluates the post's overall popularity in the community: - Based on favorite counts, boost counts, and reply counts - Uses logarithmic scaling to prevent very popular posts from dominating - Normalized to a 0-1 range for consistent weighting</p> <pre><code>def get_content_engagement_score(post):\n    # Extract counts with fallbacks to 0\n    favorites = int(counts.get('favorites', 0))\n    reblogs = int(counts.get('reblogs', 0))\n    replies = int(counts.get('replies', 0))\n\n    # Sum with logarithmic scaling\n    total = favorites + reblogs + replies\n    return math.log(total + 1) / 10.0  # Normalize to roughly 0-1 range\n</code></pre>"},{"location":"concepts/recommendations/#3-recency-30","title":"3. Recency (30%)","text":"<p>Measures how fresh the content is: - Exponential decay based on post age - Newer posts receive higher scores - Configurable decay factor (default: 3 days) - Ensures score doesn't fall below a minimum threshold</p> <pre><code>def get_recency_score(post):\n    # Calculate age in days\n    age_days = (now - post['created_at']).total_seconds() / (24 * 3600)\n\n    # Exponential decay based on age\n    decay_factor = CONFIG['time_decay_days']\n    recency_score = math.exp(-age_days / decay_factor)\n\n    # Minimum score for older posts\n    return max(recency_score, 0.2)\n</code></pre>"},{"location":"concepts/recommendations/#combined-scoring","title":"Combined Scoring","text":"<p>The final ranking score combines these factors with configurable weights:</p> <pre><code>def calculate_ranking_score(post, user_interactions):\n    # Calculate individual feature scores\n    author_score = get_author_preference_score(user_interactions, post['author_id'])\n    engagement_score = get_content_engagement_score(post)\n    recency_score = get_recency_score(post)\n\n    # Combine scores using weights\n    weights = CONFIG['weights']\n    overall_score = (\n        weights['author_preference'] * author_score +\n        weights['content_engagement'] * engagement_score +\n        weights['recency'] * recency_score\n    )\n\n    # Determine primary reason for recommendation\n    reason = max(\n        (author_score * weights['author_preference'], \"From an author you might like\"),\n        (engagement_score * weights['content_engagement'], \"Popular with other users\"),\n        (recency_score * weights['recency'], \"Recently posted\")\n    )[1]\n\n    return overall_score, reason\n</code></pre>"},{"location":"concepts/recommendations/#timeline-blending","title":"Timeline Blending","text":"<p>Corgi seamlessly integrates recommendations into user timelines while preserving the natural flow of content.</p>"},{"location":"concepts/recommendations/#blending-approach","title":"Blending Approach","text":"<p>The timeline blending process works like this:</p> <pre><code>flowchart TD\n    A[Request Timeline] --&gt; B[Get Original Timeline]\n    B --&gt; C[Get Recommendations]\n    C --&gt; D[Blend Content]\n    D --&gt; E[Apply Filtering]\n    E --&gt; F[Return Enhanced Timeline]\n    style D fill:#FFB300,stroke:#FF8F00,color:#000</code></pre> <ol> <li>When a user requests a timeline (home, public, hashtag, etc.), Corgi first retrieves the original timeline from the Mastodon server</li> <li>In parallel, Corgi gets personalized recommendations for the user</li> <li>Recommendations are blended with the original content at a configurable ratio (default 30%)</li> <li>Blended content is filtered to remove duplicates and maintain chronological order where appropriate</li> <li>The enhanced timeline is returned with recommendation metadata</li> </ol>"},{"location":"concepts/recommendations/#blend-ratio-configuration","title":"Blend Ratio Configuration","text":"<p>The blend ratio determines how many recommendations appear in the timeline:</p> <pre><code># Set timeline blend ratio (0.0 to 1.0)\ncurl -X POST \"https://api.corgi-recs.io/api/v1/proxy/config\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"recommendation_blend_ratio\": 0.3\n  }'\n</code></pre> <p>A ratio of 0.3 means approximately 30% of content will be recommendations, while 70% comes from the original timeline.</p>"},{"location":"concepts/recommendations/#timeline-types","title":"Timeline Types","text":"<p>Different timeline types receive different blending approaches:</p> Timeline Type Default Blend Ratio Notes Home 0.3 Balanced approach Public 0.5 Higher ratio for discovery Hashtag 0.2 Lower ratio to maintain topic focus User 0.0 No blending by default"},{"location":"concepts/recommendations/#timeline-integrity","title":"Timeline Integrity","text":"<p>To maintain timeline integrity, Corgi ensures:</p> <ol> <li>Home timeline posts from followed accounts are never removed</li> <li>Chronological order is preserved when sorting by time</li> <li>Duplicate posts are eliminated</li> <li>Recommendations are clearly marked with explanation badges</li> </ol>"},{"location":"concepts/recommendations/#recommendation-process","title":"Recommendation Process","text":"<p>The complete recommendation process involves several steps:</p>"},{"location":"concepts/recommendations/#1-user-interaction-collection","title":"1. User Interaction Collection","text":"<pre><code>flowchart LR\n    A[User Favorites Post] --&gt; B[Interaction Tracker]\n    C[User Boosts Post] --&gt; B\n    D[User Bookmarks Post] --&gt; B\n    E[User Provides Feedback] --&gt; B\n    B --&gt; F[(Interaction Database)]\n    style B fill:#FFB300,stroke:#FF8F00,color:#000</code></pre> <p>Corgi tracks these interaction types: - <code>favorite</code> - User favorites a post - <code>bookmark</code> - User bookmarks a post - <code>reblog</code> - User boosts/reblogs a post - <code>more_like_this</code> - User explicitly requests similar content - <code>less_like_this</code> - User explicitly requests less similar content</p>"},{"location":"concepts/recommendations/#2-candidate-selection","title":"2. Candidate Selection","text":"<p>Before ranking, the system selects candidate posts:</p> <pre><code>def get_candidate_posts(\n    limit=100,\n    days_limit=7,\n    exclude_post_ids=None,\n    include_synthetic=False\n):\n    # Query recent posts from database\n    # Exclude posts the user has already interacted with\n    # Optionally include synthetic posts if real post count is low\n    # Return list of candidate posts\n</code></pre> <p>The candidate selection process: 1. Prioritizes recent posts (default: last 7 days) 2. Excludes posts the user has already seen or interacted with 3. Includes a mix of posts from followed and non-followed authors 4. Can include synthetic posts when real post count is low (configurable)</p>"},{"location":"concepts/recommendations/#3-ranking-and-filtering","title":"3. Ranking and Filtering","text":"<pre><code>def generate_rankings_for_user(user_id):\n    # Get user's interaction history\n    user_interactions = get_user_interactions(user_id, days_limit=30)\n\n    # Get candidate posts (excluding already seen posts)\n    seen_post_ids = [interaction['post_id'] for interaction in user_interactions]\n    candidate_posts = get_candidate_posts(\n        limit=CONFIG['max_candidates'],\n        days_limit=14,\n        exclude_post_ids=seen_post_ids\n    )\n\n    # Calculate ranking scores for each post\n    ranked_posts = []\n    for post in candidate_posts:\n        score, reason = calculate_ranking_score(post, user_interactions)\n\n        # Include only posts with reasonable scores\n        if score &gt; 0.1:\n            post['ranking_score'] = score\n            post['recommendation_reason'] = reason\n            ranked_posts.append(post)\n\n    # Sort by ranking score (descending)\n    ranked_posts.sort(key=lambda x: x['ranking_score'], reverse=True)\n\n    # Store rankings and return\n    store_rankings(user_id, ranked_posts)\n    return ranked_posts\n</code></pre>"},{"location":"concepts/recommendations/#4-human-readable-explanation","title":"4. Human-Readable Explanation","text":"<p>Each recommendation includes a human-readable reason:</p> <pre><code>{\n  \"id\": \"109876543211234567\",\n  \"content\": \"&lt;p&gt;Just published a new blog post about sustainable tech!&lt;/p&gt;\",\n  \"ranking_score\": 0.87,\n  \"recommendation_reason\": \"From an author you might like\",\n  \"is_recommendation\": true\n}\n</code></pre> <p>The three primary recommendation reasons are: - \"From an author you might like\" (author preference dominant) - \"Popular with other users\" (engagement dominant) - \"Recently posted\" (recency dominant)</p>"},{"location":"concepts/recommendations/#tuning-the-algorithm","title":"Tuning the Algorithm","text":"<p>The recommendation algorithm can be tuned through configuration:</p>"},{"location":"concepts/recommendations/#weight-configuration","title":"Weight Configuration","text":"<pre><code>{\n  \"weights\": {\n    \"author_preference\": 0.4,\n    \"content_engagement\": 0.3,\n    \"recency\": 0.3\n  },\n  \"time_decay_days\": 3,\n  \"min_score_threshold\": 0.1,\n  \"max_candidates\": 200,\n  \"include_synthetic\": false\n}\n</code></pre>"},{"location":"concepts/recommendations/#recommendation-quality-factors","title":"Recommendation Quality Factors\ud83e\uddea Experimentation Tips","text":"<p>Several factors affect recommendation quality:</p> <ol> <li>Interaction Volume - More user interactions = better recommendations</li> <li>Content Variety - Diverse content pool improves recommendation quality</li> <li>Recency Balance - How much to favor new vs. established content</li> <li>Author vs. Content - Balancing author-based vs. content-based recommendations</li> <li>Time Horizon - How far back to look for interactions and candidate posts</li> </ol> <p>When tuning the recommendation engine:</p> <ul> <li>Start with the default weights</li> <li>Adjust one parameter at a time</li> <li>Test with a representative user sample</li> <li>Measure both click-through rate and user satisfaction</li> <li>Allow sufficient time for the changes to show results</li> </ul>"},{"location":"concepts/recommendations/#cold-start-problem","title":"Cold Start Problem","text":"<p>Corgi handles the \"cold start\" problem in two ways:</p>"},{"location":"concepts/recommendations/#for-new-users","title":"For New Users","text":"<ol> <li>Initially rely more heavily on the global engagement score</li> <li>Gradually increase author preference weight as interactions accumulate</li> <li>Provide diverse content samples to quickly learn preferences</li> <li>Optional: Use follow relationships as initial preference signals</li> </ol>"},{"location":"concepts/recommendations/#for-new-content","title":"For New Content","text":"<ol> <li>Give a recency boost to fresh content</li> <li>Consider author's historical popularity</li> <li>Identify content similar to already-popular posts</li> <li>Sample new content at a controlled rate to gauge engagement</li> </ol>"},{"location":"concepts/recommendations/#recommendation-api","title":"Recommendation API","text":"<p>The recommendation engine is exposed through the API:</p> <pre><code># Get personalized recommendations\ncurl -X GET \"https://api.corgi-recs.io/api/v1/recommendations?user_id=your_user_id\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n\n# Get recommendations with debug information\ncurl -X GET \"https://api.corgi-recs.io/api/v1/recommendations?user_id=your_user_id&amp;debug=true\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n</code></pre> <p>Debug mode provides additional scoring information:</p> <pre><code>{\n  \"recommendations\": [...],\n  \"debug_info\": {\n    \"user_interactions_count\": 47,\n    \"candidates_evaluated\": 183,\n    \"factor_weights\": {\n      \"author_preference\": 0.4,\n      \"content_engagement\": 0.3,\n      \"recency\": 0.3\n    },\n    \"score_distribution\": {\n      \"min\": 0.12,\n      \"max\": 0.91,\n      \"mean\": 0.42,\n      \"median\": 0.37\n    }\n  }\n}\n</code></pre> <p>For the full API reference, see Recommendations API.</p>"},{"location":"concepts/recommendations/#advanced-features","title":"Advanced Features","text":"<p>The recommendation engine includes several advanced features:</p>"},{"location":"concepts/recommendations/#ab-testing","title":"A/B Testing","text":"<pre><code># Get recommendations with specific algorithm variant\ncurl -X GET \"https://api.corgi-recs.io/api/v1/recommendations?user_id=your_user_id&amp;variant=higher_recency\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n</code></pre>"},{"location":"concepts/recommendations/#content-filters","title":"Content Filters","text":"<pre><code># Filter recommendations by language\ncurl -X GET \"https://api.corgi-recs.io/api/v1/recommendations?user_id=your_user_id&amp;languages=en,es\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n\n# Filter recommendations by sensitive content\ncurl -X GET \"https://api.corgi-recs.io/api/v1/recommendations?user_id=your_user_id&amp;hide_sensitive=true\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n</code></pre>"},{"location":"concepts/recommendations/#diversity-controls","title":"Diversity Controls","text":"<pre><code># Control author diversity (higher = more diverse)\ncurl -X GET \"https://api.corgi-recs.io/api/v1/recommendations?user_id=your_user_id&amp;author_diversity=0.7\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n</code></pre>"},{"location":"concepts/recommendations/#recommendation-feedback","title":"Recommendation Feedback","text":"<p>For continuous improvement, Corgi collects feedback on recommendations:</p> <pre><code># Log positive feedback for a recommendation\ncurl -X POST \"https://api.corgi-recs.io/api/v1/interactions\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"user_alias\": \"your_user_id\",\n    \"post_id\": \"109876543211234567\",\n    \"action_type\": \"more_like_this\",\n    \"context\": {\n      \"source\": \"recommended_timeline\"\n    }\n  }'\n\n# Log negative feedback\ncurl -X POST \"https://api.corgi-recs.io/api/v1/interactions\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"user_alias\": \"your_user_id\",\n    \"post_id\": \"109876543211234567\",\n    \"action_type\": \"less_like_this\",\n    \"context\": {\n      \"source\": \"recommended_timeline\"\n    }\n  }'\n</code></pre> <p>This feedback is incorporated into future recommendations, creating a continuous learning loop.</p>      Privacy Impact    <p>The recommendation algorithm respects user privacy settings. For users with <code>limited</code> tracking, only aggregated preferences are used. For users with <code>none</code> tracking, no personalization is applied.</p>"},{"location":"concepts/recommendations/#additional-resources","title":"Additional Resources","text":"<ul> <li>API Reference: Recommendations</li> <li>API Reference: Feedback</li> <li>Example: Python Client</li> </ul>"},{"location":"concepts/self-hosting/","title":"Self-Hosting Corgi","text":"<p>This guide explains how to self-host Corgi on your own infrastructure, allowing you to have full control over your recommendation engine and data.</p>"},{"location":"concepts/self-hosting/#requirements","title":"Requirements","text":"<ul> <li>Docker and Docker Compose</li> <li>2GB+ RAM</li> <li>20GB+ storage space</li> <li>Public-facing domain with SSL certificate</li> </ul>"},{"location":"concepts/self-hosting/#quick-start-with-docker","title":"Quick Start with Docker","text":"<p>The fastest way to get Corgi running is with our official Docker image:</p> <pre><code>docker run -p 5000:5000 \\\n  -e DATABASE_URL=postgresql://user:password@localhost/corgi \\\n  -e SECRET_KEY=your-secret-key \\\n  -e DEFAULT_MASTODON_INSTANCE=mastodon.social \\\n  corgi/recommender-service:latest\n</code></pre>"},{"location":"concepts/self-hosting/#using-docker-compose","title":"Using Docker Compose","text":"<p>For a more complete setup with a database and proper configuration, use Docker Compose:</p> <ol> <li>Create a <code>.env</code> file with your configuration:</li> </ol> <pre><code>DATABASE_URL=postgresql://postgres:postgres@db/corgi\nSECRET_KEY=your-secret-key-here\nDEFAULT_MASTODON_INSTANCE=mastodon.social\nRECOMMENDATION_BLEND_RATIO=0.3\n</code></pre> <ol> <li>Use our sample <code>docker-compose.yml</code>:</li> </ol> <pre><code>version: '3'\n\nservices:\n  corgi:\n    image: corgi/recommender-service:latest\n    ports:\n      - \"5000:5000\"\n    environment:\n      - DATABASE_URL=${DATABASE_URL}\n      - SECRET_KEY=${SECRET_KEY}\n      - DEFAULT_MASTODON_INSTANCE=${DEFAULT_MASTODON_INSTANCE}\n      - RECOMMENDATION_BLEND_RATIO=${RECOMMENDATION_BLEND_RATIO}\n    depends_on:\n      - db\n    restart: unless-stopped\n\n  db:\n    image: postgres:14\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_PASSWORD=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_DB=corgi\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n</code></pre> <ol> <li>Start the services:</li> </ol> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"concepts/self-hosting/#from-source-code","title":"From Source Code","text":"<p>If you prefer to run Corgi from source:</p> <ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/andrewnordstrom/corgi-recommender-service.git\ncd corgi-recommender-service\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>python -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre> <ol> <li>Set up the database:</li> </ol> <pre><code>./setup_db.sh\n</code></pre> <ol> <li>Run the server:</li> </ol> <pre><code>python run_server.py\n</code></pre>"},{"location":"concepts/self-hosting/#configuration-options","title":"Configuration Options","text":"<p>You can configure Corgi through environment variables:</p> Variable Description Default <code>DATABASE_URL</code> PostgreSQL connection string <code>postgresql://postgres:postgres@localhost/corgi</code> <code>SECRET_KEY</code> Secret key for session security - <code>DEFAULT_MASTODON_INSTANCE</code> Default Mastodon instance <code>mastodon.social</code> <code>RECOMMENDATION_BLEND_RATIO</code> Ratio of recommendations to include (0-1) <code>0.3</code> <code>PROXY_TIMEOUT</code> Timeout for proxy requests in seconds <code>10</code> <code>DEBUG</code> Enable debug mode <code>false</code> <code>LOG_LEVEL</code> Logging level (DEBUG, INFO, WARNING, ERROR) <code>INFO</code>"},{"location":"concepts/self-hosting/#connecting-to-mastodon","title":"Connecting to Mastodon","text":"<p>For Corgi to function as a middleware, it needs to connect to one or more Mastodon instances:</p> <ol> <li>Create an application on your Mastodon instance to get API credentials</li> <li>Configure your Mastodon client to use your Corgi instance as the API endpoint</li> <li>Link accounts through the Corgi API</li> </ol> <p>See the Proxy Architecture documentation for more details.</p>"},{"location":"concepts/self-hosting/#scaling-considerations","title":"Scaling Considerations","text":""},{"location":"concepts/self-hosting/#memory-usage","title":"Memory Usage","text":"<p>Corgi's memory usage depends mainly on:</p> <ul> <li>Number of active users</li> <li>Complexity of user interest profiles</li> <li>Size of the recommendation corpus</li> </ul> <p>For production, we recommend at least: - 2GB RAM for up to 100 users - 4GB RAM for up to 500 users - 8GB+ RAM for 1000+ users</p>"},{"location":"concepts/self-hosting/#database-scaling","title":"Database Scaling","text":"<p>The recommendation engine relies heavily on database performance. For larger deployments:</p> <ul> <li>Use a dedicated PostgreSQL server</li> <li>Ensure adequate disk I/O</li> <li>Consider read replicas for analytics</li> </ul>"},{"location":"concepts/self-hosting/#securing-your-instance","title":"Securing Your Instance","text":"<ol> <li>Always use HTTPS - Run Corgi behind a reverse proxy like Nginx with SSL</li> <li>Set a strong SECRET_KEY - Don't use the default or example values</li> <li>Implement rate limiting - Protect your API endpoints from abuse</li> <li>Regular backups - Back up your database regularly</li> <li>Update frequently - Keep your Corgi instance updated with security patches</li> </ol>"},{"location":"concepts/self-hosting/#monitoring","title":"Monitoring","text":"<p>We recommend monitoring:</p> <ul> <li>Server metrics (CPU, memory, disk)</li> <li>Application logs for errors</li> <li>Database performance</li> <li>Request latency</li> </ul> <p>Prometheus and Grafana work well for monitoring Corgi deployments.</p>"},{"location":"concepts/self-hosting/#example-nginx-configuration","title":"Example Nginx Configuration","text":"<pre><code>server {\n    listen 443 ssl;\n    server_name api.yourdomain.com;\n\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"concepts/self-hosting/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Database connection errors</li> <li>Check your DATABASE_URL format</li> <li>Ensure the PostgreSQL server is running and accessible</li> <li> <p>Verify database user permissions</p> </li> <li> <p>High memory usage</p> </li> <li>Consider reducing the recommendation corpus size</li> <li>Adjust the <code>RECOMMENDATION_BATCH_SIZE</code> environment variable</li> <li> <p>Increase server resources</p> </li> <li> <p>Slow response times</p> </li> <li>Check Mastodon instance connectivity</li> <li>Increase <code>PROXY_TIMEOUT</code> if needed</li> <li>Monitor database query performance</li> <li>Consider caching frequently accessed data</li> </ol>"},{"location":"concepts/self-hosting/#community-support","title":"Community Support","text":"<p>If you're self-hosting Corgi and need help:</p> <ul> <li>Check our GitHub Issues</li> <li>Join our Mastodon community</li> <li>Contribute improvements back to the project</li> </ul>"},{"location":"endpoints/feedback/","title":"Feedback API","text":"<p>The Feedback API allows you to log user interactions with posts, which are essential for building personalized recommendations. These interactions shape the recommendation engine's understanding of user preferences.</p>"},{"location":"endpoints/feedback/#endpoints","title":"Endpoints","text":"POST /api/v1/interactions <p>Log a user interaction with a post. This endpoint records actions like favorites, bookmarks, or explicit feedback.</p> Request Body Parameter Type Required Description user_alias string Required Pseudonymized identifier for the user post_id string Required Unique identifier for the post action_type string Required The type of interaction: \"favorite\", \"bookmark\", \"reblog\", \"more_like_this\", \"less_like_this\" context object Optional Additional context about the interaction Example Request <pre><code>{\n  \"user_alias\": \"user_12345\",\n  \"post_id\": \"post_67890\",\n  \"action_type\": \"favorite\",\n  \"context\": {\n    \"source\": \"timeline_home\"\n  }\n}</code></pre> Response <p>Returns a confirmation with the logged interaction ID.</p> Example Response <pre><code>{\n  \"status\": \"ok\",\n  \"interaction_id\": \"interaction_12345\"\n}</code></pre> GET /api/v1/interactions/{post_id} <p>Get all interactions for a specific post.</p> Path Parameters Parameter Type Required Description post_id string Required The ID of the post to retrieve interactions for Response <p>Returns an object with the post ID and counts of different interaction types.</p> Example Response <pre><code>{\n  \"post_id\": \"post_67890\",\n  \"interaction_counts\": {\n    \"favorites\": 42,\n    \"reblogs\": 12,\n    \"replies\": 8,\n    \"bookmarks\": 5\n  },\n  \"interactions\": [\n    {\n      \"action_type\": \"favorite\",\n      \"count\": 42\n    },\n    {\n      \"action_type\": \"reblog\",\n      \"count\": 12\n    },\n    {\n      \"action_type\": \"bookmark\",\n      \"count\": 5\n    }\n  ]\n}</code></pre> POST /api/v1/interactions/counts/batch <p>Get interaction counts for multiple posts in a single request.</p> Request Body Parameter Type Required Description post_ids array Required Array of post IDs to get counts for Example Request <pre><code>{\n  \"post_ids\": [\"post_12345\", \"post_67890\", \"post_24680\"]\n}</code></pre> Response <p>Returns an object with counts for each requested post ID.</p> Example Response <pre><code>{\n  \"counts\": {\n    \"post_12345\": {\n      \"favorites\": 27,\n      \"reblogs\": 8,\n      \"replies\": 4,\n      \"bookmarks\": 2\n    },\n    \"post_67890\": {\n      \"favorites\": 42,\n      \"reblogs\": 12,\n      \"replies\": 8,\n      \"bookmarks\": 5\n    },\n    \"post_24680\": {\n      \"favorites\": 15,\n      \"reblogs\": 3,\n      \"replies\": 1,\n      \"bookmarks\": 0\n    }\n  }\n}</code></pre> GET /api/v1/interactions/user/{user_id} <p>Get all interactions for a specific user.</p> Path Parameters Parameter Type Required Description user_id string Required The ID of the user to retrieve interactions for Query Parameters Parameter Type Default Description limit integer 50 Maximum number of interactions to return Response <p>Returns an object with the user ID and list of interactions.</p> Example Response <pre><code>{\n  \"user_id\": \"user_12345\",\n  \"interactions\": [\n    {\n      \"id\": \"interaction_98765\",\n      \"post_id\": \"post_67890\",\n      \"action_type\": \"favorite\",\n      \"created_at\": \"2025-03-15T14:30:00.000Z\",\n      \"context\": {\n        \"source\": \"timeline_home\"\n      }\n    },\n    {\n      \"id\": \"interaction_98764\",\n      \"post_id\": \"post_13579\",\n      \"action_type\": \"bookmark\",\n      \"created_at\": \"2025-03-15T13:45:00.000Z\",\n      \"context\": {\n        \"source\": \"timeline_public\"\n      }\n    }\n  ]\n}</code></pre> GET /api/v1/interactions/favourites <p>Get all posts favorited by a specific user.</p> Query Parameters Parameter Type Default Description user_id string null The ID of the user to retrieve favorites for Required limit integer 20 Maximum number of favorites to return Response <p>Returns an object with the user ID and list of favorited posts.</p> Example Response <pre><code>{\n  \"user_id\": \"user_12345\",\n  \"favorites\": [\n    {\n      \"id\": \"post_67890\",\n      \"content\": \"<p>Just published a new blog post about sustainable tech!</p>\",\n      \"created_at\": \"2025-03-15T14:22:11.000Z\",\n      \"account\": {\n        \"id\": \"12345\",\n        \"username\": \"techblogger\",\n        \"display_name\": \"Tech Sustainability Blog\"\n      },\n      \"favorited_at\": \"2025-03-15T14:30:00.000Z\"\n    },\n    {\n      \"id\": \"post_13579\",\n      \"content\": \"<p>Check out our latest open source contribution to the Fediverse!</p>\",\n      \"created_at\": \"2025-03-15T13:45:22.000Z\",\n      \"account\": {\n        \"id\": \"67890\",\n        \"username\": \"fediversedev\",\n        \"display_name\": \"Fediverse Developers\"\n      },\n      \"favorited_at\": \"2025-03-15T13:50:00.000Z\"\n    }\n  ]\n}</code></pre>"},{"location":"endpoints/feedback/#interaction-types","title":"Interaction Types","text":"<p>The feedback API supports these interaction types:</p> Type Description Impact on Recommendations <code>favorite</code> User favorites/likes a post Strong positive signal <code>bookmark</code> User bookmarks a post Strong positive signal <code>reblog</code> User boosts/reblogs a post Medium positive signal <code>more_like_this</code> User explicitly requests similar content Very strong positive signal <code>less_like_this</code> User explicitly requests less similar content Strong negative signal"},{"location":"endpoints/feedback/#context-object","title":"Context Object","text":"<p>The optional <code>context</code> object provides additional information about the interaction:</p> <pre><code>{\n  \"context\": {\n    \"source\": \"timeline_home\",  // Where the interaction occurred\n    \"position\": 3,              // Position in the timeline\n    \"session_id\": \"abc123\",     // Tracks interactions in a single session\n    \"recommendation\": true      // Whether this was a recommended post\n  }\n}\n</code></pre> <p>Common source values: - <code>timeline_home</code> - Regular home timeline - <code>timeline_recommended</code> - Recommended timeline - <code>timeline_public</code> - Public timeline - <code>profile</code> - User profile view - <code>search</code> - Search results</p>"},{"location":"endpoints/feedback/#bulk-logging","title":"Bulk Logging","text":"<p>For efficient logging of multiple interactions, you can use the batch endpoint:</p> POST /api/v1/interactions/batch <p>Log multiple user interactions in a single request.</p> Request Body Example Request <pre><code>{\n  \"user_alias\": \"user_12345\",\n  \"interactions\": [\n    {\n      \"post_id\": \"post_67890\",\n      \"action_type\": \"favorite\",\n      \"created_at\": \"2025-03-15T14:30:00.000Z\",\n      \"context\": {\n        \"source\": \"timeline_home\"\n      }\n    },\n    {\n      \"post_id\": \"post_13579\",\n      \"action_type\": \"bookmark\",\n      \"created_at\": \"2025-03-15T13:45:00.000Z\",\n      \"context\": {\n        \"source\": \"timeline_recommended\"\n      }\n    }\n  ]\n}</code></pre> Response Example Response <pre><code>{\n  \"status\": \"ok\",\n  \"processed\": 2,\n  \"interaction_ids\": [\n    \"interaction_98765\",\n    \"interaction_98764\"\n  ]\n}</code></pre>"},{"location":"endpoints/feedback/#privacy-considerations","title":"Privacy Considerations","text":"<p>The Feedback API respects user privacy settings:</p> <ul> <li>For users with <code>full</code> tracking level, all interactions are stored and used for recommendations</li> <li>For users with <code>limited</code> tracking level, only aggregated interaction data is stored</li> <li>For users with <code>none</code> tracking level, interaction logging requests are still accepted, but data is discarded</li> </ul>      Privacy Impact    <p>When logging interactions, always make sure your users understand how this data is being used. Provide clear privacy settings and respect user choices about data collection.</p>"},{"location":"endpoints/feedback/#client-integration-example","title":"Client Integration Example","text":"<p>Here's an example of integrating the Feedback API in a client application:</p> <pre><code>// Set up interaction logger\nclass InteractionLogger {\n  constructor(apiKey, userId) {\n    this.apiKey = apiKey;\n    this.userId = userId;\n    this.queue = [];\n    this.processingInterval = 5000; // Process every 5 seconds\n\n    // Start processing queue periodically\n    setInterval(() =&gt; this.processQueue(), this.processingInterval);\n  }\n\n  // Log a single interaction\n  async logInteraction(postId, actionType, context = {}) {\n    // Add to queue\n    this.queue.push({\n      post_id: postId,\n      action_type: actionType,\n      context: {\n        ...context,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n    // If queue is getting large, process immediately\n    if (this.queue.length &gt;= 10) {\n      this.processQueue();\n    }\n  }\n\n  // Process the queue in batch\n  async processQueue() {\n    if (this.queue.length === 0) return;\n\n    const interactions = [...this.queue];\n    this.queue = [];\n\n    try {\n      // For single interaction\n      if (interactions.length === 1) {\n        const interaction = interactions[0];\n        await fetch('https://api.corgi-recs.io/api/v1/interactions', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${this.apiKey}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_alias: this.userId,\n            post_id: interaction.post_id,\n            action_type: interaction.action_type,\n            context: interaction.context\n          })\n        });\n      } \n      // For multiple interactions\n      else {\n        await fetch('https://api.corgi-recs.io/api/v1/interactions/batch', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${this.apiKey}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_alias: this.userId,\n            interactions: interactions\n          })\n        });\n      }\n    } catch (error) {\n      console.error('Failed to log interactions:', error);\n\n      // Re-add to queue on failure\n      this.queue = [...interactions, ...this.queue].slice(0, 100);\n    }\n  }\n}\n\n// Usage\nconst logger = new InteractionLogger('YOUR_API_KEY', 'user_12345');\n\n// Log interactions\ndocument.querySelectorAll('.post').forEach(post =&gt; {\n  // Favorite button\n  post.querySelector('.favorite-button').addEventListener('click', () =&gt; {\n    const postId = post.dataset.postId;\n    logger.logInteraction(postId, 'favorite', { \n      source: 'timeline_home',\n      position: Array.from(post.parentNode.children).indexOf(post)\n    });\n  });\n\n  // Bookmark button\n  post.querySelector('.bookmark-button').addEventListener('click', () =&gt; {\n    const postId = post.dataset.postId;\n    logger.logInteraction(postId, 'bookmark', { \n      source: 'timeline_home',\n      position: Array.from(post.parentNode.children).indexOf(post)\n    });\n  });\n});\n</code></pre>"},{"location":"endpoints/feedback/#related-resources","title":"Related Resources","text":"<ul> <li>Privacy API - Manage user privacy settings</li> <li>Recommendations API - Retrieve personalized recommendations</li> <li>Concepts: Recommendation Engine - Learn how user feedback informs recommendations</li> </ul>"},{"location":"endpoints/interactions/","title":"Interactions API","text":"<p>The Interactions API lets you record and retrieve user engagement with posts. These interactions power Corgi's recommendation engine, building a personalized preference profile for each user while respecting privacy settings.</p>"},{"location":"endpoints/interactions/#interaction-data-flow","title":"Interaction Data Flow","text":"<pre><code>flowchart LR\n    A[User Action] --&gt;|Captured| B[Client App]\n    B --&gt;|POST /interactions| C[Corgi API]\n    C --&gt;|Process| D{Privacy Level}\n    D --&gt;|Full| E[Store Complete Data]\n    D --&gt;|Limited| F[Store Aggregated Data]\n    D --&gt;|None| G[No Storage]\n    E --&gt; H[Recommendation Engine]\n    F --&gt; H\n    G --&gt; I[Cold Start Content]\n    H --&gt; J[Personalized Content]\n    J --&gt; K[Timeline]\n    I --&gt; K</code></pre> <p>The diagram above illustrates how user interactions flow through the Corgi system:</p> <ol> <li>User interactions (favorites, reblogs, etc.) are captured by the client application</li> <li>The client sends these interactions to the Corgi API</li> <li>Interactions are processed according to the user's privacy settings</li> <li>Depending on privacy level, different amounts of data are stored</li> <li>The recommendation engine uses this data to generate personalized content</li> <li>Users with no stored interaction data receive cold start recommendations</li> </ol>"},{"location":"endpoints/interactions/#endpoints","title":"Endpoints","text":"POST /api/v1/interactions <p>Records a user interaction with a post. Each interaction helps refine the recommendation engine's understanding of user preferences.</p> Request Body Parameter Type Required Description user_alias string Required User identifier (pseudonymized for privacy). Example: <code>u_8f7d6e5c4b3a2190</code> post_id string Required ID of the post being interacted with. Example: <code>109876543211234567</code> action_type string Required Type of interaction. Must be one of: <code>favorite</code>, <code>reblog</code>, <code>bookmark</code>, <code>more_like_this</code>, <code>less_like_this</code>, <code>click</code>, <code>view</code>, <code>hide</code> context object Optional Additional information about the interaction context context.source string Optional Where the interaction occurred. Examples: <code>timeline_home</code>, <code>timeline_public</code>, <code>profile</code>, <code>search</code> context.recommended boolean Optional Whether the post was a recommendation (default: false) Code Examples      === \"curl\"          <pre><code># Track a user favorite interaction\ncurl -X POST \"https://api.corgi-recs.io/api/v1/interactions\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"user_alias\": \"u_8f7d6e5c4b3a2190\",\n    \"post_id\": \"109876543211234567\",\n    \"action_type\": \"favorite\",\n    \"context\": {\n      \"source\": \"timeline_home\",\n      \"recommended\": true\n    }\n  }'\n\n# Track explicit feedback for recommendations\ncurl -X POST \"https://api.corgi-recs.io/api/v1/interactions\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"user_alias\": \"u_8f7d6e5c4b3a2190\",\n    \"post_id\": \"109876543211234567\",\n    \"action_type\": \"more_like_this\",\n    \"context\": {\n      \"source\": \"recommended_timeline\"\n    }\n  }'\n</code></pre>      === \"Python\"          <pre><code>import requests\n\ndef log_interaction(user_alias, post_id, action_type, api_key, context=None):\n    \"\"\"\n    Log a user interaction with a post\n\n    action_type: One of 'favorite', 'reblog', 'bookmark', \n                'more_like_this', 'less_like_this', 'click', 'view', 'hide'\n    \"\"\"\n    url = \"https://api.corgi-recs.io/api/v1/interactions\"\n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Prepare the request body\n    data = {\n        \"user_alias\": user_alias,\n        \"post_id\": post_id,\n        \"action_type\": action_type\n    }\n\n    # Add context if provided\n    if context:\n        data[\"context\"] = context\n\n    # Send the request\n    response = requests.post(url, json=data, headers=headers)\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(f\"Error: {response.status_code}\")\n        print(response.text)\n        return None\n\n# Example usage\napi_key = \"YOUR_API_KEY\"\n\n# Log a favorite\nlog_interaction(\n    user_alias=\"u_8f7d6e5c4b3a2190\",\n    post_id=\"109876543211234567\",\n    action_type=\"favorite\",\n    api_key=api_key,\n    context={\n        \"source\": \"timeline_home\",\n        \"recommended\": True\n    }\n)\n\n# Log explicit feedback\nlog_interaction(\n    user_alias=\"u_8f7d6e5c4b3a2190\",\n    post_id=\"109876543211234567\",\n    action_type=\"more_like_this\",\n    api_key=api_key,\n    context={\"source\": \"recommended_timeline\"}\n)\n</code></pre>      === \"JavaScript\"          <pre><code>async function logInteraction(userAlias, postId, actionType, apiKey, context = null) {\n  /**\n   * Log a user interaction with a post\n   * \n   * @param {string} userAlias - The pseudonymized user ID\n   * @param {string} postId - The Mastodon post ID\n   * @param {string} actionType - One of: favorite, reblog, bookmark, more_like_this, less_like_this, click, view, hide\n   * @param {string} apiKey - Your Corgi API key\n   * @param {object} context - Additional context about the interaction (optional)\n   */\n  const url = \"https://api.corgi-recs.io/api/v1/interactions\";\n\n  // Prepare the request body\n  const data = {\n    user_alias: userAlias,\n    post_id: postId,\n    action_type: actionType\n  };\n\n  // Add context if provided\n  if (context) {\n    data.context = context;\n  }\n\n  // Send the request\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${apiKey}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n\n  if (response.ok) {\n    return await response.json();\n  } else {\n    console.error(`Error ${response.status}: ${response.statusText}`);\n    return null;\n  }\n}\n\n// Example usage\nconst apiKey = \"YOUR_API_KEY\";\n\n// Log a favorite\nlogInteraction(\n  \"u_8f7d6e5c4b3a2190\",\n  \"109876543211234567\",\n  \"favorite\",\n  apiKey,\n  {\n    source: \"timeline_home\",\n    recommended: true\n  }\n);\n\n// Log explicit feedback\nlogInteraction(\n  \"u_8f7d6e5c4b3a2190\",\n  \"109876543211234567\",\n  \"more_like_this\",\n  apiKey,\n  {source: \"recommended_timeline\"}\n);\n</code></pre> Response <p>Returns a confirmation of the logged interaction.</p> Example Response <pre><code>{\n  \"status\": \"success\",\n  \"interaction_id\": \"int_7a6b5c4d3e2f1098\",\n  \"user_alias\": \"u_8f7d6e5c4b3a2190\",\n  \"post_id\": \"109876543211234567\",\n  \"action_type\": \"favorite\",\n  \"timestamp\": \"2025-03-15T14:22:11.000Z\",\n  \"privacy_level\": \"pseudonymized\"\n}</code></pre> GET /api/v1/interactions/{post_id} <p>Retrieves interaction statistics for a specific post. This is useful for understanding engagement metrics.</p> Path Parameters Parameter Type Description post_id string ID of the post to get interaction statistics for. Example: <code>109876543211234567</code> Code Examples      === \"curl\"          <pre><code># Get interaction stats for a post\ncurl -X GET \"https://api.corgi-recs.io/api/v1/interactions/109876543211234567\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n</code></pre>      === \"Python\"          <pre><code>import requests\n\ndef get_post_interactions(post_id, api_key):\n    \"\"\"Get interaction statistics for a post\"\"\"\n    url = f\"https://api.corgi-recs.io/api/v1/interactions/{post_id}\"\n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\"\n    }\n\n    response = requests.get(url, headers=headers)\n\n    if response.status_code == 200:\n        stats = response.json()\n        print(f\"Post has {stats['interaction_counts']['favorites']} favorites\")\n        return stats\n    else:\n        print(f\"Error: {response.status_code}\")\n        return None\n\n# Example usage\napi_key = \"YOUR_API_KEY\"\npost_stats = get_post_interactions(\"109876543211234567\", api_key)\n</code></pre>      === \"JavaScript\"          <pre><code>async function getPostInteractions(postId, apiKey) {\n  /**\n   * Get interaction statistics for a post\n   * \n   * @param {string} postId - The Mastodon post ID\n   * @param {string} apiKey - Your Corgi API key\n   */\n  const url = `https://api.corgi-recs.io/api/v1/interactions/${postId}`;\n\n  const response = await fetch(url, {\n    headers: {\n      \"Authorization\": `Bearer ${apiKey}`\n    }\n  });\n\n  if (response.ok) {\n    const stats = await response.json();\n    console.log(`Post has ${stats.interaction_counts.favorites} favorites`);\n    return stats;\n  } else {\n    console.error(`Error ${response.status}: ${response.statusText}`);\n    return null;\n  }\n}\n\n// Example usage\nconst apiKey = \"YOUR_API_KEY\";\nconst postStats = await getPostInteractions(\"109876543211234567\", apiKey);\n</code></pre> Response <p>Returns statistics about interactions with the specified post.</p> Example Response <pre><code>{\n  \"post_id\": \"109876543211234567\",\n  \"interaction_counts\": {\n    \"favorites\": 42,\n    \"reblogs\": 12,\n    \"replies\": 7,\n    \"bookmarks\": 5,\n    \"more_like_this\": 3,\n    \"less_like_this\": 1,\n    \"clicks\": 18,\n    \"views\": 208\n  },\n  \"interactions\": [\n    {\n      \"action_type\": \"favorite\",\n      \"count\": 42\n    },\n    {\n      \"action_type\": \"reblog\",\n      \"count\": 12\n    },\n    {\n      \"action_type\": \"bookmark\",\n      \"count\": 5\n    },\n    {\n      \"action_type\": \"more_like_this\",\n      \"count\": 3\n    },\n    {\n      \"action_type\": \"less_like_this\",\n      \"count\": 1\n    }\n  ],\n  \"engagement_rate\": 0.37,\n  \"last_interaction\": \"2025-03-15T22:14:53.000Z\"\n}</code></pre> GET /api/v1/interactions/user/{user_alias} <p>Retrieves a user's recent interactions. This provides insight into a user's engagement patterns.</p> Path Parameters Parameter Type Description user_alias string Pseudonymized user ID. Example: <code>u_8f7d6e5c4b3a2190</code> Query Parameters Parameter Type Default Description limit integer 20 Maximum number of interactions to return (max: 100). Example: <code>50</code> action_type string null Filter by interaction type. Example: <code>favorite</code> since string null Return interactions after this ISO timestamp. Example: <code>2025-03-01T00:00:00Z</code> Response <p>Returns a list of user interactions.</p> Example Response <pre><code>{\n  \"user_alias\": \"u_8f7d6e5c4b3a2190\",\n  \"total_count\": 142,\n  \"returned_count\": 20,\n  \"interactions\": [\n    {\n      \"interaction_id\": \"int_7a6b5c4d3e2f1098\",\n      \"post_id\": \"109876543211234567\",\n      \"action_type\": \"favorite\",\n      \"timestamp\": \"2025-03-15T14:22:11.000Z\",\n      \"context\": {\n        \"source\": \"timeline_home\",\n        \"recommended\": true\n      }\n    },\n    {\n      \"interaction_id\": \"int_0f1e2d3c4b5a6789\",\n      \"post_id\": \"109876123456789012\",\n      \"action_type\": \"reblog\",\n      \"timestamp\": \"2025-03-15T13:52:08.000Z\",\n      \"context\": {\n        \"source\": \"profile\"\n      }\n    },\n    {\n      \"interaction_id\": \"int_b0a9c8d7e6f5abcd\",\n      \"post_id\": \"109875567890123456\",\n      \"action_type\": \"more_like_this\",\n      \"timestamp\": \"2025-03-15T12:30:45.000Z\",\n      \"context\": {\n        \"source\": \"recommended_timeline\"\n      }\n    }\n    // Additional interactions omitted for brevity\n  ]\n}</code></pre>"},{"location":"endpoints/interactions/#interaction-types","title":"Interaction Types","text":"<p>Corgi tracks these interaction types:</p> Type Description Effect on Recommendations <code>favorite</code> User favorites/likes a post Strong positive signal <code>reblog</code> User boosts/reblogs a post Strong positive signal <code>bookmark</code> User bookmarks a post Medium positive signal <code>more_like_this</code> User explicitly requests similar content Very strong positive signal <code>less_like_this</code> User explicitly requests less similar content Strong negative signal <code>click</code> User clicks on a post or link Weak positive signal <code>view</code> User views post details Neutral signal <code>hide</code> User hides or dismisses content Weak negative signal"},{"location":"endpoints/interactions/#privacy-considerations","title":"Privacy Considerations","text":"Privacy by Design    <p>All user identifiers are pseudonymized using a one-way hash before storage. The level of interaction data stored depends on the user's privacy settings:</p> <ul> <li>Full: All interactions are stored (most personalized)</li> <li>Limited: Only aggregated interaction counts are stored</li> <li>None: No interaction data is stored (no personalization)</li> </ul>"},{"location":"endpoints/interactions/#interaction-privacy-processing","title":"Interaction Privacy Processing","text":"<pre><code>flowchart TD\n    A[User Interaction] --&gt; B[Pseudonymize User ID]\n    B --&gt; C{Check Privacy Setting}\n    C --&gt;|Full| D[Store Complete Data&lt;br&gt;- User Alias&lt;br&gt;- Post ID&lt;br&gt;- Action Type&lt;br&gt;- Timestamp&lt;br&gt;- Context]\n    C --&gt;|Limited| E[Store Aggregated Data&lt;br&gt;- Post ID&lt;br&gt;- Action Type Count&lt;br&gt;- General Statistics]\n    C --&gt;|None| F[No Data Storage&lt;br&gt;Cold Start Only]\n    D --&gt; G[Run Through&lt;br&gt;Recommendation Algorithm]\n    E --&gt; G\n    F --&gt; H[Use Global&lt;br&gt;Popularity Metrics]\n    G --&gt; I[Personalized&lt;br&gt;Recommendations]\n    H --&gt; J[Non-personalized&lt;br&gt;Recommendations]</code></pre> <p>The diagram above illustrates how Corgi processes interaction data with privacy in mind:</p> <ol> <li>Pseudonymization: All user IDs are converted to aliases using a one-way hash</li> <li>Privacy-Based Processing:</li> <li>Full privacy: Stores detailed data for maximum personalization</li> <li>Limited privacy: Stores only aggregated statistics</li> <li>None: Stores no user-specific data</li> <li>Recommendation Generation: </li> <li>Personalized recommendations use the processed data according to privacy level</li> <li>Users with no stored data receive non-personalized, popularity-based content</li> </ol>"},{"location":"endpoints/interactions/#integration-examples","title":"Integration Examples","text":""},{"location":"endpoints/interactions/#client-integration-architecture","title":"Client Integration Architecture","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Client as Client App\n    participant Mastodon as Mastodon API\n    participant Corgi as Corgi API\n\n    User-&gt;&gt;Client: Favorite post\n    Client-&gt;&gt;Mastodon: POST /api/v1/statuses/:id/favourite\n    Mastodon--&gt;&gt;Client: Status updated\n    Client-&gt;&gt;Corgi: POST /api/v1/interactions\n    Note over Client,Corgi: {user_alias, post_id, action_type: \"favorite\"}\n    Corgi--&gt;&gt;Client: Interaction logged\n    Client-&gt;&gt;User: Update UI\n\n    User-&gt;&gt;Client: Click \"More like this\"\n    Client-&gt;&gt;Corgi: POST /api/v1/interactions\n    Note over Client,Corgi: {user_alias, post_id, action_type: \"more_like_this\"}\n    Corgi--&gt;&gt;Client: Interaction logged\n    Client-&gt;&gt;Corgi: GET /api/v1/recommendations\n    Corgi--&gt;&gt;Client: Similar content\n    Client-&gt;&gt;User: Show recommendations</code></pre> <p>The sequence diagram above shows the typical flow between a client application, the Mastodon API, and the Corgi API:</p> <ol> <li>When a user interacts with a post (like favoriting it), the client app first updates the Mastodon API</li> <li>Then, the client logs this interaction with the Corgi API</li> <li>For explicit feedback like \"More like this\", the client logs this with Corgi and can immediately request recommendations</li> <li>The user's privacy settings determine how this data is processed behind the scenes</li> </ol>"},{"location":"endpoints/interactions/#tracking-favorites-in-a-client-app","title":"Tracking Favorites in a Client App","text":"<pre><code>// Event listener for favorite button\ndocument.querySelectorAll('.favorite-button').forEach(button =&gt; {\n  button.addEventListener('click', async (event) =&gt; {\n    const postId = event.target.dataset.postId;\n    const isRecommendation = event.target.dataset.isRecommendation === 'true';\n\n    // Call Mastodon API to favorite the post\n    await mastodonApi.favorite(postId);\n\n    // Log the interaction with Corgi\n    await logInteraction(\n      userId,\n      postId,\n      'favorite',\n      apiKey,\n      {\n        source: 'timeline_home',\n        recommended: isRecommendation\n      }\n    );\n  });\n});\n</code></pre>"},{"location":"endpoints/interactions/#using-explicit-feedback-buttons","title":"Using Explicit Feedback Buttons","text":"<pre><code>&lt;div class=\"recommendation-feedback\"&gt;\n  &lt;button class=\"more-button\" data-post-id=\"109876543211234567\"&gt;\n    More like this\n  &lt;/button&gt;\n  &lt;button class=\"less-button\" data-post-id=\"109876543211234567\"&gt;\n    Less like this\n  &lt;/button&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n  // Event listeners for feedback buttons\n  document.querySelectorAll('.more-button').forEach(button =&gt; {\n    button.addEventListener('click', async (event) =&gt; {\n      const postId = event.target.dataset.postId;\n\n      // Log positive feedback\n      await logInteraction(\n        userId,\n        postId,\n        'more_like_this',\n        apiKey,\n        {source: 'recommended_timeline'}\n      );\n\n      showFeedbackConfirmation('Thanks! We'll show more content like this.');\n    });\n  });\n\n  document.querySelectorAll('.less-button').forEach(button =&gt; {\n    button.addEventListener('click', async (event) =&gt; {\n      const postId = event.target.dataset.postId;\n\n      // Log negative feedback\n      await logInteraction(\n        userId,\n        postId,\n        'less_like_this',\n        apiKey,\n        {source: 'recommended_timeline'}\n      );\n\n      showFeedbackConfirmation('Got it! We'll show less content like this.');\n    });\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"endpoints/interactions/#related-resources","title":"Related Resources","text":"<ul> <li>Privacy API - Set user privacy levels and manage data</li> <li>Recommendations API - Get personalized content recommendations</li> <li>Concepts: Privacy Design - Learn about Corgi's privacy architecture</li> </ul>"},{"location":"endpoints/posts/","title":"Posts API","text":"<p>The Posts API provides endpoints for managing and retrieving posts within the Corgi Recommender Service. These endpoints allow you to access posts in a Mastodon-compatible format.</p>"},{"location":"endpoints/posts/#endpoints","title":"Endpoints","text":""},{"location":"endpoints/posts/#get-posts-list","title":"Get Posts List","text":"<pre><code>GET /api/v1/posts\n</code></pre> <p>Retrieves a list of posts with optional filtering.</p>"},{"location":"endpoints/posts/#parameters","title":"Parameters","text":"Name Type In Description <code>limit</code> integer query Maximum number of posts to return (default: 100)"},{"location":"endpoints/posts/#response","title":"Response","text":"<pre><code>[\n  {\n    \"id\": \"post_12345\",\n    \"content\": \"&lt;p&gt;This is a post about corgis!&lt;/p&gt;\",\n    \"created_at\": \"2025-03-15T14:30:00Z\",\n    \"account\": {\n      \"id\": \"user_789\",\n      \"username\": \"corgi_lover\",\n      \"display_name\": \"Corgi Enthusiast\"\n    },\n    \"favourites_count\": 42,\n    \"reblogs_count\": 12,\n    \"replies_count\": 5\n  },\n  // More posts...\n]\n</code></pre>"},{"location":"endpoints/posts/#create-or-update-post","title":"Create or Update Post","text":"<pre><code>POST /api/v1/posts\n</code></pre> <p>Creates a new post or updates an existing one.</p>"},{"location":"endpoints/posts/#request-body","title":"Request Body","text":"<pre><code>{\n  \"content\": \"&lt;p&gt;Just added a new post about corgis!&lt;/p&gt;\",\n  \"author_id\": \"user_789\",\n  \"author_name\": \"corgi_lover\",\n  \"language\": \"en\",\n  \"tags\": [\"corgi\", \"dogs\", \"pets\"],\n  \"sensitive\": false\n}\n</code></pre>"},{"location":"endpoints/posts/#response-new-post","title":"Response (New Post)","text":"<pre><code>{\n  \"post_id\": \"post_12345\",\n  \"status\": \"created\"\n}\n</code></pre>"},{"location":"endpoints/posts/#response-updated-post","title":"Response (Updated Post)","text":"<pre><code>{\n  \"post_id\": \"post_12345\",\n  \"status\": \"updated\"\n}\n</code></pre>"},{"location":"endpoints/posts/#get-specific-post","title":"Get Specific Post","text":"<pre><code>GET /api/v1/posts/{post_id}\n</code></pre> <p>Retrieves a single post by its unique identifier.</p>"},{"location":"endpoints/posts/#parameters_1","title":"Parameters","text":"Name Type In Description <code>post_id</code> string path The ID of the post to retrieve"},{"location":"endpoints/posts/#response_1","title":"Response","text":"<pre><code>{\n  \"id\": \"post_12345\",\n  \"content\": \"&lt;p&gt;This is a post about corgis!&lt;/p&gt;\",\n  \"created_at\": \"2025-03-15T14:30:00Z\",\n  \"account\": {\n    \"id\": \"user_789\",\n    \"username\": \"corgi_lover\",\n    \"display_name\": \"Corgi Enthusiast\"\n  },\n  \"favourites_count\": 42,\n  \"reblogs_count\": 12,\n  \"replies_count\": 5,\n  \"language\": \"en\",\n  \"tags\": [\"corgi\", \"dogs\", \"pets\"],\n  \"sensitive\": false\n}\n</code></pre>"},{"location":"endpoints/posts/#get-posts-by-author","title":"Get Posts by Author","text":"<pre><code>GET /api/v1/posts/author/{author_id}\n</code></pre> <p>Retrieves all posts created by a single author.</p>"},{"location":"endpoints/posts/#parameters_2","title":"Parameters","text":"Name Type In Description <code>author_id</code> string path The ID of the author to retrieve posts for <code>limit</code> integer query Maximum number of posts to return (default: 20)"},{"location":"endpoints/posts/#response_2","title":"Response","text":"<pre><code>[\n  {\n    \"id\": \"post_12345\",\n    \"content\": \"&lt;p&gt;This is a post about corgis!&lt;/p&gt;\",\n    \"created_at\": \"2025-03-15T14:30:00Z\",\n    \"account\": {\n      \"id\": \"user_789\",\n      \"username\": \"corgi_lover\",\n      \"display_name\": \"Corgi Enthusiast\"\n    },\n    \"favourites_count\": 42,\n    \"reblogs_count\": 12,\n    \"replies_count\": 5\n  },\n  // More posts by this author...\n]\n</code></pre>"},{"location":"endpoints/posts/#get-trending-posts","title":"Get Trending Posts","text":"<pre><code>GET /api/v1/posts/trending\n</code></pre> <p>Retrieves posts with the highest interaction counts.</p>"},{"location":"endpoints/posts/#parameters_3","title":"Parameters","text":"Name Type In Description <code>limit</code> integer query Maximum number of posts to return (default: 10)"},{"location":"endpoints/posts/#response_3","title":"Response","text":"<pre><code>[\n  {\n    \"id\": \"post_56789\",\n    \"content\": \"&lt;p&gt;This trending post about corgis has lots of interactions!&lt;/p&gt;\",\n    \"created_at\": \"2025-03-14T09:15:00Z\",\n    \"account\": {\n      \"id\": \"user_123\",\n      \"username\": \"corgi_expert\",\n      \"display_name\": \"Corgi Expert\"\n    },\n    \"favourites_count\": 250,\n    \"reblogs_count\": 75,\n    \"replies_count\": 42\n  },\n  // More trending posts...\n]\n</code></pre>"},{"location":"endpoints/posts/#post-object","title":"Post Object","text":"<p>Posts are returned in a Mastodon-compatible format with these fields:</p> Field Type Description <code>id</code> string Unique identifier for the post <code>content</code> string HTML content of the post <code>created_at</code> string Creation timestamp in ISO 8601 format <code>account</code> object Author information including id, username, and display_name <code>favourites_count</code> integer Number of favorites for this post <code>reblogs_count</code> integer Number of reblogs of this post <code>replies_count</code> integer Number of replies to this post <code>language</code> string ISO language code (e.g., \"en\") <code>tags</code> array Hashtags associated with the post <code>sensitive</code> boolean Whether the post contains sensitive content <code>ranking_score</code> number Recommendation ranking score (0.0 to 1.0) <code>is_real_mastodon_post</code> boolean Whether this is a real Mastodon post (vs synthetic) <code>is_synthetic</code> boolean Whether this is a synthetic/generated post"},{"location":"endpoints/posts/#usage-examples","title":"Usage Examples","text":""},{"location":"endpoints/posts/#javascript","title":"JavaScript","text":"<pre><code>// Get trending posts\nfetch('http://api.example.com/api/v1/posts/trending?limit=5')\n  .then(response =&gt; response.json())\n  .then(posts =&gt; console.log(posts));\n\n// Get posts by a specific author\nfetch('http://api.example.com/api/v1/posts/author/user_789')\n  .then(response =&gt; response.json())\n  .then(posts =&gt; console.log(posts));\n\n// Create a new post\nfetch('http://api.example.com/api/v1/posts', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_TOKEN'\n  },\n  body: JSON.stringify({\n    content: '&lt;p&gt;New post about corgis!&lt;/p&gt;',\n    author_id: 'user_789',\n    author_name: 'corgi_lover',\n    language: 'en',\n    tags: ['corgi', 'dogs']\n  })\n})\n.then(response =&gt; response.json())\n.then(result =&gt; console.log(result));\n</code></pre>"},{"location":"endpoints/posts/#python","title":"Python","text":"<pre><code>import requests\n\n# Get trending posts\nresponse = requests.get(\n    'http://api.example.com/api/v1/posts/trending',\n    params={'limit': 5}\n)\ntrending_posts = response.json()\n\n# Get a specific post\nresponse = requests.get(\n    'http://api.example.com/api/v1/posts/post_12345'\n)\npost = response.json()\n\n# Create a new post\nresponse = requests.post(\n    'http://api.example.com/api/v1/posts',\n    headers={\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer YOUR_TOKEN'\n    },\n    json={\n        'content': '&lt;p&gt;New post about corgis!&lt;/p&gt;',\n        'author_id': 'user_789',\n        'author_name': 'corgi_lover',\n        'language': 'en',\n        'tags': ['corgi', 'dogs']\n    }\n)\nresult = response.json()\n</code></pre>"},{"location":"endpoints/privacy/","title":"Privacy API","text":"<p>The Privacy API allows users to control how much data is collected and used for personalization. It provides endpoints for viewing and updating privacy settings, giving users control over their recommendation experience.</p>"},{"location":"endpoints/privacy/#endpoints","title":"Endpoints","text":"GET /api/v1/privacy <p>Retrieves the current privacy settings for a user.</p> Query Parameters Parameter Type Default Description user_id string null The user ID to get privacy settings for Required Response <p>Returns the user's current privacy settings.</p> Example Response <pre><code>{\n  \"user_id\": \"user_12345\",\n  \"tracking_level\": \"limited\",\n  \"created_at\": \"2025-02-10T12:00:00.000Z\",\n  \"updated_at\": \"2025-03-15T09:30:00.000Z\"\n}</code></pre> POST /api/v1/privacy <p>Updates a user's privacy settings, controlling how much data is collected and how it's used for recommendations.</p> Request Body Parameter Type Required Description user_id string Required The user ID to update privacy settings for tracking_level string Required Privacy level: \"full\", \"limited\", or \"none\" Example Request <pre><code>{\n  \"user_id\": \"user_12345\",\n  \"tracking_level\": \"full\"\n}</code></pre> Response <p>Returns the updated privacy settings.</p> Example Response <pre><code>{\n  \"user_id\": \"user_12345\",\n  \"tracking_level\": \"full\",\n  \"status\": \"ok\",\n  \"updated_at\": \"2025-03-15T14:45:00.000Z\"\n}</code></pre> GET /api/v1/privacy/data <p>Retrieves all data collected for a user, providing transparency about what's being stored.</p> Query Parameters Parameter Type Default Description user_id string null The user ID to get data for Required format string \"json\" Response format: \"json\" or \"csv\" Response <p>Returns all data stored for the user, including interactions, recommendations, and settings.</p> Example Response <pre><code>{\n  \"user_id\": \"user_12345\",\n  \"privacy\": {\n    \"tracking_level\": \"full\",\n    \"created_at\": \"2025-02-10T12:00:00.000Z\",\n    \"updated_at\": \"2025-03-15T14:45:00.000Z\"\n  },\n  \"interactions\": [\n    {\n      \"id\": \"interaction_98765\",\n      \"post_id\": \"post_67890\",\n      \"action_type\": \"favorite\",\n      \"created_at\": \"2025-03-15T14:30:00.000Z\",\n      \"context\": {\n        \"source\": \"timeline_home\"\n      }\n    },\n    // Additional interactions...\n  ],\n  \"recommendations\": [\n    {\n      \"post_id\": \"post_24680\",\n      \"ranking_score\": 0.87,\n      \"recommendation_reason\": \"From an author you might like\",\n      \"created_at\": \"2025-03-15T15:00:00.000Z\"\n    },\n    // Additional recommendations...\n  ]\n}</code></pre> DELETE /api/v1/privacy/data <p>Deletes all data associated with a user.</p> Query Parameters Parameter Type Default Description user_id string null The user ID to delete data for Required confirm boolean false Confirmation flag, must be set to true Required Response <p>Returns confirmation of data deletion.</p> Example Response <pre><code>{\n  \"status\": \"ok\",\n  \"message\": \"All user data has been deleted\",\n  \"deleted_items\": {\n    \"interactions\": 42,\n    \"recommendations\": 15,\n    \"settings\": 1\n  },\n  \"deletion_time\": \"2025-03-15T16:00:00.000Z\"\n}</code></pre>"},{"location":"endpoints/privacy/#privacy-levels","title":"Privacy Levels","text":"<p>Corgi offers three privacy levels, each providing different balances between personalization and data collection:</p>"},{"location":"endpoints/privacy/#full-tracking","title":"Full Tracking","text":"<pre><code>{\n  \"tracking_level\": \"full\"\n}\n</code></pre> <p>With full tracking enabled: - All interactions (favorites, boosts, etc.) are stored - Detailed content preferences are tracked - Maximum personalization is provided - Individual interactions are stored with timestamps - Data is retained according to the configured retention period</p>"},{"location":"endpoints/privacy/#limited-tracking","title":"Limited Tracking","text":"<pre><code>{\n  \"tracking_level\": \"limited\"\n}\n</code></pre> <p>With limited tracking (the default): - Only aggregated statistics are stored - Individual interactions are not retained after aggregation - Basic personalization is still possible - Users can still receive recommendations, but they may be less personalized - Aggregate data is retained until account deletion</p>"},{"location":"endpoints/privacy/#no-tracking","title":"No Tracking","text":"<pre><code>{\n  \"tracking_level\": \"none\"\n}\n</code></pre> <p>With no tracking: - No user data is collected or stored - No personalization is provided - Timeline requests pass through without enhancement - Ensures maximum privacy at the expense of personalization</p>      Default Privacy    <p>All new users start with <code>limited</code> tracking unless they explicitly opt into <code>full</code> tracking.</p>"},{"location":"endpoints/privacy/#privacy-settings-middleware","title":"Privacy Settings Middleware","text":"<p>The Corgi API includes middleware that respects user privacy settings when processing requests:</p> <ol> <li>User initiates an API request</li> <li>Middleware checks the user's privacy settings</li> <li>Request is processed according to the privacy level:</li> <li>full: Complete processing with all features</li> <li>limited: Aggregated processing with basic features</li> <li>none: Minimal processing with no data storage</li> </ol> <p>This ensures that all parts of Corgi consistently enforce user privacy preferences.</p>"},{"location":"endpoints/privacy/#client-integration","title":"Client Integration","text":"<p>Here's an example of integrating privacy settings in a client application:</p> <pre><code>// Function to fetch current privacy settings\nasync function getPrivacySettings(userId) {\n  const response = await fetch(`https://api.corgi-recs.io/api/v1/privacy?user_id=${userId}`, {\n    headers: {\n      'Authorization': `Bearer ${API_KEY}`,\n      'Content-Type': 'application/json'\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(`Error fetching privacy settings: ${response.status}`);\n  }\n\n  return response.json();\n}\n\n// Function to update privacy settings\nasync function updatePrivacySettings(userId, trackingLevel) {\n  const response = await fetch('https://api.corgi-recs.io/api/v1/privacy', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${API_KEY}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      user_id: userId,\n      tracking_level: trackingLevel\n    })\n  });\n\n  if (!response.ok) {\n    throw new Error(`Error updating privacy settings: ${response.status}`);\n  }\n\n  return response.json();\n}\n\n// Example: Privacy settings UI\ndocument.addEventListener('DOMContentLoaded', async () =&gt; {\n  const userId = 'user_12345';\n  const settings = await getPrivacySettings(userId);\n\n  // Set initial form state\n  const privacyForm = document.getElementById('privacy-form');\n  const trackingRadios = privacyForm.querySelectorAll('input[name=\"tracking\"]');\n  trackingRadios.forEach(radio =&gt; {\n    if (radio.value === settings.tracking_level) {\n      radio.checked = true;\n    }\n  });\n\n  // Handle form submission\n  privacyForm.addEventListener('submit', async (event) =&gt; {\n    event.preventDefault();\n\n    const selectedTracking = privacyForm.querySelector('input[name=\"tracking\"]:checked').value;\n\n    try {\n      const result = await updatePrivacySettings(userId, selectedTracking);\n      showNotification(`Privacy settings updated to ${result.tracking_level}`);\n    } catch (error) {\n      showError(`Failed to update privacy settings: ${error.message}`);\n    }\n  });\n});\n</code></pre>"},{"location":"endpoints/privacy/#html-form-example","title":"HTML Form Example","text":"<p>Here's a simple privacy settings form you can include in your application:</p> <pre><code>&lt;form id=\"privacy-form\" class=\"privacy-settings\"&gt;\n  &lt;h2&gt;Privacy Settings&lt;/h2&gt;\n\n  &lt;div class=\"setting\"&gt;\n    &lt;input type=\"radio\" id=\"tracking-full\" name=\"tracking\" value=\"full\"&gt;\n    &lt;label for=\"tracking-full\"&gt;\n      &lt;strong&gt;Full Personalization&lt;/strong&gt;\n      &lt;p&gt;Store all interactions for the best recommendations.&lt;/p&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"setting\"&gt;\n    &lt;input type=\"radio\" id=\"tracking-limited\" name=\"tracking\" value=\"limited\"&gt;\n    &lt;label for=\"tracking-limited\"&gt;\n      &lt;strong&gt;Limited Personalization&lt;/strong&gt;\n      &lt;p&gt;Store only aggregated data for basic recommendations.&lt;/p&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"setting\"&gt;\n    &lt;input type=\"radio\" id=\"tracking-none\" name=\"tracking\" value=\"none\"&gt;\n    &lt;label for=\"tracking-none\"&gt;\n      &lt;strong&gt;No Personalization&lt;/strong&gt;\n      &lt;p&gt;Don't store any data or provide personalized recommendations.&lt;/p&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"actions\"&gt;\n    &lt;button type=\"submit\" class=\"primary\"&gt;Save Settings&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"endpoints/privacy/#data-portability","title":"Data Portability","text":"<p>The Privacy API supports data portability, allowing users to export their data in standard formats:</p> <pre><code>// Function to export user data\nasync function exportUserData(userId, format = 'json') {\n  const response = await fetch(`https://api.corgi-recs.io/api/v1/privacy/data?user_id=${userId}&amp;format=${format}`, {\n    headers: {\n      'Authorization': `Bearer ${API_KEY}`,\n      'Content-Type': 'application/json'\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(`Error exporting data: ${response.status}`);\n  }\n\n  if (format === 'json') {\n    return response.json();\n  } else {\n    return response.text();\n  }\n}\n\n// Example: Export button\ndocument.getElementById('export-button').addEventListener('click', async () =&gt; {\n  const userId = 'user_12345';\n  const format = document.getElementById('export-format').value;\n\n  try {\n    const data = await exportUserData(userId, format);\n\n    if (format === 'json') {\n      // Create downloadable JSON\n      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `corgi-data-${userId}.json`;\n      a.click();\n\n      URL.revokeObjectURL(url);\n    } else if (format === 'csv') {\n      // Handle CSV format\n      const blob = new Blob([data], { type: 'text/csv' });\n      const url = URL.createObjectURL(blob);\n\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `corgi-data-${userId}.csv`;\n      a.click();\n\n      URL.revokeObjectURL(url);\n    }\n  } catch (error) {\n    showError(`Failed to export data: ${error.message}`);\n  }\n});\n</code></pre>"},{"location":"endpoints/privacy/#related-resources","title":"Related Resources","text":"<ul> <li>Concepts: Privacy Design - Learn about Corgi's privacy architecture</li> <li>Feedback API - Log user interactions with posts</li> <li>Recommendations API - Get personalized recommendations</li> </ul>"},{"location":"endpoints/proxy/","title":"Proxy API","text":"<p>The Proxy API provides endpoints for monitoring and configuring Corgi's transparent proxy functionality. These endpoints help you understand how the proxy is working and troubleshoot any issues.</p>"},{"location":"endpoints/proxy/#endpoints","title":"Endpoints","text":"GET /api/v1/proxy/status <p>Returns the current status of the proxy service.</p> Response <p>Returns basic information about the proxy's status and configuration.</p> Example Response <pre><code>{\n  \"status\": \"ok\",\n  \"proxy\": \"active\",\n  \"default_instance\": \"https://mastodon.social\",\n  \"version\": \"1.2.0\",\n  \"uptime\": \"3d 4h 12m\",\n  \"recommendation_blend_ratio\": 0.3,\n  \"proxy_timeout\": 10\n}</code></pre> GET /api/v1/proxy/instance <p>Shows what Mastodon instance would be detected for the current request. This is useful for debugging instance resolution issues.</p> Response <p>Returns information about the detected instance and how it was determined.</p> Example Response <pre><code>{\n  \"detected_instance\": \"https://mastodon.social\",\n  \"detection_method\": \"oauth_token_lookup\",\n  \"user_id\": \"pseudonymized_id_123\",\n  \"headers\": {\n    \"authorization\": \"[REDACTED]\",\n    \"user-agent\": \"Elk/1.0\"\n  },\n  \"args\": {\n    \"limit\": \"20\"\n  }\n}</code></pre> GET /api/v1/proxy/metrics <p>Returns metrics about proxy usage and performance.</p> Query Parameters Parameter Type Default Description reset string \"false\" If \"true\", resets metrics after retrieval Response <p>Returns detailed metrics about proxy usage.</p> Example Response <pre><code>{\n  \"total_requests\": 12483,\n  \"successful_requests\": 12450,\n  \"failed_requests\": 33,\n  \"timeline_requests\": 2841,\n  \"enriched_timelines\": 2418,\n  \"total_recommendations\": 7254,\n  \"avg_latency_seconds\": 0.328,\n  \"enrichment_rate\": 0.851,\n  \"uptime_seconds\": 259243,\n  \"instance_distribution\": {\n    \"mastodon.social\": 7890,\n    \"fosstodon.org\": 2145,\n    \"hachyderm.io\": 1203,\n    \"other\": 1245\n  },\n  \"recent_errors\": [\n    {\n      \"timestamp\": \"2025-03-15T15:23:45.000Z\",\n      \"path\": \"/api/v1/timelines/home\",\n      \"status_code\": 500,\n      \"error\": \"Timeout connecting to instance\",\n      \"instance\": \"slow.instance.example\"\n    }\n  ]\n}</code></pre> POST /api/v1/proxy/accounts/link <p>Links a user's Mastodon account to Corgi for instance resolution.</p> Request Body Parameter Type Required Description user_id string Required User ID to link the account for instance string Required Mastodon instance URL (e.g., \"mastodon.social\") access_token string Required OAuth access token for the Mastodon account Example Request <pre><code>{\n  \"user_id\": \"user_12345\",\n  \"instance\": \"mastodon.social\",\n  \"access_token\": \"abc123def456ghi789\"\n}</code></pre> Response <p>Returns confirmation of the account linking.</p> Example Response <pre><code>{\n  \"status\": \"ok\",\n  \"user_id\": \"user_12345\",\n  \"instance\": \"https://mastodon.social\",\n  \"username\": \"@user\",\n  \"message\": \"Account successfully linked\"\n}</code></pre> GET /api/v1/proxy/accounts <p>Lists all linked accounts for a user.</p> Query Parameters Parameter Type Default Description user_id string null The user ID to list accounts for Required Response <p>Returns the list of linked Mastodon accounts.</p> Example Response <pre><code>{\n  \"user_id\": \"user_12345\",\n  \"linked_accounts\": [\n    {\n      \"instance\": \"https://mastodon.social\",\n      \"username\": \"@user\",\n      \"linked_at\": \"2025-02-15T10:30:00.000Z\",\n      \"last_used\": \"2025-03-15T14:22:11.000Z\"\n    },\n    {\n      \"instance\": \"https://fosstodon.org\",\n      \"username\": \"@user\",\n      \"linked_at\": \"2025-03-01T08:15:00.000Z\",\n      \"last_used\": \"2025-03-10T09:45:00.000Z\"\n    }\n  ]\n}</code></pre> DELETE /api/v1/proxy/accounts/unlink <p>Unlinks a Mastodon account from Corgi.</p> Request Body Parameter Type Required Description user_id string Required User ID to unlink the account for instance string Required Mastodon instance URL to unlink Example Request <pre><code>{\n  \"user_id\": \"user_12345\",\n  \"instance\": \"mastodon.social\"\n}</code></pre> Response <p>Returns confirmation of the account unlinking.</p> Example Response <pre><code>{\n  \"status\": \"ok\",\n  \"message\": \"Account successfully unlinked\",\n  \"user_id\": \"user_12345\",\n  \"instance\": \"https://mastodon.social\"\n}</code></pre>"},{"location":"endpoints/proxy/#instance-resolution","title":"Instance Resolution","text":"<p>The proxy determines which Mastodon instance to forward requests to using this sequence:</p> <ol> <li> <p><code>X-Mastodon-Instance</code> header in the request    <pre><code>X-Mastodon-Instance: mastodon.social\n</code></pre></p> </li> <li> <p><code>instance</code> query parameter     <pre><code>?instance=mastodon.social\n</code></pre></p> </li> <li> <p>Database lookup based on the OAuth token (using account linking)</p> </li> <li> <p>Default instance from configuration    <pre><code>DEFAULT_MASTODON_INSTANCE = \"mastodon.social\"\n</code></pre></p> </li> </ol>      Best Practice    <p>For reliable instance resolution, users should be encouraged to link their Mastodon accounts using the <code>/api/v1/proxy/accounts/link</code> endpoint. This ensures the proxy always forwards to the correct instance, even when using multiple Mastodon clients.</p>"},{"location":"endpoints/proxy/#configuration","title":"Configuration","text":""},{"location":"endpoints/proxy/#environment-variables","title":"Environment Variables","text":"<p>The proxy's behavior can be configured through environment variables:</p> Variable Description Default <code>DEFAULT_MASTODON_INSTANCE</code> Fallback Mastodon instance URL https://mastodon.social <code>RECOMMENDATION_BLEND_RATIO</code> Ratio of recommendations to include (0.0-1.0) 0.3 <code>PROXY_TIMEOUT</code> Timeout for proxy requests in seconds 10 <code>DEBUG_PROXY</code> Enable additional logging false"},{"location":"endpoints/proxy/#configuration-api","title":"Configuration API","text":"<p>You can also adjust some settings through the API:</p> POST /api/v1/proxy/config <p>Update proxy configuration settings.</p> Request Body Parameter Type Required Description recommendation_blend_ratio float Optional Ratio of recommendations to include (0.0-1.0) proxy_timeout integer Optional Timeout for proxy requests in seconds default_instance string Optional Default Mastodon instance URL Example Request <pre><code>{\n  \"recommendation_blend_ratio\": 0.4,\n  \"proxy_timeout\": 15\n}</code></pre> Response <p>Returns the updated configuration.</p> Example Response <pre><code>{\n  \"status\": \"ok\",\n  \"config\": {\n    \"recommendation_blend_ratio\": 0.4,\n    \"proxy_timeout\": 15,\n    \"default_instance\": \"https://mastodon.social\"\n  }\n}</code></pre>"},{"location":"endpoints/proxy/#testing-the-proxy","title":"Testing the Proxy","text":"<p>You can test the proxy using <code>curl</code>:</p> <pre><code># Test proxy status\ncurl -i http://localhost:5000/api/v1/proxy/status\n\n# Test instance detection\ncurl -i -H \"X-Mastodon-Instance: mastodon.social\" http://localhost:5000/api/v1/proxy/instance\n\n# Test timeline (will be anonymous without auth)\ncurl -i -H \"X-Mastodon-Instance: mastodon.social\" http://localhost:5000/api/v1/timelines/home\n\n# Test timeline with auth token\ncurl -i -H \"Authorization: Bearer YOUR_TOKEN\" -H \"X-Mastodon-Instance: mastodon.social\" http://localhost:5000/api/v1/timelines/home\n\n# Check proxy metrics\ncurl -i http://localhost:5000/api/v1/proxy/metrics\n</code></pre>"},{"location":"endpoints/proxy/#debugging-tips","title":"Debugging Tips","text":""},{"location":"endpoints/proxy/#common-issues","title":"Common Issues","text":"<ol> <li>Instance Not Detected: If the instance isn't being properly detected, check that:</li> <li>The <code>X-Mastodon-Instance</code> header is correctly formatted (no <code>https://</code> prefix)</li> <li>The account is properly linked using the <code>/api/v1/proxy/accounts/link</code> endpoint</li> <li> <p>The OAuth token is valid and properly formatted</p> </li> <li> <p>Authentication Failures: If authentication is failing:</p> </li> <li>Verify the token is valid for the intended instance</li> <li>Check that the token has the necessary scopes (usually <code>read:statuses</code>)</li> <li> <p>Ensure the instance URL is correct</p> </li> <li> <p>Timeout Errors: If requests are timing out:</p> </li> <li>Check the instance's health</li> <li>Increase the <code>PROXY_TIMEOUT</code> setting</li> <li>Verify network connectivity</li> </ol>"},{"location":"endpoints/proxy/#proxy-headers","title":"Proxy Headers","text":"<p>The proxy adds these headers to responses:</p> <pre><code>X-Corgi-Proxy: true\nX-Corgi-Instance: mastodon.social\nX-Corgi-Enhanced: true (for enhanced timelines)\nX-Corgi-Recommendations: 5 (number of recommendations added)\n</code></pre> <p>These headers can help you debug issues by showing whether a request passed through the proxy and what enhancements were made.</p>"},{"location":"endpoints/proxy/#client-configuration","title":"Client Configuration","text":""},{"location":"endpoints/proxy/#configuring-elk","title":"Configuring Elk","text":"<pre><code>// In Elk's settings.js\nexport default {\n  apiUrl: 'https://api.corgi-recs.io',  // Use Corgi proxy URL\n  token: 'YOUR_MASTODON_TOKEN',         // Your normal Mastodon token\n  instance: 'mastodon.social'           // Your Mastodon instance\n}\n</code></pre>"},{"location":"endpoints/proxy/#configuring-ivory","title":"Configuring Ivory","text":"<p>In Ivory's Settings: 1. Go to \"Advanced\" &gt; \"Custom Server\" 2. Enter <code>https://api.corgi-recs.io</code> as the server URL 3. Keep your existing Mastodon access token</p>"},{"location":"endpoints/proxy/#related-resources","title":"Related Resources","text":"<ul> <li>Timelines API - Get enhanced timelines with recommendations</li> <li>Concepts: Proxy Architecture - Learn how the proxy works in detail</li> <li>Example: Elk Integration - Step-by-step guide for Elk</li> </ul>"},{"location":"endpoints/recommendations/","title":"Recommendations API","text":"<p>The Recommendations API provides access to Corgi's personalized content suggestions. These endpoints allow you to retrieve tailored recommendations based on user preferences and behavior.</p>"},{"location":"endpoints/recommendations/#endpoints","title":"Endpoints","text":"GET /api/v1/recommendations <p>Get personalized recommendations for a user with detailed metadata.</p> Query Parameters Parameter Type Default Description user_id string null The user ID to get recommendations for Required limit integer 10 Maximum number of recommendations to return (max: 40) exclude_seen boolean true Exclude posts the user has already interacted with debug boolean false Include detailed scoring information in response languages string null Comma-separated list of language codes to filter by (e.g., \"en,es\") Response <p>Returns an object with user_id, recommendations, and optional debug info.</p> Example Response <pre><code>{\n  \"user_id\": \"user_12345\",\n  \"recommendations\": [\n    {\n      \"id\": \"109876543211234567\",\n      \"content\": \"<p>Just published a new blog post about sustainable tech!</p>\",\n      \"created_at\": \"2025-03-15T14:22:11.000Z\",\n      \"account\": {\n        \"id\": \"12345\",\n        \"username\": \"techblogger\",\n        \"display_name\": \"Tech Sustainability Blog\",\n        \"followers_count\": 1524,\n        \"following_count\": 342,\n        \"statuses_count\": 857\n      },\n      \"replies_count\": 12,\n      \"reblogs_count\": 28,\n      \"favourites_count\": 43,\n      \"ranking_score\": 0.87,\n      \"recommendation_reason\": \"From an author you might like\"\n    },\n    {\n      \"id\": \"109876987654321123\",\n      \"content\": \"<p>Check out our latest open source contribution to the Fediverse!</p>\",\n      \"created_at\": \"2025-03-15T13:45:22.000Z\",\n      \"account\": {\n        \"id\": \"67890\",\n        \"username\": \"fediversedev\",\n        \"display_name\": \"Fediverse Developers\",\n        \"followers_count\": 3201,\n        \"following_count\": 129,\n        \"statuses_count\": 1432\n      },\n      \"ranking_score\": 0.82,\n      \"recommendation_reason\": \"Popular with other users\"\n    }\n  ],\n  \"debug_info\": {\n    \"user_interactions_count\": 47,\n    \"candidates_evaluated\": 183,\n    \"factor_weights\": {\n      \"author_preference\": 0.4,\n      \"content_engagement\": 0.3,\n      \"recency\": 0.3\n    },\n    \"score_distribution\": {\n      \"min\": 0.12,\n      \"max\": 0.91,\n      \"mean\": 0.42,\n      \"median\": 0.37\n    }\n  }\n}</code></pre> POST /api/v1/recommendations/generate <p>Generate fresh personalized rankings for a user. This is useful when you want to force a refresh of recommendations or generate initial recommendations for a new user.</p> Request Body Parameter Type Required Description user_id string Required The user ID to generate rankings for force_refresh boolean Optional Force recalculation even if recent rankings exist (default: false) Example Request <pre><code>{\n  \"user_id\": \"user_12345\",\n  \"force_refresh\": true\n}</code></pre> Response <p>Returns a confirmation with the number of rankings generated.</p> Example Response (New Rankings) <pre><code>{\n  \"message\": \"New rankings generated\",\n  \"count\": 42,\n  \"status_code\": 201\n}</code></pre> Example Response (Using Existing Rankings) <pre><code>{\n  \"message\": \"Using existing rankings (less than 1 hour old)\",\n  \"count\": 38,\n  \"status_code\": 200\n}</code></pre> GET /api/v1/recommendations/real-posts <p>Get only real Mastodon posts without any synthetic or recommended content. This is useful for getting a baseline of genuine Mastodon content.</p> Query Parameters Parameter Type Default Description limit integer 20 Maximum number of posts to return Response <p>Returns an object with real Mastodon posts.</p> Example Response <pre><code>{\n  \"posts\": [\n    {\n      \"id\": \"109876543211234567\",\n      \"content\": \"<p>Just published a new blog post about sustainable tech!</p>\",\n      \"created_at\": \"2025-03-15T14:22:11.000Z\",\n      \"account\": {\n        \"id\": \"12345\",\n        \"username\": \"techblogger\",\n        \"display_name\": \"Tech Sustainability Blog\",\n        \"followers_count\": 1524,\n        \"following_count\": 342,\n        \"statuses_count\": 857\n      },\n      \"is_real_mastodon_post\": true,\n      \"is_synthetic\": false\n    },\n    {\n      \"id\": \"109876987654321123\",\n      \"content\": \"<p>Check out our latest open source contribution to the Fediverse!</p>\",\n      \"created_at\": \"2025-03-15T13:45:22.000Z\",\n      \"account\": {\n        \"id\": \"67890\",\n        \"username\": \"fediversedev\",\n        \"display_name\": \"Fediverse Developers\",\n        \"followers_count\": 3201,\n        \"following_count\": 129,\n        \"statuses_count\": 1432\n      },\n      \"is_real_mastodon_post\": true,\n      \"is_synthetic\": false\n    }\n  ],\n  \"count\": 2,\n  \"message\": \"Retrieved 2 real Mastodon posts\"\n}</code></pre> GET /api/v1/recommendations/reasons <p>Get detailed explanations for why specific posts were recommended to a user. This is useful for transparency and helping users understand their recommendations.</p> Query Parameters Parameter Type Default Description user_id string null The user ID to get recommendation reasoning for Required post_id string null The post ID to get reasoning for (if omitted, returns reasons for recent recommendations) limit integer 10 Maximum number of recommendation reasons to return Response <p>Returns detailed reasoning for recommendations.</p> Example Response <pre><code>{\n  \"user_id\": \"user_12345\",\n  \"reasons\": [\n    {\n      \"post_id\": \"109876543211234567\",\n      \"author_id\": \"12345\",\n      \"author_name\": \"techblogger\",\n      \"ranking_score\": 0.87,\n      \"short_reason\": \"From an author you might like\",\n      \"detailed_reason\": \"You've favorited 3 posts from this author in the past week\",\n      \"scores\": {\n        \"author_preference\": 0.92,\n        \"content_engagement\": 0.76,\n        \"recency\": 0.85\n      }\n    },\n    {\n      \"post_id\": \"109876987654321123\",\n      \"author_id\": \"67890\",\n      \"author_name\": \"fediversedev\",\n      \"ranking_score\": 0.82,\n      \"short_reason\": \"Popular with other users\",\n      \"detailed_reason\": \"This post has received significant engagement from the community\",\n      \"scores\": {\n        \"author_preference\": 0.31,\n        \"content_engagement\": 0.95,\n        \"recency\": 0.80\n      }\n    }\n  ]\n}</code></pre>"},{"location":"endpoints/recommendations/#understanding-recommendation-reasons","title":"Understanding Recommendation Reasons","text":"<p>Each recommended post includes a human-readable explanation for why it's being shown. These explanations are also available in the <code>injection_metadata.explanation</code> field when posts are injected into timelines:</p> Reason Description Primary Factor \"From an author you might like\" The user has shown interest in content from this author Author preference \"Popular with other users\" The post has received significant engagement Content engagement \"Recently posted\" The content is fresh and timely Recency \"Recommended for you\" Multiple factors contributed equally Mixed factors \"Suggested based on your interests in #tags\" Content matches user's hashtag interests Tag matching"},{"location":"endpoints/recommendations/#recommendation-scoring","title":"Recommendation Scoring","text":"<p>The recommendation engine calculates scores based on these factors:</p>"},{"location":"endpoints/recommendations/#author-preference-40","title":"Author Preference (40%)","text":"<p>Measures how much a user interacts with content from specific authors:</p> <pre><code>def get_author_preference_score(user_interactions, author_id):\n    # Count positive and negative interactions with author's content\n    # Calculate positive ratio (positive interactions / total interactions)\n    # Apply sigmoid function to normalize to 0-1 range\n    positive_ratio = author_interactions['positive'] / (author_interactions['total'] + 0.001)\n    preference_score = 1 / (1 + math.exp(-5 * (positive_ratio - 0.5)))\n    return max(preference_score, 0.1)  # Minimum score is 0.1\n</code></pre>"},{"location":"endpoints/recommendations/#content-engagement-30","title":"Content Engagement (30%)","text":"<p>Evaluates the post's overall popularity:</p> <pre><code>def get_content_engagement_score(post):\n    # Sum favorites, reblogs, and replies\n    total = favorites + reblogs + replies\n    # Apply logarithmic scaling to prevent very popular posts from dominating\n    return math.log(total + 1) / 10.0  # Normalize to 0-1 range\n</code></pre>"},{"location":"endpoints/recommendations/#recency-30","title":"Recency (30%)","text":"<p>Measures how fresh the content is:</p> <pre><code>def get_recency_score(post):\n    # Calculate age in days\n    age_days = (now - post['created_at']).total_seconds() / (24 * 3600)\n    # Apply exponential decay\n    recency_score = math.exp(-age_days / decay_factor)\n    return max(recency_score, 0.2)  # Minimum score for older posts\n</code></pre>"},{"location":"endpoints/recommendations/#debugging-recommendations","title":"Debugging Recommendations","text":"<p>When using the recommendations endpoint with <code>debug=true</code>, you'll receive additional information about how recommendations were generated:</p> <pre><code>\"debug_info\": {\n  \"user_interactions_count\": 47,\n  \"candidates_evaluated\": 183,\n  \"processing_time_ms\": 145,\n  \"factor_weights\": {\n    \"author_preference\": 0.4,\n    \"content_engagement\": 0.3,\n    \"recency\": 0.3\n  },\n  \"score_distribution\": {\n    \"min\": 0.12,\n    \"max\": 0.91,\n    \"mean\": 0.42,\n    \"median\": 0.37\n  },\n  \"factors\": {\n    \"109876543211234567\": {\n      \"author_preference\": 0.92,\n      \"content_engagement\": 0.76,\n      \"recency\": 0.85\n    }\n  }\n}\n</code></pre> <p>This information is valuable for: - Understanding why certain posts are recommended - Diagnosing issues with recommendation quality - Testing and tuning the recommendation algorithm</p>"},{"location":"endpoints/recommendations/#personalization-controls","title":"Personalization Controls","text":"<p>The recommendations API respects user privacy settings:</p> <ul> <li>For users with <code>full</code> tracking, recommendations are fully personalized</li> <li>For users with <code>limited</code> tracking, recommendations use aggregated preferences</li> <li>For users with <code>none</code> tracking, no personalized recommendations are provided</li> </ul>      User Consent    <p>Always respect user privacy preferences and make it clear when content is being recommended.</p>"},{"location":"endpoints/recommendations/#filtering-recommendations","title":"Filtering Recommendations","text":"<p>The API provides several ways to filter recommendations:</p>"},{"location":"endpoints/recommendations/#language-filtering","title":"Language Filtering","text":"<pre><code>/api/v1/recommendations?user_id=user_12345&amp;languages=en,es\n</code></pre> <p>This returns only recommendations in English and Spanish.</p>"},{"location":"endpoints/recommendations/#sensitive-content-filtering","title":"Sensitive Content Filtering","text":"<pre><code>/api/v1/recommendations?user_id=user_12345&amp;hide_sensitive=true\n</code></pre> <p>This filters out posts marked as sensitive.</p>"},{"location":"endpoints/recommendations/#author-diversity","title":"Author Diversity","text":"<pre><code>/api/v1/recommendations?user_id=user_12345&amp;author_diversity=0.7\n</code></pre> <p>This controls how diverse the set of authors is in the recommendations (higher values = more diverse).</p>"},{"location":"endpoints/recommendations/#client-integration-example","title":"Client Integration Example","text":"<p>Here's an example of fetching and displaying recommendations in a client application:</p> <pre><code>async function fetchRecommendations(userId, limit = 10) {\n  const response = await fetch(`https://api.corgi-recs.io/api/v1/recommendations?user_id=${userId}&amp;limit=${limit}`, {\n    headers: {\n      'Authorization': `Bearer ${API_KEY}`,\n      'Content-Type': 'application/json'\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(`Error fetching recommendations: ${response.status}`);\n  }\n\n  return response.json();\n}\n\n// Render recommendations\nasync function displayRecommendations() {\n  const recommendationsEl = document.getElementById('recommendations');\n  recommendationsEl.innerHTML = '&lt;p&gt;Loading recommendations...&lt;/p&gt;';\n\n  try {\n    const data = await fetchRecommendations('user_12345', 5);\n\n    // Clear loading message\n    recommendationsEl.innerHTML = '';\n\n    // Create heading\n    const heading = document.createElement('h2');\n    heading.textContent = 'Recommended for You';\n    recommendationsEl.appendChild(heading);\n\n    // Create recommendation list\n    const list = document.createElement('ul');\n    list.className = 'recommendation-list';\n\n    // Add each recommendation\n    data.recommendations.forEach(post =&gt; {\n      const item = document.createElement('li');\n      item.className = 'recommendation';\n      item.dataset.postId = post.id;\n\n      // Add recommendation badge with reason\n      const badge = document.createElement('div');\n      badge.className = 'recommendation-badge';\n      badge.textContent = post.recommendation_reason;\n      item.appendChild(badge);\n\n      // Add author info\n      const author = document.createElement('div');\n      author.className = 'author';\n      author.innerHTML = `\n        &lt;img src=\"${post.account.avatar || '/img/default-avatar.png'}\" alt=\"\"&gt;\n        &lt;span&gt;${post.account.display_name}&lt;/span&gt;\n      `;\n      item.appendChild(author);\n\n      // Add content\n      const content = document.createElement('div');\n      content.className = 'content';\n      content.innerHTML = post.content;\n      item.appendChild(content);\n\n      // Add interaction buttons\n      const actions = document.createElement('div');\n      actions.className = 'actions';\n      actions.innerHTML = `\n        &lt;button class=\"favorite\" aria-label=\"Favorite\"&gt;\u2764\ufe0f&lt;/button&gt;\n        &lt;button class=\"boost\" aria-label=\"Boost\"&gt;\ud83d\udd04&lt;/button&gt;\n        &lt;button class=\"bookmark\" aria-label=\"Bookmark\"&gt;\ud83d\udd16&lt;/button&gt;\n      `;\n      item.appendChild(actions);\n\n      // Add to list\n      list.appendChild(item);\n    });\n\n    recommendationsEl.appendChild(list);\n\n    // Set up interaction tracking\n    setupInteractions();\n  } catch (error) {\n    recommendationsEl.innerHTML = `&lt;p class=\"error\"&gt;Error loading recommendations: ${error.message}&lt;/p&gt;`;\n  }\n}\n\n// Track interactions to improve future recommendations\nfunction setupInteractions() {\n  const interactionLogger = new InteractionLogger('YOUR_API_KEY', 'user_12345');\n\n  document.querySelectorAll('.recommendation').forEach(item =&gt; {\n    const postId = item.dataset.postId;\n\n    // Favorite button\n    item.querySelector('.favorite').addEventListener('click', () =&gt; {\n      interactionLogger.logInteraction(postId, 'favorite', { \n        source: 'recommendations_page'\n      });\n    });\n\n    // Boost button\n    item.querySelector('.boost').addEventListener('click', () =&gt; {\n      interactionLogger.logInteraction(postId, 'reblog', { \n        source: 'recommendations_page'\n      });\n    });\n\n    // Bookmark button\n    item.querySelector('.bookmark').addEventListener('click', () =&gt; {\n      interactionLogger.logInteraction(postId, 'bookmark', { \n        source: 'recommendations_page'\n      });\n    });\n  });\n}\n\n// Call when page loads\ndocument.addEventListener('DOMContentLoaded', displayRecommendations);\n</code></pre>"},{"location":"endpoints/recommendations/#timeline-integration","title":"Timeline Integration","text":"<p>The recommendations engine integrates directly with the timeline injection system to provide a seamless user experience. When a user requests their home timeline, the system:</p> <ol> <li>Determines if the user is new (has fewer than 5 interactions) or returning</li> <li>For new users, injects cold start content to bootstrap the recommendation process</li> <li>For returning users, calls <code>get_ranked_recommendations()</code> to generate personalized recommendations</li> <li>Injects these recommendations into the timeline with proper metadata</li> </ol> <p>See the Timeline Injection API for more details on how recommendations are blended into timelines.</p> <p>Example of an injected recommendation in a timeline:</p> <pre><code>{\n  \"id\": \"109876543211234567\",\n  \"content\": \"&lt;p&gt;Just published a new blog post about sustainable tech!&lt;/p&gt;\",\n  \"created_at\": \"2025-03-15T14:22:11.000Z\",\n  \"account\": {\n    \"id\": \"12345\",\n    \"username\": \"techblogger\",\n    \"display_name\": \"Tech Sustainability Blog\"\n  },\n  \"injected\": true,\n  \"injection_metadata\": {\n    \"source\": \"recommendation_engine\",\n    \"strategy\": \"personalized\",\n    \"explanation\": \"From an author you might like\",\n    \"score\": 0.87\n  }\n}\n</code></pre>"},{"location":"endpoints/recommendations/#related-resources","title":"Related Resources","text":"<ul> <li>Timelines API - Get enhanced timelines with recommendations</li> <li>Timeline Injection API - Learn how recommendations are injected into timelines</li> <li>Feedback API - Log user interactions to improve recommendations</li> <li>Privacy API - Control user privacy settings</li> <li>Concepts: Recommendation Engine - Learn how the recommendation algorithm works</li> </ul>"},{"location":"endpoints/timeline_injection/","title":"Timeline Injection API","text":"<p>The Timeline Injection API provides enhanced timeline capabilities that seamlessly blend real Mastodon posts with injected recommended or synthetic content. This approach allows for a more personalized and engaging user experience while maintaining Mastodon compatibility.</p>"},{"location":"endpoints/timeline_injection/#overview","title":"Overview","text":"<p>The timeline injection system works by:</p> <ol> <li>Retrieving real posts from the upstream Mastodon instance</li> <li>Loading injectable posts from a recommendation engine or cold start dataset</li> <li>Using a configurable injection strategy to determine placement</li> <li>Merging the timelines using the <code>inject_into_timeline</code> utility</li> <li>Preserving chronological order and adding metadata for client-side rendering</li> </ol>"},{"location":"endpoints/timeline_injection/#endpoints","title":"Endpoints","text":""},{"location":"endpoints/timeline_injection/#get-apiv1timelineshome","title":"GET /api/v1/timelines/home","text":"<p>Enhanced version of the standard Mastodon timeline endpoint with injection capabilities.</p>"},{"location":"endpoints/timeline_injection/#request-parameters","title":"Request Parameters","text":"Parameter Type Required Description <code>limit</code> Integer No Maximum number of posts to return (default: 20) <code>strategy</code> String No Injection strategy to use: <code>uniform</code>, <code>after_n</code>, <code>first_only</code>, or <code>tag_match</code> <code>inject</code> Boolean No Whether to inject posts (default: true)"},{"location":"endpoints/timeline_injection/#response","title":"Response","text":"<pre><code>{\n  \"timeline\": [\n    {\n      \"id\": \"109909109008830925\",\n      \"created_at\": \"2025-04-19T14:00:10.985Z\",\n      \"content\": \"&lt;p&gt;Post content here&lt;/p&gt;\",\n      \"account\": {\n        \"id\": \"109909109008830925\",\n        \"username\": \"example\",\n        \"display_name\": \"Example User\",\n        \"url\": \"https://mastodon.social/@example\"\n      },\n      // Other standard Mastodon post fields\n\n      // Additional fields for injected posts:\n      \"injected\": true,  // Only present for injected posts\n      \"is_real_mastodon_post\": false,\n      \"is_synthetic\": false,\n      \"injection_metadata\": {\n        \"source\": \"recommendation_engine\",\n        \"strategy\": \"personalized\",\n        \"explanation\": \"Recommended based on your recent interests in #python and #opensource\",\n        \"score\": 0.87\n      }\n    },\n    // More posts...\n  ],\n  \"metadata\": {\n    \"injection\": {\n      \"strategy\": \"uniform\",\n      \"injected_count\": 5,\n      \"source\": \"personalized\",\n      \"processing_time_ms\": 42\n    }\n  }\n}\n</code></pre>"},{"location":"endpoints/timeline_injection/#response-fields","title":"Response Fields","text":"<p>The response includes standard Mastodon timeline posts plus:</p> <ul> <li><code>injected</code> - Boolean flag (true for injected posts)</li> <li><code>injection_metadata</code> - Object with detailed information about the recommendation:</li> <li><code>source</code> - Source of the recommendation (<code>recommendation_engine</code>, <code>timeline_injector</code>, etc.)</li> <li><code>strategy</code> - Strategy used for recommendation (<code>personalized</code>, <code>tag_match</code>, etc.)</li> <li><code>explanation</code> - Human-readable explanation for why this post was recommended</li> <li><code>score</code> - Numerical score indicating recommendation strength (0-1 range)</li> <li><code>metadata</code> - Object containing information about the injection process:</li> <li><code>injection.strategy</code> - The strategy used for injection</li> <li><code>injection.injected_count</code> - Number of posts injected</li> <li><code>injection.source</code> - Source of injected posts (<code>cold_start</code> or <code>personalized</code>)</li> <li><code>injection.processing_time_ms</code> - Processing time in milliseconds</li> </ul> <p>If injection was not performed, the metadata will include: <pre><code>\"metadata\": {\n  \"injection\": {\n    \"performed\": false,\n    \"reason\": \"disabled\"  // or \"no_posts_available\"\n  }\n}\n</code></pre></p>"},{"location":"endpoints/timeline_injection/#injection-strategies","title":"Injection Strategies","text":"<p>The following strategies are available for post injection:</p> <pre><code>flowchart TB\n    subgraph \"Injection Strategies\"\n        direction TB\n        A[Original Timeline] --&gt; B{Choose Strategy}\n        B --&gt; C[Uniform]\n        B --&gt; D[After N]\n        B --&gt; E[First Only]\n        B --&gt; F[Tag Match]\n\n        C --&gt; G[Enhanced Timeline]\n        D --&gt; G\n        E --&gt; G\n        F --&gt; G\n    end\n\n    subgraph \"Visual Examples\"\n        U1[\"Original \u2460 \u2461 \u2462 \u2463 \u2464 \u2465\"]\n        U2[\"Uniform  \u2460 R \u2461 \u2462 R \u2463 \u2464 R \u2465\"]\n\n        N1[\"Original \u2460 \u2461 \u2462 \u2463 \u2464 \u2465\"]\n        N2[\"After N  \u2460 \u2461 \u2462 R \u2463 \u2464 \u2465 R\"]\n\n        F1[\"Original \u2460 \u2461 \u2462 \u2463 \u2464 \u2465\"]\n        F2[\"First Only \u2460 R \u2461 R \u2462 \u2463 \u2464 \u2465\"]\n\n        T1[\"Original \u2460 #tech \u2461 \u2462 #art \u2463 \u2464 #tech \u2465\"]\n        T2[\"Tag Match \u2460 #tech R-tech \u2461 \u2462 #art R-art \u2463 \u2464 #tech R-tech \u2465\"]\n    end\n\n    style B fill:#FFB300,stroke:#FF8F00,color:#000\n    style G fill:#FFB300,stroke:#FF8F00,color:#000\n\n    classDef recPost fill:#ffcc80,stroke:#ff8f00\n    class U2,N2,F2,T2 recPost</code></pre>"},{"location":"endpoints/timeline_injection/#uniform","title":"<code>uniform</code>","text":"<p>Evenly distributes injected posts throughout the timeline.</p> <pre><code>{\n  \"type\": \"uniform\",\n  \"max_injections\": 5,\n  \"shuffle_injected\": true\n}\n</code></pre>"},{"location":"endpoints/timeline_injection/#after_n","title":"<code>after_n</code>","text":"<p>Inserts an injected post after every N real posts.</p> <pre><code>{\n  \"type\": \"after_n\",\n  \"n\": 3,\n  \"max_injections\": 5,\n  \"shuffle_injected\": true\n}\n</code></pre>"},{"location":"endpoints/timeline_injection/#first_only","title":"<code>first_only</code>","text":"<p>Only injects posts in the first portion of the timeline, ideal for new user onboarding.</p> <pre><code>{\n  \"type\": \"first_only\",\n  \"max_injections\": 3,\n  \"shuffle_injected\": true\n}\n</code></pre>"},{"location":"endpoints/timeline_injection/#tag_match","title":"<code>tag_match</code>","text":"<p>Inserts posts after real posts that have matching hashtags, for contextual relevance.</p> <pre><code>{\n  \"type\": \"tag_match\",\n  \"max_injections\": 5,\n  \"shuffle_injected\": true,\n  \"inject_only_if_gap_minutes\": 10\n}\n</code></pre>"},{"location":"endpoints/timeline_injection/#additional-strategy-options","title":"Additional Strategy Options","text":"<p>All strategies support these additional configuration options:</p> Option Type Description <code>max_injections</code> Integer Maximum number of posts to inject <code>shuffle_injected</code> Boolean Whether to randomize the order of injection candidates <code>inject_only_if_gap_minutes</code> Integer Only inject if there's a minimum time gap between posts"},{"location":"endpoints/timeline_injection/#session-based-behavior","title":"Session-Based Behavior","text":"<p>The timeline injection system adapts based on the user's session state and interaction history:</p> <ul> <li>Anonymous users: Receive cold start content with the <code>uniform</code> strategy</li> <li>New users (&lt; 5 interactions): Receive cold start content with the <code>first_only</code> strategy for front-loaded recommendations</li> <li>Regular users: Receive personalized recommendations from the recommendation engine with the <code>tag_match</code> strategy for relevance</li> </ul> <p>The recommendation engine dynamically determines user status and selects the appropriate content source:</p> <ol> <li>For anonymous or new users: Uses the cold start dataset</li> <li>For returning users with sufficient activity: Generates real-time personalized recommendations based on:</li> <li>Past interactions</li> <li>Content engagement metrics</li> <li>Author preferences</li> <li>Content recency</li> </ol>"},{"location":"endpoints/timeline_injection/#client-side-integration","title":"Client-Side Integration","text":"<p>Clients should handle injected posts by:</p> <ol> <li>Checking for the <code>injected: true</code> flag on posts</li> <li>Optionally rendering injected posts differently (e.g., with a recommendation badge)</li> <li>Using the <code>injection_metadata</code> object to display helpful context about why a post was recommended</li> <li>Preserving the ability to interact with injected posts normally</li> </ol> <p>Example client implementation showing a recommendation badge:</p> <pre><code>function renderTimelinePost(post) {\n  const postElement = document.createElement('div');\n  postElement.classList.add('timeline-post');\n\n  // If this is an injected post, add badge and styling\n  if (post.injected) {\n    // Add recommendation badge\n    const badge = document.createElement('div');\n    badge.classList.add('recommendation-badge');\n\n    // Use the explanation from metadata if available\n    if (post.injection_metadata &amp;&amp; post.injection_metadata.explanation) {\n      badge.textContent = post.injection_metadata.explanation;\n    } else {\n      badge.textContent = \"Recommended for you\";\n    }\n\n    postElement.appendChild(badge);\n    postElement.classList.add('injected-post');\n  }\n\n  // Render the rest of the post normally...\n  // ...\n\n  return postElement;\n}\n</code></pre>"},{"location":"endpoints/timeline_injection/#error-handling","title":"Error Handling","text":"<p>The endpoint gracefully handles errors:</p> <ul> <li>If injected posts cannot be loaded, only real posts are returned</li> <li>If real posts cannot be retrieved, injected posts are returned as a fallback</li> <li>If both fail, an empty timeline is returned with appropriate error metadata</li> </ul>"},{"location":"endpoints/timeline_injection/#logging-and-monitoring","title":"Logging and Monitoring","text":"<p>The system logs detailed information about each injection operation:</p> <ul> <li>Number of injected posts</li> <li>Strategy used</li> <li>Processing time</li> <li>Success/failure status</li> </ul> <p>This information can be used for monitoring and optimizing the injection process.</p>"},{"location":"endpoints/timelines/","title":"Timelines API","text":"<p>The Timelines API provides access to both standard Mastodon timelines and enhanced timelines with personalized recommendations. These endpoints return posts in a Mastodon-compatible format for easy integration with existing clients.</p>"},{"location":"endpoints/timelines/#endpoints","title":"Endpoints","text":"GET /api/v1/timelines/home <p>Retrieves the user's home timeline with seamlessly blended recommendations. For real users, the request is proxied to their Mastodon instance. For test/synthetic users, returns mock data.</p> Query Parameters Parameter Type Default Description limit integer 20 Maximum number of posts to return (max: 40). Example: <code>30</code> max_id string null Return results older than this ID. Example: <code>109876543211234567</code> since_id string null Return results newer than this ID. Example: <code>109876543211234567</code> min_id string null Return results immediately newer than this ID. Example: <code>109876543211234567</code> instance string null Mastodon instance to proxy the request to (if not using OAuth). Example: <code>mastodon.social</code> Code Examples      === \"curl\"          <pre><code># Basic usage - get enhanced home timeline\ncurl -X GET \"https://api.corgi-recs.io/api/v1/timelines/home\" \\\n  -H \"Authorization: Bearer YOUR_MASTODON_TOKEN\" \\\n  -H \"X-Mastodon-Instance: mastodon.social\"\n\n# With pagination (get older posts)\ncurl -X GET \"https://api.corgi-recs.io/api/v1/timelines/home?max_id=109876543211234567&amp;limit=30\" \\\n  -H \"Authorization: Bearer YOUR_MASTODON_TOKEN\" \\\n  -H \"X-Mastodon-Instance: mastodon.social\"\n</code></pre>      === \"Python\"          <pre><code>import requests\n\n# Basic usage - get enhanced home timeline\ndef get_home_timeline(token, instance=\"mastodon.social\", limit=20):\n    response = requests.get(\n        \"https://api.corgi-recs.io/api/v1/timelines/home\",\n        headers={\n            \"Authorization\": f\"Bearer {token}\",\n            \"X-Mastodon-Instance\": instance\n        },\n        params={\"limit\": limit}\n    )\n\n    if response.status_code == 200:\n        timeline = response.json().get(\"timeline\", [])\n\n        # Count recommendations\n        recommendations = [post for post in timeline if post.get(\"is_recommendation\")]\n        print(f\"Timeline contains {len(recommendations)} recommendations out of {len(timeline)} posts\")\n\n        return timeline\n    else:\n        print(f\"Error: {response.status_code}\")\n        return None\n\n# With pagination (get older posts)\ndef get_older_posts(token, max_id, instance=\"mastodon.social\", limit=20):\n    response = requests.get(\n        \"https://api.corgi-recs.io/api/v1/timelines/home\",\n        headers={\n            \"Authorization\": f\"Bearer {token}\",\n            \"X-Mastodon-Instance\": instance\n        },\n        params={\n            \"max_id\": max_id,\n            \"limit\": limit\n        }\n    )\n\n    return response.json().get(\"timeline\", []) if response.status_code == 200 else None\n</code></pre>      === \"JavaScript\"          <pre><code>// Basic usage - get enhanced home timeline\nasync function getHomeTimeline(token, instance = \"mastodon.social\", limit = 20) {\n  const response = await fetch(`https://api.corgi-recs.io/api/v1/timelines/home?limit=${limit}`, {\n    headers: {\n      \"Authorization\": `Bearer ${token}`,\n      \"X-Mastodon-Instance\": instance\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(`Error ${response.status}: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n  const timeline = data.timeline || [];\n\n  // Count recommendations\n  const recommendationCount = timeline.filter(post =&gt; post.is_recommendation).length;\n  console.log(`Timeline contains ${recommendationCount} recommendations out of ${timeline.length} posts`);\n\n  return timeline;\n}\n\n// With pagination (get older posts)\nasync function getOlderPosts(token, maxId, instance = \"mastodon.social\", limit = 20) {\n  const response = await fetch(\n    `https://api.corgi-recs.io/api/v1/timelines/home?max_id=${maxId}&amp;limit=${limit}`, \n    {\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"X-Mastodon-Instance\": instance\n      }\n    }\n  );\n\n  return response.ok ? (await response.json()).timeline || [] : null;\n}\n</code></pre> Response <p>Returns an object with the timeline as a property containing an array of Mastodon-compatible status objects. Recommended posts include additional fields to identify and explain them.</p> Example Response <pre><code>{\n  \"timeline\": [\n    {\n      \"id\": \"109876543211234567\",\n      \"created_at\": \"2025-03-15T14:22:11.000Z\",\n      \"in_reply_to_id\": null,\n      \"in_reply_to_account_id\": null,\n      \"sensitive\": false,\n      \"spoiler_text\": \"\",\n      \"visibility\": \"public\",\n      \"language\": \"en\",\n      \"uri\": \"https://mastodon.social/users/techblogger/statuses/109876543211234567\",\n      \"url\": \"https://mastodon.social/@techblogger/109876543211234567\",\n      \"replies_count\": 12,\n      \"reblogs_count\": 28,\n      \"favourites_count\": 43,\n      \"content\": \"<p>Just published a new blog post about sustainable tech!</p>\",\n      \"account\": {\n        \"id\": \"12345\",\n        \"username\": \"techblogger\",\n        \"acct\": \"techblogger@mastodon.social\",\n        \"display_name\": \"Tech Sustainability Blog\",\n        \"locked\": false,\n        \"bot\": false,\n        \"created_at\": \"2024-01-15T00:00:00.000Z\",\n        \"note\": \"<p>Writing about sustainable technology and ethical tech practices.</p>\",\n        \"url\": \"https://mastodon.social/@techblogger\",\n        \"avatar\": \"https://files.mastodon.social/accounts/avatars/000/012/345/original/avatar.jpg\",\n        \"avatar_static\": \"https://files.mastodon.social/accounts/avatars/000/012/345/original/avatar.jpg\",\n        \"header\": \"https://files.mastodon.social/accounts/headers/000/012/345/original/header.jpg\",\n        \"header_static\": \"https://files.mastodon.social/accounts/headers/000/012/345/original/header.jpg\",\n        \"followers_count\": 1524,\n        \"following_count\": 342,\n        \"statuses_count\": 857,\n        \"last_status_at\": \"2025-03-15T00:00:00.000Z\",\n        \"emojis\": [],\n        \"fields\": []\n      },\n      \"media_attachments\": [],\n      \"mentions\": [],\n      \"tags\": [],\n      \"emojis\": [],\n      \"card\": null,\n      \"poll\": null,\n      \"is_recommendation\": true,\n      \"recommendation_reason\": \"From an author you might like\"\n    },\n    {\n      \"id\": \"109876987654321123\",\n      \"created_at\": \"2025-03-15T13:45:22.000Z\",\n      \"content\": \"<p>Check out our latest open source contribution to the Fediverse!</p>\",\n      \"account\": {\n        \"id\": \"67890\",\n        \"username\": \"fediversedev\",\n        \"display_name\": \"Fediverse Developers\",\n        \"followers_count\": 3201,\n        \"following_count\": 129,\n        \"statuses_count\": 1432\n        // Additional account fields omitted for brevity\n      },\n      \"is_recommendation\": false\n      // Additional status fields omitted for brevity\n    }\n  ]\n}</code></pre> GET /api/v1/timelines/home/augmented <p>Returns the user's home timeline with personalized recommendations explicitly injected. This enhanced timeline blends regular posts with personalized recommendations based on user preferences.</p> Query Parameters Parameter Type Default Description user_id string null User ID for recommendations (inferred from auth token if not provided) limit integer 20 Maximum number of posts to return (max: 40) max_id string null Return results older than this ID inject_recommendations boolean false Whether to inject personalized recommendations into the timeline instance string null Mastodon instance to proxy the request to (if not using OAuth) Response <p>Returns an object with the timeline and metadata about the augmentation.</p> Example Response <pre><code>{\n  \"timeline\": [\n    {\n      \"id\": \"109876543211234567\",\n      \"content\": \"<p>Just published a new blog post about sustainable tech!</p>\",\n      \"created_at\": \"2025-03-15T14:22:11.000Z\",\n      \"account\": {\n        \"id\": \"12345\",\n        \"username\": \"techblogger\",\n        \"display_name\": \"Tech Sustainability Blog\"\n        // Additional account fields omitted for brevity\n      },\n      \"is_recommendation\": true,\n      \"recommendation_reason\": \"From an author you might like\"\n      // Additional status fields omitted for brevity\n    },\n    {\n      \"id\": \"109876987654321123\",\n      \"content\": \"<p>Check out our latest open source contribution to the Fediverse!</p>\",\n      \"created_at\": \"2025-03-15T13:45:22.000Z\",\n      \"account\": {\n        \"id\": \"67890\",\n        \"username\": \"fediversedev\",\n        \"display_name\": \"Fediverse Developers\"\n        // Additional account fields omitted for brevity\n      },\n      \"is_recommendation\": false\n      // Additional status fields omitted for brevity\n    }\n  ],\n  \"injected_count\": 8\n}</code></pre> GET /api/v1/recommendations/timelines/recommended <p>Returns a timeline consisting entirely of personalized recommendations. This endpoint provides recommendations in a Mastodon-compatible format.</p> Query Parameters Parameter Type Default Description user_id string null User ID to get recommendations for Required limit integer 20 Maximum number of recommendations to return (max: 40) exclude_seen boolean true Exclude posts the user has already interacted with include_reasons boolean true Include recommendation reasons in the response languages string null Comma-separated list of language codes to filter by (e.g., \"en,es\") Response <p>Returns an array of Mastodon-compatible status objects with additional recommendation metadata.</p> Example Response <pre><code>[\n  {\n    \"id\": \"109876543211234567\",\n    \"content\": \"<p>Just published a new blog post about sustainable tech!</p>\",\n    \"created_at\": \"2025-03-15T14:22:11.000Z\",\n    \"account\": {\n      \"id\": \"12345\",\n      \"username\": \"techblogger\",\n      \"display_name\": \"Tech Sustainability Blog\",\n      \"followers_count\": 1524,\n      \"following_count\": 342,\n      \"statuses_count\": 857\n      // Additional account fields omitted for brevity\n    },\n    \"replies_count\": 12,\n    \"reblogs_count\": 28,\n    \"favourites_count\": 43,\n    \"is_recommendation\": true,\n    \"recommendation_reason\": \"From an author you might like\",\n    \"ranking_score\": 0.87,\n    \"is_real_mastodon_post\": true,\n    \"is_synthetic\": false\n    // Additional status fields omitted for brevity\n  },\n  {\n    \"id\": \"109876987654321123\",\n    \"content\": \"<p>Check out our latest open source contribution to the Fediverse!</p>\",\n    \"created_at\": \"2025-03-15T13:45:22.000Z\",\n    \"account\": {\n      \"id\": \"67890\",\n      \"username\": \"fediversedev\",\n      \"display_name\": \"Fediverse Developers\",\n      \"followers_count\": 3201,\n      \"following_count\": 129,\n      \"statuses_count\": 1432\n      // Additional account fields omitted for brevity\n    },\n    \"is_recommendation\": true,\n    \"recommendation_reason\": \"Popular with other users\",\n    \"ranking_score\": 0.82,\n    \"is_real_mastodon_post\": false,\n    \"is_synthetic\": true\n    // Additional status fields omitted for brevity\n  }\n]</code></pre>"},{"location":"endpoints/timelines/#integration-tips","title":"Integration Tips","text":""},{"location":"endpoints/timelines/#timeline-headers","title":"Timeline Headers","text":"<p>When using the augmented timeline, look for these response headers:</p> <pre><code>X-Corgi-Proxy: true\nX-Corgi-Instance: mastodon.social\nX-Corgi-Enhanced: true\nX-Corgi-Recommendations: 5\n</code></pre> <p>These headers indicate that the timeline has been enhanced with recommendations and provide additional metadata.</p>"},{"location":"endpoints/timelines/#displaying-recommendation-reasons","title":"Displaying Recommendation Reasons","text":"<p>For recommended posts, display the <code>recommendation_reason</code> to help users understand why a post was recommended:</p> <pre><code>&lt;div class=\"post\"&gt;\n  &lt;div class=\"post-content\"&gt;\n    &lt;!-- Post content here --&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"recommendation-badge\" v-if=\"post.is_recommendation\"&gt;\n    &lt;span class=\"reason\"&gt;{{ post.recommendation_reason }}&lt;/span&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"endpoints/timelines/#handling-pagination","title":"Handling Pagination","text":"<p>Timeline pagination follows the Mastodon standard:</p> <pre><code>// Initial request\nconst timeline = await fetch('/api/v1/timelines/home');\nconst data = await response.json();\n\n// Pagination using max_id (get older posts)\nconst olderPosts = await fetch(`/api/v1/timelines/home?max_id=${data.timeline[data.timeline.length-1].id}`);\n\n// Pagination using since_id (for newer posts)\nconst newerPosts = await fetch(`/api/v1/timelines/home?since_id=${data.timeline[0].id}`);\n</code></pre>"},{"location":"endpoints/timelines/#example-integration","title":"Example Integration","text":"<p>Here's a complete example of fetching and displaying an augmented timeline:</p> <pre><code>async function fetchAugmentedTimeline(token, instance = \"mastodon.social\", limit = 20) {\n  const response = await fetch(`https://api.corgi-recs.io/api/v1/timelines/home/augmented?limit=${limit}&amp;inject_recommendations=true`, {\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'X-Mastodon-Instance': instance,\n      'Content-Type': 'application/json'\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(`Error fetching timeline: ${response.status}`);\n  }\n\n  const data = await response.json();\n\n  // Log enhancement metadata\n  const recommendCount = data.injected_count || 0;\n  console.log(`Timeline enhanced with ${recommendCount} recommendations`);\n\n  return data.timeline;\n}\n\n// Render the timeline\nasync function renderTimeline() {\n  const timeline = await fetchAugmentedTimeline('YOUR_TOKEN', 'mastodon.social');\n  const timelineElement = document.getElementById('timeline');\n\n  timelineElement.innerHTML = '';\n\n  timeline.forEach(post =&gt; {\n    const postElement = document.createElement('div');\n    postElement.className = 'post';\n\n    // Add recommendation badge if applicable\n    if (post.is_recommendation) {\n      postElement.classList.add('recommended');\n\n      const badge = document.createElement('div');\n      badge.className = 'recommendation-badge';\n      badge.textContent = post.recommendation_reason || 'Recommended for you';\n      postElement.appendChild(badge);\n    }\n\n    // Add post content\n    const content = document.createElement('div');\n    content.className = 'content';\n    content.innerHTML = post.content;\n    postElement.appendChild(content);\n\n    // Add author info\n    const author = document.createElement('div');\n    author.className = 'author';\n    author.textContent = post.account.display_name;\n    postElement.appendChild(author);\n\n    timelineElement.appendChild(postElement);\n  });\n}\n\nrenderTimeline();\n</code></pre>"},{"location":"endpoints/timelines/#related-resources","title":"Related Resources","text":"<ul> <li>Recommendations API - Get detailed recommendations with metadata</li> <li>Feedback API - Log user interactions with posts</li> <li>Proxy Endpoints - Configure and monitor the proxy middleware</li> <li>Elk Integration Guide - Step-by-step guide for integrating with Elk app</li> <li>Concepts: Timeline Blending - Learn how recommendations are blended into timelines</li> </ul>"},{"location":"examples/cli/","title":"Build a CLI Tool in 5 Minutes","text":"<p>This guide shows you how to build a simple command-line interface (CLI) tool for Corgi using Python's <code>click</code> library. You'll create a tool that allows users to fetch recommendations, log interactions, and manage privacy settings from the terminal.</p>"},{"location":"examples/cli/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.6+</li> <li><code>click</code> library (<code>pip install click</code>)</li> <li><code>requests</code> library (<code>pip install requests</code>)</li> <li><code>rich</code> library for pretty output (<code>pip install rich</code>)</li> <li>A Corgi API key</li> </ul>"},{"location":"examples/cli/#project-setup","title":"Project Setup","text":"<p>Create a new directory for your CLI tool and set up a basic structure:</p> <pre><code>corgi-cli/\n\u251c\u2500\u2500 corgi_cli.py\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <p>Add the following to <code>requirements.txt</code>:</p> <pre><code>click&gt;=8.0.0\nrequests&gt;=2.25.0\nrich&gt;=10.0.0\n</code></pre>"},{"location":"examples/cli/#basic-cli-implementation","title":"Basic CLI Implementation","text":"<p>Here's the complete implementation of a basic CLI tool:</p> <pre><code>#!/usr/bin/env python3\n\"\"\"\nCorgi CLI - A command-line interface for the Corgi Recommender Service\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport click\nimport requests\nfrom datetime import datetime\nfrom rich.console import Console\nfrom rich.table import Table\nfrom rich.panel import Panel\nfrom rich.markdown import Markdown\nimport html\nimport re\n\n# Initialize Rich console\nconsole = Console()\n\nclass CorgiAPI:\n    \"\"\"Client for the Corgi Recommender Service API.\"\"\"\n\n    def __init__(self, api_key, base_url=\"https://api.corgi-recs.io\"):\n        self.api_key = api_key\n        self.base_url = base_url\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def get_recommendations(self, user_id, limit=10, exclude_seen=True, \n                           languages=None, debug=False):\n        \"\"\"Get personalized recommendations for a user.\"\"\"\n        params = {\n            \"user_id\": user_id,\n            \"limit\": limit,\n            \"exclude_seen\": \"true\" if exclude_seen else \"false\",\n            \"debug\": \"true\" if debug else \"false\"\n        }\n\n        if languages:\n            params[\"languages\"] = languages\n\n        response = requests.get(\n            f\"{self.base_url}/api/v1/recommendations\",\n            headers=self.headers,\n            params=params\n        )\n\n        response.raise_for_status()\n        return response.json()\n\n    def log_interaction(self, user_id, post_id, action_type, context=None):\n        \"\"\"Log a user interaction with a post.\"\"\"\n        data = {\n            \"user_alias\": user_id,\n            \"post_id\": post_id,\n            \"action_type\": action_type\n        }\n\n        if context:\n            data[\"context\"] = context\n\n        response = requests.post(\n            f\"{self.base_url}/api/v1/interactions\",\n            headers=self.headers,\n            json=data\n        )\n\n        response.raise_for_status()\n        return response.json()\n\n    def get_privacy_settings(self, user_id):\n        \"\"\"Get privacy settings for a user.\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/api/v1/privacy\",\n            headers=self.headers,\n            params={\"user_id\": user_id}\n        )\n\n        response.raise_for_status()\n        return response.json()\n\n    def update_privacy_settings(self, user_id, tracking_level):\n        \"\"\"Update privacy settings for a user.\"\"\"\n        data = {\n            \"user_id\": user_id,\n            \"tracking_level\": tracking_level\n        }\n\n        response = requests.post(\n            f\"{self.base_url}/api/v1/privacy\",\n            headers=self.headers,\n            json=data\n        )\n\n        response.raise_for_status()\n        return response.json()\n\ndef strip_html(text):\n    \"\"\"Remove HTML tags from text.\"\"\"\n    text = re.sub(r'&lt;[^&gt;]+&gt;', '', text)\n    return html.unescape(text).strip()\n\ndef format_timestamp(timestamp):\n    \"\"\"Format ISO timestamp to a readable format.\"\"\"\n    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n\n@click.group()\n@click.option('--api-key', envvar='CORGI_API_KEY', help='Corgi API key (or set CORGI_API_KEY env var)')\n@click.option('--base-url', default='https://api.corgi-recs.io', help='API base URL')\n@click.pass_context\ndef cli(ctx, api_key, base_url):\n    \"\"\"Corgi Recommender Service CLI\"\"\"\n    if not api_key:\n        console.print(\"[bold red]Error:[/] API key is required. Set --api-key or CORGI_API_KEY environment variable.\")\n        sys.exit(1)\n\n    ctx.ensure_object(dict)\n    ctx.obj['api'] = CorgiAPI(api_key=api_key, base_url=base_url)\n\n@cli.command()\n@click.option('--user-id', required=True, help='User ID to get recommendations for')\n@click.option('--limit', default=5, type=int, help='Number of recommendations to return')\n@click.option('--languages', help='Comma-separated list of language codes (e.g., \"en,es\")')\n@click.option('--no-exclude-seen', is_flag=True, help='Include posts the user has already seen')\n@click.option('--debug', is_flag=True, help='Include debug information in output')\n@click.option('--json', 'json_output', is_flag=True, help='Output raw JSON')\n@click.pass_context\ndef recommendations(ctx, user_id, limit, languages, no_exclude_seen, debug, json_output):\n    \"\"\"Get personalized recommendations for a user\"\"\"\n    api = ctx.obj['api']\n\n    try:\n        result = api.get_recommendations(\n            user_id=user_id,\n            limit=limit,\n            exclude_seen=not no_exclude_seen,\n            languages=languages,\n            debug=debug\n        )\n\n        if json_output:\n            # Raw JSON output\n            console.print(json.dumps(result, indent=2))\n            return\n\n        # Pretty display\n        posts = result['recommendations']\n\n        console.print(f\"\\n[bold green]Found {len(posts)} recommendations for user {user_id}[/]\")\n\n        for i, post in enumerate(posts, 1):\n            # Create a table for each post\n            table = Table(show_header=False, box=None)\n            table.add_column(\"Field\", style=\"blue\")\n            table.add_column(\"Value\")\n\n            table.add_row(\"Author\", f\"[bold]{post['account']['display_name']}[/] (@{post['account']['username']})\")\n            table.add_row(\"Posted\", format_timestamp(post['created_at']))\n            table.add_row(\"Content\", strip_html(post['content'])[:150] + (\"...\" if len(post['content']) &gt; 150 else \"\"))\n            table.add_row(\"Reason\", f\"[italic]{post['recommendation_reason']}[/]\")\n            table.add_row(\"Score\", f\"{post['ranking_score']:.2f}\")\n            table.add_row(\"Post ID\", post['id'])\n\n            console.print(Panel(table, title=f\"[bold]Recommendation {i}/{len(posts)}[/]\", expand=False))\n\n        # If debug info was requested and available, show it\n        if debug and 'debug_info' in result:\n            debug_info = result['debug_info']\n\n            debug_table = Table(show_header=False)\n            debug_table.add_column(\"Metric\", style=\"cyan\")\n            debug_table.add_column(\"Value\")\n\n            debug_table.add_row(\"User interactions\", str(debug_info.get('user_interactions_count', 'N/A')))\n            debug_table.add_row(\"Candidates evaluated\", str(debug_info.get('candidates_evaluated', 'N/A')))\n\n            weights = debug_info.get('factor_weights', {})\n            weights_str = \"\\n\".join([f\"{k}: {v}\" for k, v in weights.items()])\n            debug_table.add_row(\"Factor weights\", weights_str)\n\n            console.print(Panel(debug_table, title=\"[bold]Debug Info[/]\", expand=False))\n\n    except requests.RequestException as e:\n        console.print(f\"[bold red]Error:[/] {e}\")\n        sys.exit(1)\n\n@cli.command()\n@click.option('--user-id', required=True, help='User ID')\n@click.option('--post-id', required=True, help='Post ID')\n@click.option('--action', required=True, type=click.Choice(['favorite', 'bookmark', 'reblog', 'more_like_this', 'less_like_this']), help='Interaction type')\n@click.option('--source', default='cli', help='Source of the interaction')\n@click.pass_context\ndef interact(ctx, user_id, post_id, action, source):\n    \"\"\"Log a user interaction with a post\"\"\"\n    api = ctx.obj['api']\n\n    context = {\n        \"source\": source,\n        \"timestamp\": datetime.utcnow().isoformat() + \"Z\"\n    }\n\n    try:\n        result = api.log_interaction(\n            user_id=user_id,\n            post_id=post_id,\n            action_type=action,\n            context=context\n        )\n\n        console.print(f\"[bold green]Success![/] Logged {action} interaction for post {post_id}\")\n        console.print(f\"Interaction ID: {result.get('interaction_id', 'N/A')}\")\n\n    except requests.RequestException as e:\n        console.print(f\"[bold red]Error:[/] {e}\")\n        sys.exit(1)\n\n@cli.command()\n@click.option('--user-id', required=True, help='User ID to get privacy settings for')\n@click.pass_context\ndef privacy(ctx, user_id):\n    \"\"\"Get privacy settings for a user\"\"\"\n    api = ctx.obj['api']\n\n    try:\n        result = api.get_privacy_settings(user_id)\n\n        table = Table(show_header=False)\n        table.add_column(\"Setting\", style=\"blue\")\n        table.add_column(\"Value\")\n\n        table.add_row(\"User ID\", result.get('user_id', 'N/A'))\n        table.add_row(\"Tracking Level\", f\"[bold]{result.get('tracking_level', 'N/A')}[/]\")\n\n        if 'created_at' in result:\n            table.add_row(\"Created At\", format_timestamp(result['created_at']))\n\n        if 'updated_at' in result:\n            table.add_row(\"Updated At\", format_timestamp(result['updated_at']))\n\n        console.print(Panel(table, title=\"[bold]Privacy Settings[/]\", expand=False))\n\n    except requests.RequestException as e:\n        console.print(f\"[bold red]Error:[/] {e}\")\n        sys.exit(1)\n\n@cli.command()\n@click.option('--user-id', required=True, help='User ID to update privacy settings for')\n@click.option('--level', required=True, type=click.Choice(['full', 'limited', 'none']), help='Tracking level')\n@click.pass_context\ndef set_privacy(ctx, user_id, level):\n    \"\"\"Update privacy settings for a user\"\"\"\n    api = ctx.obj['api']\n\n    try:\n        result = api.update_privacy_settings(user_id, level)\n\n        console.print(f\"[bold green]Success![/] Updated privacy settings for user {user_id}\")\n        console.print(f\"Tracking level set to: [bold]{result.get('tracking_level', 'N/A')}[/]\")\n\n    except requests.RequestException as e:\n        console.print(f\"[bold red]Error:[/] {e}\")\n        sys.exit(1)\n\n@cli.command()\n@click.option('--user-id', required=True, help='User ID')\n@click.option('--interactive', '-i', is_flag=True, help='Enter interactive mode')\n@click.pass_context\ndef explore(ctx, user_id, interactive):\n    \"\"\"Explore recommendations interactively\"\"\"\n    api = ctx.obj['api']\n\n    if not interactive:\n        # Just get and display recommendations\n        ctx.invoke(recommendations, user_id=user_id, limit=5)\n        return\n\n    try:\n        while True:\n            console.print(\"\\n[bold cyan]Corgi Recommendation Explorer[/]\")\n            console.print(\"1. Get recommendations\")\n            console.print(\"2. View privacy settings\")\n            console.print(\"3. Update privacy settings\")\n            console.print(\"4. Quit\")\n\n            choice = console.input(\"\\nEnter choice (1-4): \")\n\n            if choice == '1':\n                limit = int(console.input(\"Number of recommendations (1-20) [5]: \") or \"5\")\n                languages = console.input(\"Languages (comma-separated, e.g., en,es) []: \")\n                debug = console.input(\"Include debug info? (y/n) [n]: \").lower() == 'y'\n\n                result = api.get_recommendations(\n                    user_id=user_id,\n                    limit=limit,\n                    languages=languages or None,\n                    debug=debug\n                )\n\n                posts = result['recommendations']\n                console.print(f\"\\n[bold green]Found {len(posts)} recommendations[/]\")\n\n                for i, post in enumerate(posts):\n                    # Display post\n                    md = f\"\"\"\n                    ## {i+1}/{len(posts)}: {post['account']['display_name']} (@{post['account']['username']})\n\n                    {strip_html(post['content'])}\n\n                    [Posted: {format_timestamp(post['created_at'])}]\n\n                    **Reason:** {post['recommendation_reason']}\n                    **Score:** {post['ranking_score']:.2f}\n                    \"\"\"\n\n                    console.print(Markdown(md))\n\n                    # Interaction menu\n                    console.print(\"[bold cyan]Actions:[/] (f)avorite, (b)ookmark, (r)eblog, (m)ore like this, (l)ess like this, (n)ext, (q)uit\")\n                    action = console.input(\"Action: \").lower()\n\n                    if action == 'q':\n                        return\n                    elif action == 'n':\n                        continue\n                    elif action in ['f', 'favorite']:\n                        api.log_interaction(user_id, post['id'], 'favorite', {\"source\": \"cli_explorer\"})\n                        console.print(\"[green]\u2713[/] Marked as favorite\")\n                    elif action in ['b', 'bookmark']:\n                        api.log_interaction(user_id, post['id'], 'bookmark', {\"source\": \"cli_explorer\"})\n                        console.print(\"[green]\u2713[/] Bookmarked\")\n                    elif action in ['r', 'reblog']:\n                        api.log_interaction(user_id, post['id'], 'reblog', {\"source\": \"cli_explorer\"})\n                        console.print(\"[green]\u2713[/] Reblogged\")\n                    elif action in ['m', 'more']:\n                        api.log_interaction(user_id, post['id'], 'more_like_this', {\"source\": \"cli_explorer\"})\n                        console.print(\"[green]\u2713[/] Noted: more like this\")\n                    elif action in ['l', 'less']:\n                        api.log_interaction(user_id, post['id'], 'less_like_this', {\"source\": \"cli_explorer\"})\n                        console.print(\"[green]\u2713[/] Noted: less like this\")\n\n                # Show debug info if requested\n                if debug and 'debug_info' in result:\n                    debug_info = result['debug_info']\n                    console.print(\"\\n[bold cyan]Debug Info:[/]\")\n                    console.print(f\"User interactions: {debug_info.get('user_interactions_count', 'N/A')}\")\n                    console.print(f\"Candidates evaluated: {debug_info.get('candidates_evaluated', 'N/A')}\")\n                    console.print(\"Factor weights:\")\n                    for k, v in debug_info.get('factor_weights', {}).items():\n                        console.print(f\"  {k}: {v}\")\n\n            elif choice == '2':\n                # View privacy settings\n                ctx.invoke(privacy, user_id=user_id)\n\n            elif choice == '3':\n                # Update privacy settings\n                console.print(\"\\n[bold cyan]Privacy Levels:[/]\")\n                console.print(\"full - Maximum personalization (stores all interactions)\")\n                console.print(\"limited - Balanced approach (stores aggregate data only)\")\n                console.print(\"none - Maximum privacy (no personalization)\")\n\n                level = console.input(\"\\nEnter new tracking level: \")\n                if level in ['full', 'limited', 'none']:\n                    result = api.update_privacy_settings(user_id, level)\n                    console.print(f\"[bold green]Success![/] Privacy level set to: {result['tracking_level']}\")\n                else:\n                    console.print(\"[bold red]Error:[/] Invalid privacy level\")\n\n            elif choice == '4':\n                return\n\n            else:\n                console.print(\"[bold yellow]Invalid choice. Please enter 1-4.[/]\")\n\n    except KeyboardInterrupt:\n        console.print(\"\\n[bold yellow]Exiting interactive mode[/]\")\n    except requests.RequestException as e:\n        console.print(f\"[bold red]Error:[/] {e}\")\n        sys.exit(1)\n\nif __name__ == '__main__':\n    cli(obj={})\n</code></pre>"},{"location":"examples/cli/#usage-examples","title":"Usage Examples","text":"<p>Make the script executable:</p> <pre><code>chmod +x corgi_cli.py\n</code></pre>"},{"location":"examples/cli/#getting-recommendations","title":"Getting Recommendations","text":"<pre><code># Set your API key as an environment variable\nexport CORGI_API_KEY=your_api_key_here\n\n# Get recommendations\n./corgi_cli.py recommendations --user-id user_12345 --limit 3\n\n# Get recommendations in specific languages\n./corgi_cli.py recommendations --user-id user_12345 --languages en,es\n\n# Get recommendations with debug info\n./corgi_cli.py recommendations --user-id user_12345 --debug\n\n# Output raw JSON\n./corgi_cli.py recommendations --user-id user_12345 --json\n</code></pre>"},{"location":"examples/cli/#logging-interactions","title":"Logging Interactions","text":"<pre><code># Log a favorite interaction\n./corgi_cli.py interact --user-id user_12345 --post-id post_67890 --action favorite\n\n# Log with a custom source\n./corgi_cli.py interact --user-id user_12345 --post-id post_67890 --action bookmark --source \"mobile_app\"\n</code></pre>"},{"location":"examples/cli/#managing-privacy-settings","title":"Managing Privacy Settings","text":"<pre><code># Get current privacy settings\n./corgi_cli.py privacy --user-id user_12345\n\n# Update privacy settings\n./corgi_cli.py set-privacy --user-id user_12345 --level limited\n</code></pre>"},{"location":"examples/cli/#interactive-mode","title":"Interactive Mode","text":"<p>The interactive mode allows you to explore recommendations and interact with them:</p> <pre><code>./corgi_cli.py explore --user-id user_12345 --interactive\n</code></pre>"},{"location":"examples/cli/#packaging-your-cli","title":"Packaging Your CLI","text":"<p>To make your CLI tool easily installable, create a <code>setup.py</code> file:</p> <pre><code>from setuptools import setup\n\nsetup(\n    name=\"corgi-cli\",\n    version=\"0.1.0\",\n    py_modules=[\"corgi_cli\"],\n    install_requires=[\n        \"click&gt;=8.0.0\",\n        \"requests&gt;=2.25.0\",\n        \"rich&gt;=10.0.0\",\n    ],\n    entry_points=\"\"\"\n        [console_scripts]\n        corgi=corgi_cli:cli\n    \"\"\",\n)\n</code></pre> <p>Then install it:</p> <pre><code>pip install -e .\n</code></pre> <p>Now you can use it as a global command:</p> <pre><code>corgi recommendations --user-id user_12345\n</code></pre>"},{"location":"examples/cli/#advanced-improvements","title":"Advanced Improvements","text":"<p>Here are some ways to enhance your CLI tool:</p>"},{"location":"examples/cli/#configuration-file","title":"Configuration File","text":"<p>Add support for a configuration file to store API keys and default settings:</p> <pre><code>import configparser\nimport os\n\ndef load_config():\n    config = configparser.ConfigParser()\n    config_file = os.path.expanduser('~/.corgi.ini')\n\n    if os.path.exists(config_file):\n        config.read(config_file)\n\n    return config\n\ndef save_config(config):\n    config_file = os.path.expanduser('~/.corgi.ini')\n\n    with open(config_file, 'w') as f:\n        config.write(f)\n\n@cli.command()\n@click.option('--api-key', help='Corgi API key')\n@click.option('--base-url', help='API base URL')\n@click.option('--default-user', help='Default user ID')\ndef configure(api_key, base_url, default_user):\n    \"\"\"Configure CLI settings\"\"\"\n    config = load_config()\n\n    if 'corgi' not in config:\n        config['corgi'] = {}\n\n    if api_key:\n        config['corgi']['api_key'] = api_key\n\n    if base_url:\n        config['corgi']['base_url'] = base_url\n\n    if default_user:\n        config['corgi']['default_user'] = default_user\n\n    save_config(config)\n    console.print(\"[bold green]Configuration saved![/]\")\n</code></pre>"},{"location":"examples/cli/#shell-completion","title":"Shell Completion","text":"<p>Add shell completion support:</p> <pre><code>@cli.command()\n@click.option('--shell', type=click.Choice(['bash', 'zsh', 'fish']), default='bash')\ndef completion(shell):\n    \"\"\"Generate shell completion script\"\"\"\n    from click.shell_completion import get_completion_class\n\n    comp_cls = get_completion_class(shell)\n    comp = comp_cls(cli, \"corgi\", \"_CORGI_COMPLETE\")\n\n    script = comp.source()\n    console.print(script)\n    console.print(f\"\\n[bold cyan]To enable completion, add this to your {shell} configuration file:[/]\")\n\n    if shell == 'bash':\n        console.print(\"eval \\\"$(corgi completion --shell bash)\\\"\")\n    elif shell == 'zsh':\n        console.print(\"eval \\\"$(corgi completion --shell zsh)\\\"\")\n    elif shell == 'fish':\n        console.print(\"corgi completion --shell fish | source\")\n</code></pre>"},{"location":"examples/cli/#output-formatting","title":"Output Formatting","text":"<p>Add support for different output formats:</p> <pre><code>@cli.command()\n@click.option('--user-id', required=True, help='User ID')\n@click.option('--format', type=click.Choice(['table', 'json', 'csv']), default='table')\n@click.pass_context\ndef interactions(ctx, user_id, format):\n    \"\"\"Get user interactions\"\"\"\n    api = ctx.obj['api']\n\n    try:\n        # Get user interactions\n        response = requests.get(\n            f\"{api.base_url}/api/v1/interactions/user/{user_id}\",\n            headers=api.headers\n        )\n\n        response.raise_for_status()\n        result = response.json()\n\n        interactions = result.get('interactions', [])\n\n        if format == 'json':\n            # Output JSON\n            console.print(json.dumps(interactions, indent=2))\n\n        elif format == 'csv':\n            # Output CSV\n            import csv\n            from io import StringIO\n\n            output = StringIO()\n            if interactions:\n                fieldnames = ['id', 'post_id', 'action_type', 'created_at']\n                writer = csv.DictWriter(output, fieldnames=fieldnames, extrasaction='ignore')\n                writer.writeheader()\n                writer.writerows(interactions)\n\n                console.print(output.getvalue())\n            else:\n                console.print(\"No interactions found\")\n\n        else:\n            # Output table\n            if interactions:\n                table = Table(show_header=True)\n                table.add_column(\"ID\", style=\"cyan\")\n                table.add_column(\"Post ID\")\n                table.add_column(\"Action\")\n                table.add_column(\"Created At\")\n\n                for interaction in interactions:\n                    table.add_row(\n                        interaction.get('id', 'N/A'),\n                        interaction.get('post_id', 'N/A'),\n                        interaction.get('action_type', 'N/A'),\n                        format_timestamp(interaction.get('created_at', ''))\n                    )\n\n                console.print(table)\n            else:\n                console.print(\"No interactions found\")\n\n    except requests.RequestException as e:\n        console.print(f\"[bold red]Error:[/] {e}\")\n        sys.exit(1)\n</code></pre>"},{"location":"examples/cli/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Python Client Example for more integration ideas</li> <li>Learn about Elk integration for a web client</li> <li>Check out the API Reference for more endpoints to integrate</li> </ul>"},{"location":"examples/elk/","title":"Elk Integration Guide","text":"<p>This guide walks you through integrating Corgi with Elk, a popular Mastodon web client. Elk is a great choice for Corgi integration because it allows custom API endpoints.</p>"},{"location":"examples/elk/#overview","title":"Overview","text":"<p>Integrating Corgi with Elk involves:</p> <ol> <li>Setting up an Elk account connected to your Mastodon instance</li> <li>Changing Elk's API URL to point to Corgi</li> <li>Linking your Mastodon account to Corgi for proper instance resolution</li> <li>Enjoying enhanced timelines with personalized recommendations</li> </ol>"},{"location":"examples/elk/#step-by-step-integration","title":"Step-by-Step Integration","text":""},{"location":"examples/elk/#1-create-or-access-your-elk-account","title":"1. Create or Access Your Elk Account","text":"<p>If you don't already have an Elk account:</p> <ol> <li>Visit elk.zone</li> <li>Click \"Sign in\"</li> <li>Enter your Mastodon instance (e.g., <code>mastodon.social</code>)</li> <li>Complete the authentication process</li> </ol> <p>If you already have an Elk account, simply sign in.</p>"},{"location":"examples/elk/#2-obtain-your-mastodon-access-token","title":"2. Obtain Your Mastodon Access Token","text":"<p>You'll need your Mastodon access token to link your account with Corgi:</p> <ol> <li>In Elk, click on your profile picture in the bottom left</li> <li>Select \"Settings\"</li> <li>Scroll down to \"Advanced\"</li> <li>Find your access token (it looks like <code>abc123def456ghi789</code>)</li> <li>Copy this token for the next step</li> </ol>      Security Note    <p>Your access token is sensitive information. Never share it publicly and be careful with how you store it.</p>"},{"location":"examples/elk/#3-link-your-mastodon-account-to-corgi","title":"3. Link Your Mastodon Account to Corgi","text":"<p>Before changing Elk's settings, link your Mastodon account to Corgi using our provided tool:</p> <pre><code># Link a user to a Mastodon instance\n./tools/link_user.py --user-id your_user_id --instance mastodon.social --token \"YOUR_MASTODON_ACCESS_TOKEN\"\n</code></pre> <p>Replace: - <code>your_user_id</code> with your Corgi user ID - <code>mastodon.social</code> with your actual Mastodon instance - <code>YOUR_MASTODON_ACCESS_TOKEN</code> with the token you copied in step 2</p> <p>Alternatively, you can use the API directly:</p> <pre><code>curl -X POST \"https://api.corgi-recs.io/api/v1/proxy/accounts/link\" \\\n  -H \"Authorization: Bearer YOUR_CORGI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"user_id\": \"your_user_id\",\n    \"instance\": \"mastodon.social\",\n    \"access_token\": \"YOUR_MASTODON_ACCESS_TOKEN\"\n  }'\n</code></pre> <p>A successful response looks like:</p> <pre><code>{\n  \"status\": \"ok\",\n  \"user_id\": \"your_user_id\",\n  \"instance\": \"https://mastodon.social\",\n  \"username\": \"@yourusername\",\n  \"message\": \"Account successfully linked\"\n}\n</code></pre>"},{"location":"examples/elk/#4-configure-elk-to-use-corgi","title":"4. Configure Elk to Use Corgi\ud83d\udcf8 Screenshot Example","text":"<p>Now change Elk's API URL:</p> <ol> <li>In Elk, click on your profile picture in the bottom left</li> <li>Select \"Settings\"</li> <li>Scroll down to \"Advanced\"</li> <li>Change \"API URL\" from your Mastodon instance to:    <pre><code>https://api.corgi-recs.io\n</code></pre></li> <li>Leave the access token unchanged</li> <li>Click \"Save\"</li> <li>Refresh the page</li> </ol> <p>Here's what the Elk settings should look like after configuration:</p>"},{"location":"examples/elk/#5-verify-the-integration","title":"5. Verify the Integration","text":"<p>To check that Corgi is working correctly:</p> <ol> <li>Visit your home timeline in Elk</li> <li>Look for recommendations with reason badges</li> <li>Favorite or boost some posts to start building your preference profile</li> <li>Refresh after a few interactions to see updated recommendations</li> </ol>"},{"location":"examples/elk/#understanding-recommendations-in-elk","title":"Understanding Recommendations in Elk","text":"<p>When browsing your timeline, you'll notice recommendations are seamlessly integrated with regular posts. They include a small badge indicating why they were recommended:</p> <p></p> <p>Common recommendation reasons include: - \"From an author you might like\" - \"Popular with other users\" - \"Recently posted\"</p> <p>As you interact with more content, recommendations will improve based on your preferences.</p>"},{"location":"examples/elk/#customizing-the-experience","title":"Customizing the Experience","text":""},{"location":"examples/elk/#using-augmented-timeline","title":"Using Augmented Timeline","text":"<p>For the most control over recommendation injection, use the augmented timeline endpoint:</p> <pre><code>curl \"https://api.corgi-recs.io/api/v1/timelines/home/augmented?inject_recommendations=true\" \\\n  -H \"Authorization: Bearer YOUR_MASTODON_TOKEN\" \\\n  -H \"X-Mastodon-Instance: mastodon.social\"\n</code></pre> <p>By explicitly setting <code>inject_recommendations=true</code>, you control when recommendations are included.</p>"},{"location":"examples/elk/#adjusting-server-configuration","title":"Adjusting Server Configuration","text":"<p>If you're running your own Corgi instance, you can configure the recommendation ratio in the environment:</p> <pre><code># In your .env file or environment variables\nRECOMMENDATION_BLEND_RATIO=0.4\n</code></pre> <p>Or using the command line when starting the server:</p> <pre><code>./run_server.py --no-ssl --debug-cors\n</code></pre> <p>The <code>--debug-cors</code> flag is useful during development to allow requests from localhost clients.</p>"},{"location":"examples/elk/#updating-privacy-settings","title":"Updating Privacy Settings","text":"<p>To change how much data Corgi collects:</p> <pre><code>curl -X POST \"https://api.corgi-recs.io/api/v1/privacy\" \\\n  -H \"Authorization: Bearer YOUR_CORGI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"user_id\": \"your_user_id\",\n    \"tracking_level\": \"limited\"\n  }'\n</code></pre> <p>Available tracking levels: - <code>full</code>: Maximum personalization (stores all interactions) - <code>limited</code>: Balanced approach (stores aggregate data only) - <code>none</code>: Maximum privacy (no personalization)</p>"},{"location":"examples/elk/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/elk/#timeline-not-loading","title":"Timeline Not Loading","text":"<p>If your timeline doesn't load after switching to Corgi:</p> <ol> <li>Check that you entered the correct API URL (<code>https://api.corgi-recs.io</code>)</li> <li>Verify that your account is properly linked using the <code>tools/link_user.py</code> script</li> <li>Ensure that the Corgi server is running with the correct SSL setup (try with <code>--no-ssl</code> during development)</li> <li>Try clearing your browser cache and refreshing</li> <li>Check the logs at <code>logs/proxy.log</code> for detailed error information</li> <li>If problems persist, temporarily switch back to your direct Mastodon instance URL</li> </ol>"},{"location":"examples/elk/#no-recommendations-appearing","title":"No Recommendations Appearing","text":"<p>If you don't see any recommendations:</p> <ol> <li>Check if recommendations are explicitly enabled with <code>inject_recommendations=true</code> in the augmented timeline</li> <li>Verify your privacy settings - if set to <code>none</code>, no recommendations will be shown</li> <li>Try using the <code>/api/v1/recommendations/timelines/recommended</code> endpoint directly to check if recommendations are being generated</li> <li>Check that your instance is properly detected using the <code>/api/v1/proxy/instance</code> endpoint</li> <li>Give it some time - recommendations appear after you've interacted with some content</li> </ol>"},{"location":"examples/elk/#performance-issues","title":"Performance Issues","text":"<p>If you notice slow performance:</p> <ol> <li>Check the proxy metrics with <code>curl http://localhost:5002/api/v1/proxy/metrics</code></li> <li>Consider increasing the <code>PROXY_TIMEOUT</code> if your Mastodon instance is slow to respond</li> <li>Verify that your Mastodon instance is responsive</li> <li>Try running the server without SSL in development (<code>--no-ssl</code> flag)</li> <li>Check the logs for timeout or connection errors</li> <li>For development environments, ensure CORS is properly configured with <code>--debug-cors</code></li> </ol>"},{"location":"examples/elk/#reverting-to-direct-mastodon-connection","title":"Reverting to Direct Mastodon Connection","text":"<p>If you want to disable Corgi and connect directly to Mastodon again:</p> <ol> <li>In Elk, click on your profile picture in the bottom left</li> <li>Select \"Settings\"</li> <li>Scroll down to \"Advanced\"</li> <li>Change \"API URL\" back to your Mastodon instance URL (e.g., <code>https://mastodon.social</code>)</li> <li>Click \"Save\"</li> <li>Refresh the page</li> </ol>"},{"location":"examples/elk/#alternative-clients","title":"Alternative Clients","text":"<p>While this guide focuses on Elk, similar steps apply to other Mastodon clients:</p> <ul> <li>Ivory: Settings \u2192 Advanced \u2192 Custom Server</li> <li>Ice Cubes: Settings \u2192 Accounts \u2192 Edit \u2192 Advanced \u2192 Custom API Base URL</li> <li>Toot!: Settings \u2192 Advanced \u2192 API URL</li> </ul>"},{"location":"examples/elk/#next-steps","title":"Next Steps","text":"<ul> <li>Try the Python Client Example for direct API integration</li> <li>Learn about building a CLI tool with Corgi</li> <li>Explore the Recommendation Engine to understand how it works</li> </ul>"},{"location":"examples/python/","title":"Python Client Example","text":"<p>This guide demonstrates how to integrate Corgi with a Python application using the <code>requests</code> library. We'll create a simple script that fetches personalized recommendations and logs user interactions.</p>"},{"location":"examples/python/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.6+</li> <li><code>requests</code> library (<code>pip install requests</code>)</li> <li>A Corgi API key</li> <li>A user ID in your Corgi system</li> </ul>"},{"location":"examples/python/#basic-client","title":"Basic Client","text":"<p>Let's start with a simple client class that handles authentication and common API operations:</p> <pre><code>import requests\nimport json\n\nclass CorgiClient:\n    \"\"\"\n    Simple Python client for the Corgi Recommender Service API.\n    \"\"\"\n\n    def __init__(self, api_key, base_url=\"https://api.corgi-recs.io\"):\n        \"\"\"\n        Initialize the client with your API key.\n\n        Args:\n            api_key (str): Your Corgi API key\n            base_url (str): The base URL for the Corgi API\n        \"\"\"\n        self.api_key = api_key\n        self.base_url = base_url\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def get_recommendations(self, user_id, limit=10, exclude_seen=True, languages=None, debug=False):\n        \"\"\"\n        Get personalized recommendations for a user.\n\n        Args:\n            user_id (str): The user ID to get recommendations for\n            limit (int): Maximum number of recommendations to return\n            exclude_seen (bool): Whether to exclude posts the user has already seen\n            languages (list): List of language codes to filter by (e.g., [\"en\", \"es\"])\n            debug (bool): Whether to include debug information in the response\n\n        Returns:\n            dict: The recommendations response\n        \"\"\"\n        params = {\n            \"user_id\": user_id,\n            \"limit\": limit,\n            \"exclude_seen\": exclude_seen,\n            \"debug\": debug\n        }\n\n        if languages:\n            params[\"languages\"] = \",\".join(languages)\n\n        response = requests.get(\n            f\"{self.base_url}/api/v1/recommendations\",\n            headers=self.headers,\n            params=params\n        )\n\n        response.raise_for_status()\n        return response.json()\n\n    def log_interaction(self, user_id, post_id, action_type, context=None):\n        \"\"\"\n        Log a user interaction with a post.\n\n        Args:\n            user_id (str): The user ID\n            post_id (str): The post ID\n            action_type (str): The type of interaction (favorite, bookmark, reblog, etc.)\n            context (dict): Additional context about the interaction\n\n        Returns:\n            dict: The response\n        \"\"\"\n        data = {\n            \"user_alias\": user_id,\n            \"post_id\": post_id,\n            \"action_type\": action_type\n        }\n\n        if context:\n            data[\"context\"] = context\n\n        response = requests.post(\n            f\"{self.base_url}/api/v1/interactions\",\n            headers=self.headers,\n            json=data\n        )\n\n        response.raise_for_status()\n        return response.json()\n\n    def get_privacy_settings(self, user_id):\n        \"\"\"\n        Get privacy settings for a user.\n\n        Args:\n            user_id (str): The user ID\n\n        Returns:\n            dict: The privacy settings\n        \"\"\"\n        response = requests.get(\n            f\"{self.base_url}/api/v1/privacy\",\n            headers=self.headers,\n            params={\"user_id\": user_id}\n        )\n\n        response.raise_for_status()\n        return response.json()\n\n    def update_privacy_settings(self, user_id, tracking_level):\n        \"\"\"\n        Update privacy settings for a user.\n\n        Args:\n            user_id (str): The user ID\n            tracking_level (str): The tracking level (full, limited, or none)\n\n        Returns:\n            dict: The updated privacy settings\n        \"\"\"\n        data = {\n            \"user_id\": user_id,\n            \"tracking_level\": tracking_level\n        }\n\n        response = requests.post(\n            f\"{self.base_url}/api/v1/privacy\",\n            headers=self.headers,\n            json=data\n        )\n\n        response.raise_for_status()\n        return response.json()\n</code></pre>"},{"location":"examples/python/#example-usage","title":"Example Usage","text":"<p>Here's how to use our client to fetch recommendations and log interactions:</p> <pre><code>def main():\n    # Initialize the client\n    api_key = \"YOUR_API_KEY\"\n    user_id = \"user_12345\"\n    client = CorgiClient(api_key)\n\n    # Get recommendations\n    print(\"Fetching recommendations...\")\n    recommendations = client.get_recommendations(\n        user_id=user_id,\n        limit=5,\n        languages=[\"en\"],\n        debug=True\n    )\n\n    # Display recommendations\n    print(f\"Found {len(recommendations['recommendations'])} recommendations:\")\n    for i, post in enumerate(recommendations['recommendations'], 1):\n        print(f\"\\n--- Recommendation {i} ---\")\n        print(f\"Author: {post['account']['display_name']} (@{post['account']['username']})\")\n\n        # Strip HTML for cleaner display\n        content = post['content'].replace(\"&lt;p&gt;\", \"\").replace(\"&lt;/p&gt;\", \"\")\n        print(f\"Content: {content[:100]}...\")\n\n        print(f\"Score: {post['ranking_score']:.2f}\")\n        print(f\"Reason: {post['recommendation_reason']}\")\n        print(f\"ID: {post['id']}\")\n\n    # If debug info was requested, show it\n    if 'debug_info' in recommendations:\n        print(\"\\n--- Debug Info ---\")\n        debug = recommendations['debug_info']\n        print(f\"User interactions: {debug['user_interactions_count']}\")\n        print(f\"Candidates evaluated: {debug['candidates_evaluated']}\")\n        print(f\"Weights: {json.dumps(debug['factor_weights'], indent=2)}\")\n\n    # Simulate user interaction with first recommendation\n    if recommendations['recommendations']:\n        first_post = recommendations['recommendations'][0]\n        post_id = first_post['id']\n\n        print(f\"\\nLogging a 'favorite' interaction for post {post_id}...\")\n        result = client.log_interaction(\n            user_id=user_id,\n            post_id=post_id,\n            action_type=\"favorite\",\n            context={\n                \"source\": \"python_example\",\n                \"recommendation\": True\n            }\n        )\n        print(f\"Interaction logged: {result}\")\n\n    # Get current privacy settings\n    print(\"\\nChecking privacy settings...\")\n    privacy = client.get_privacy_settings(user_id)\n    print(f\"Current tracking level: {privacy['tracking_level']}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/python/#full-application-example","title":"Full Application Example","text":"<p>Let's create a more complete application that allows exploring recommendations and interacting with posts:</p> <pre><code>import argparse\nimport json\nimport requests\nfrom datetime import datetime\nimport html\nimport re\n\nclass CorgiClient:\n    # (Implementation from above)\n    pass\n\ndef strip_html(text):\n    \"\"\"Remove HTML tags from text.\"\"\"\n    text = re.sub(r'&lt;[^&gt;]+&gt;', '', text)\n    return html.unescape(text).strip()\n\ndef format_timestamp(timestamp):\n    \"\"\"Format ISO timestamp to a readable format.\"\"\"\n    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n\ndef explore_recommendations(client, user_id):\n    \"\"\"Interactive exploration of recommendations.\"\"\"\n    while True:\n        print(\"\\n=== Recommendation Explorer ===\")\n        print(\"1. Get recommendations\")\n        print(\"2. View privacy settings\")\n        print(\"3. Update privacy settings\")\n        print(\"4. Quit\")\n\n        choice = input(\"\\nEnter your choice (1-4): \")\n\n        if choice == '1':\n            limit = int(input(\"Number of recommendations (1-20): \") or \"5\")\n            debug = input(\"Include debug info? (y/n): \").lower() == 'y'\n            languages = input(\"Filter by languages (comma-separated, e.g., en,es) or leave empty: \")\n\n            languages_list = None\n            if languages:\n                languages_list = [lang.strip() for lang in languages.split(',')]\n\n            try:\n                recommendations = client.get_recommendations(\n                    user_id=user_id,\n                    limit=limit,\n                    languages=languages_list,\n                    debug=debug\n                )\n\n                display_recommendations(client, user_id, recommendations)\n\n            except requests.RequestException as e:\n                print(f\"Error fetching recommendations: {e}\")\n\n        elif choice == '2':\n            try:\n                privacy = client.get_privacy_settings(user_id)\n                print(\"\\n=== Privacy Settings ===\")\n                print(f\"User ID: {privacy['user_id']}\")\n                print(f\"Tracking level: {privacy['tracking_level']}\")\n                print(f\"Created at: {privacy.get('created_at', 'N/A')}\")\n                print(f\"Updated at: {privacy.get('updated_at', 'N/A')}\")\n            except requests.RequestException as e:\n                print(f\"Error fetching privacy settings: {e}\")\n\n        elif choice == '3':\n            print(\"\\n=== Update Privacy Settings ===\")\n            print(\"Available tracking levels:\")\n            print(\"  full - Maximum personalization (stores all interactions)\")\n            print(\"  limited - Balanced approach (stores aggregate data only)\")\n            print(\"  none - Maximum privacy (no personalization)\")\n\n            level = input(\"\\nEnter new tracking level: \")\n            if level in ['full', 'limited', 'none']:\n                try:\n                    result = client.update_privacy_settings(user_id, level)\n                    print(f\"Privacy settings updated to: {result['tracking_level']}\")\n                except requests.RequestException as e:\n                    print(f\"Error updating privacy settings: {e}\")\n            else:\n                print(\"Invalid tracking level. Please choose from 'full', 'limited', or 'none'.\")\n\n        elif choice == '4':\n            break\n\n        else:\n            print(\"Invalid choice. Please enter a number from 1-4.\")\n\ndef display_recommendations(client, user_id, recommendations):\n    \"\"\"Display recommendations and allow interactions.\"\"\"\n    posts = recommendations['recommendations']\n\n    if not posts:\n        print(\"No recommendations found.\")\n        return\n\n    print(f\"\\nFound {len(posts)} recommendations:\")\n\n    for i, post in enumerate(posts):\n        print(f\"\\n--- Recommendation {i+1}/{len(posts)} ---\")\n        print(f\"Author: {post['account']['display_name']} (@{post['account']['username']})\")\n        print(f\"Posted: {format_timestamp(post['created_at'])}\")\n        print(f\"Content: {strip_html(post['content'])[:150]}...\")\n        print(f\"Reason: {post['recommendation_reason']}\")\n        print(f\"Score: {post['ranking_score']:.2f}\")\n\n        actions = ['next', 'favorite', 'bookmark', 'reblog', 'skip', 'quit']\n\n        while True:\n            action = input(f\"\\nAction ({'/'.join(actions)}): \").lower()\n\n            if action == 'next' or action == '':\n                break\n            elif action == 'skip':\n                break\n            elif action == 'quit':\n                return\n            elif action in ['favorite', 'bookmark', 'reblog']:\n                try:\n                    result = client.log_interaction(\n                        user_id=user_id,\n                        post_id=post['id'],\n                        action_type=action,\n                        context={\n                            \"source\": \"python_example\",\n                            \"recommendation\": True\n                        }\n                    )\n                    print(f\"Interaction logged: {result['status']}\")\n                except requests.RequestException as e:\n                    print(f\"Error logging interaction: {e}\")\n            else:\n                print(f\"Invalid action. Please choose from: {', '.join(actions)}\")\n\n    # If debug info was requested, show it\n    if 'debug_info' in recommendations:\n        print(\"\\n=== Debug Info ===\")\n        debug = recommendations['debug_info']\n        print(f\"User interactions: {debug['user_interactions_count']}\")\n        print(f\"Candidates evaluated: {debug['candidates_evaluated']}\")\n        print(\"Factor weights:\")\n        for factor, weight in debug['factor_weights'].items():\n            print(f\"  {factor}: {weight}\")\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Corgi Recommender Service Client\")\n    parser.add_argument(\"--api-key\", required=True, help=\"Your Corgi API key\")\n    parser.add_argument(\"--user-id\", required=True, help=\"User ID for recommendations\")\n    parser.add_argument(\"--base-url\", default=\"https://api.corgi-recs.io\", help=\"API base URL\")\n\n    args = parser.parse_args()\n\n    client = CorgiClient(api_key=args.api_key, base_url=args.base_url)\n\n    print(f\"Corgi Recommender Service Client\")\n    print(f\"Connected to: {args.base_url}\")\n    print(f\"User ID: {args.user_id}\")\n\n    try:\n        explore_recommendations(client, args.user_id)\n    except KeyboardInterrupt:\n        print(\"\\nExiting...\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/python/#using-with-jupyter-notebook","title":"Using with Jupyter Notebook","text":"<p>Corgi works great with Jupyter Notebooks for data analysis and visualization. Here's a simple example:</p> <pre><code>import requests\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Configure the client\nAPI_KEY = \"YOUR_API_KEY\"\nUSER_ID = \"user_12345\"\nBASE_URL = \"https://api.corgi-recs.io\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\n# Get recommendations with debug info\nresponse = requests.get(\n    f\"{BASE_URL}/api/v1/recommendations\",\n    headers=headers,\n    params={\n        \"user_id\": USER_ID,\n        \"limit\": 20,\n        \"debug\": True\n    }\n)\n\ndata = response.json()\n\n# Extract recommendations into a DataFrame\nposts = pd.DataFrame([\n    {\n        'post_id': post['id'],\n        'author': post['account']['display_name'],\n        'score': post['ranking_score'],\n        'reason': post['recommendation_reason'],\n        'created_at': pd.to_datetime(post['created_at'])\n    }\n    for post in data['recommendations']\n])\n\n# Display the recommendations\nposts\n\n# Visualize the distribution of recommendation reasons\nplt.figure(figsize=(10, 6))\nreason_counts = posts['reason'].value_counts()\nsns.barplot(x=reason_counts.index, y=reason_counts.values)\nplt.title('Distribution of Recommendation Reasons')\nplt.ylabel('Count')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n# Visualize the distribution of scores\nplt.figure(figsize=(10, 6))\nsns.histplot(posts['score'], bins=10)\nplt.title('Distribution of Recommendation Scores')\nplt.xlabel('Score')\nplt.ylabel('Count')\nplt.show()\n\n# Plot scores by reason\nplt.figure(figsize=(10, 6))\nsns.boxplot(x='reason', y='score', data=posts)\nplt.title('Recommendation Scores by Reason')\nplt.ylabel('Score')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n</code></pre>"},{"location":"examples/python/#integration-with-web-applications","title":"Integration with Web Applications","text":"<p>For web applications, you might want to create an API wrapper:</p> <pre><code>from flask import Flask, jsonify, request\nimport requests\n\napp = Flask(__name__)\n\nCORGI_API_KEY = \"YOUR_API_KEY\"\nCORGI_BASE_URL = \"https://api.corgi-recs.io\"\n\ndef get_corgi_headers():\n    return {\n        \"Authorization\": f\"Bearer {CORGI_API_KEY}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n@app.route('/recommendations')\ndef recommendations():\n    user_id = request.args.get('user_id')\n    if not user_id:\n        return jsonify({\"error\": \"user_id parameter is required\"}), 400\n\n    limit = request.args.get('limit', default=10, type=int)\n\n    # Forward request to Corgi\n    response = requests.get(\n        f\"{CORGI_BASE_URL}/api/v1/recommendations\",\n        headers=get_corgi_headers(),\n        params={\n            \"user_id\": user_id,\n            \"limit\": limit\n        }\n    )\n\n    # Return the response to the client\n    return jsonify(response.json())\n\n@app.route('/interactions', methods=['POST'])\ndef log_interaction():\n    data = request.json\n\n    # Forward to Corgi\n    response = requests.post(\n        f\"{CORGI_BASE_URL}/api/v1/interactions\",\n        headers=get_corgi_headers(),\n        json=data\n    )\n\n    return jsonify(response.json())\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"examples/python/#next-steps","title":"Next Steps","text":"<ul> <li>Try building a CLI tool with Corgi</li> <li>Explore Elk integration for a web client example</li> <li>Learn about the Recommendation Engine to understand how it works</li> </ul>"}]}