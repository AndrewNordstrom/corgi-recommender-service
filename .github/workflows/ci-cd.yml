name: Corgi Recommender CI/CD

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

jobs:
  linting:
    name: Linting and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        pip install -r requirements.txt
    
    # Make these checks informational only for now
    - name: Check formatting with Black
      continue-on-error: true
      run: black --check --line-length 100 .
    
    - name: Check import sorting with isort
      continue-on-error: true
      run: isort --check-only --profile black .
    
    - name: Lint with flake8
      # Only fail on critical errors
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: linting
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: corgi_recommender_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt
    
    - name: Run tests with pytest
      continue-on-error: true  # Make tests informational for now
      env:
        POSTGRES_HOST: localhost
        DB_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: corgi_recommender_test
        USER_HASH_SALT: test-salt-only-for-ci
      run: |
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}/corgi-recommender
        tags: |
          type=ref,event=branch
          type=sha,format=short
          latest
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Uncomment below to enable automatic Fly.io deployment
  # deploy-to-fly:
  #   name: Deploy to Fly.io
  #   runs-on: ubuntu-latest
  #   needs: docker
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - uses: actions/checkout@v3
  #   
  #   - name: Set up Flyctl
  #     uses: superfly/flyctl-actions/setup-flyctl@master
  #   
  #   - name: Deploy to Fly.io
  #     run: flyctl deploy --remote-only
  #     env:
  #       FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}