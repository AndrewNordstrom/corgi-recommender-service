version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: corgi-postgres
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-corgi}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-corgi123}
      - POSTGRES_DB=${POSTGRES_DB:-corgi_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_HOST_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-corgi}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - corgi-network
    profiles:
      - standalone
      - demo

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: corgi-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_HOST_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - corgi-network
    profiles:
      - standalone
      - demo

  # Corgi API Service
  corgi-api:
    build:
      context: .
      dockerfile: corgi-api.Dockerfile
    container_name: corgi-api
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-corgi}:${POSTGRES_PASSWORD:-corgi123}@postgres:5432/${POSTGRES_DB:-corgi_db}
      - REDIS_URL=redis://redis:6379
      - PYTHONUNBUFFERED=1
      - CORGI_ENV=${CORGI_ENV:-development}
    ports:
      - "${CORGI_API_HOST_PORT:-5002}:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - corgi-network
    profiles:
      - standalone
      - demo

  # ELK Client Service (Frontend)
  elk-client:
    build:
      context: .
      dockerfile: elk-client.Dockerfile
    container_name: elk-client
    environment:
      - NUXT_PUBLIC_CORGI_API_BASE=http://corgi-api:5000
      - NODE_ENV=production
    ports:
      - "${ELK_CLIENT_HOST_PORT:-3000}:3000"
    depends_on:
      corgi-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - corgi-network
    profiles:
      - demo

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  corgi-network:
    driver: bridge
    name: corgi-network